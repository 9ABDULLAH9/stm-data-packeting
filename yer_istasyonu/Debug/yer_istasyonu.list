
yer_istasyonu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a7c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006c60  08006c60  00007c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de8  08006de8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006de8  08006de8  00007de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df0  08006df0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df0  08006df0  00007df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006df4  08006df4  00007df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006df8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000068  08006e60  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  08006e60  00008724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001530e  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362d  00000000  00000000  0001d3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  000209d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9a  00000000  00000000  00021a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028178  00000000  00000000  0002271a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001756e  00000000  00000000  0004a892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1b26  00000000  00000000  00061e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d74  00000000  00000000  0015396c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001586e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006c44 	.word	0x08006c44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006c44 	.word	0x08006c44

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6898      	ldr	r0, [r3, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	899b      	ldrh	r3, [r3, #12]
 8000dac:	2200      	movs	r2, #0
 8000dae:	4619      	mov	r1, r3
 8000db0:	f001 ff26 	bl	8002c00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f001 fa69 	bl	800228c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6898      	ldr	r0, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	899b      	ldrh	r3, [r3, #12]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f001 ff1b 	bl	8002c00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000dca:	2064      	movs	r0, #100	@ 0x64
 8000dcc:	f001 fa5e 	bl	800228c <HAL_Delay>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000de2:	2101      	movs	r1, #1
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f9fe 	bl	80011e6 <LoRa_read>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d107      	bne.n	8000e08 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000df8:	7bbb      	ldrb	r3, [r7, #14]
 8000dfa:	f023 0307 	bic.w	r3, r3, #7
 8000dfe:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
 8000e06:	e03e      	b.n	8000e86 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d10c      	bne.n	8000e28 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e12:	f023 0307 	bic.w	r3, r3, #7
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	61da      	str	r2, [r3, #28]
 8000e26:	e02e      	b.n	8000e86 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d10c      	bne.n	8000e48 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000e2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e32:	f023 0307 	bic.w	r3, r3, #7
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	f043 0303 	orr.w	r3, r3, #3
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2203      	movs	r2, #3
 8000e44:	61da      	str	r2, [r3, #28]
 8000e46:	e01e      	b.n	8000e86 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	2b05      	cmp	r3, #5
 8000e4c:	d10c      	bne.n	8000e68 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000e4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e52:	f023 0307 	bic.w	r3, r3, #7
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	f043 0305 	orr.w	r3, r3, #5
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2205      	movs	r2, #5
 8000e64:	61da      	str	r2, [r3, #28]
 8000e66:	e00e      	b.n	8000e86 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d10b      	bne.n	8000e86 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000e6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e72:	f023 0307 	bic.w	r3, r3, #7
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	f043 0306 	orr.w	r3, r3, #6
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2206      	movs	r2, #6
 8000e84:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f9c4 	bl	800121a <LoRa_write>
	//HAL_Delay(10);
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	889b      	ldrh	r3, [r3, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f001 fea3 	bl	8002c00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6998      	ldr	r0, [r3, #24]
 8000ebe:	88fa      	ldrh	r2, [r7, #6]
 8000ec0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	f003 f89e 	bl	8004006 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000eca:	bf00      	nop
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fd66 	bl	80049a2 <HAL_SPI_GetState>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d1f7      	bne.n	8000ecc <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6998      	ldr	r0, [r3, #24]
 8000ee0:	8b3a      	ldrh	r2, [r7, #24]
 8000ee2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ee6:	6839      	ldr	r1, [r7, #0]
 8000ee8:	f003 fa02 	bl	80042f0 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000eec:	bf00      	nop
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fd55 	bl	80049a2 <HAL_SPI_GetState>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d1f7      	bne.n	8000eee <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	889b      	ldrh	r3, [r3, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f001 fe79 	bl	8002c00 <HAL_GPIO_WritePin>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4613      	mov	r3, r2
 8000f24:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	889b      	ldrh	r3, [r3, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	f001 fe65 	bl	8002c00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6998      	ldr	r0, [r3, #24]
 8000f3a:	88fa      	ldrh	r2, [r7, #6]
 8000f3c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	f003 f860 	bl	8004006 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f46:	bf00      	nop
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fd28 	bl	80049a2 <HAL_SPI_GetState>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d1f7      	bne.n	8000f48 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6998      	ldr	r0, [r3, #24]
 8000f5c:	8b3a      	ldrh	r2, [r7, #24]
 8000f5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	f003 f84f 	bl	8004006 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f68:	bf00      	nop
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fd17 	bl	80049a2 <HAL_SPI_GetState>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d1f7      	bne.n	8000f6a <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	889b      	ldrh	r3, [r3, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	4619      	mov	r1, r3
 8000f86:	f001 fe3b 	bl	8002c00 <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000f9e:	2126      	movs	r1, #38	@ 0x26
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f920 	bl	80011e6 <LoRa_read>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e003      	b.n	8000fc2 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	f023 0308 	bic.w	r3, r3, #8
 8000fc0:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2126      	movs	r1, #38	@ 0x26
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f926 	bl	800121a <LoRa_write>
	HAL_Delay(10);
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f001 f95c 	bl	800228c <HAL_Delay>
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b096      	sub	sp, #88	@ 0x58
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000fe4:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <LoRa_setAutoLDO+0x68>)
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4611      	mov	r1, r2
 8000fec:	2250      	movs	r2, #80	@ 0x50
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 fff3 	bl	8005fda <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	4093      	lsls	r3, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff faaf 	bl	8000564 <__aeabi_i2d>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	3358      	adds	r3, #88	@ 0x58
 8001010:	443b      	add	r3, r7
 8001012:	3b50      	subs	r3, #80	@ 0x50
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fc38 	bl	800088c <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fd1a 	bl	8000a5c <__aeabi_d2iz>
 8001028:	4603      	mov	r3, r0
 800102a:	2b10      	cmp	r3, #16
 800102c:	bfcc      	ite	gt
 800102e:	2301      	movgt	r3, #1
 8001030:	2300      	movle	r3, #0
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffab 	bl	8000f92 <LoRa_setLowDaraRateOptimization>
}
 800103c:	bf00      	nop
 800103e:	3758      	adds	r7, #88	@ 0x58
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08006c60 	.word	0x08006c60

08001048 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	04db      	lsls	r3, r3, #19
 8001056:	115b      	asrs	r3, r3, #5
 8001058:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	0c1b      	lsrs	r3, r3, #16
 800105e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	461a      	mov	r2, r3
 8001064:	2106      	movs	r1, #6
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f8d7 	bl	800121a <LoRa_write>
	HAL_Delay(5);
 800106c:	2005      	movs	r0, #5
 800106e:	f001 f90d 	bl	800228c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001078:	7afb      	ldrb	r3, [r7, #11]
 800107a:	461a      	mov	r2, r3
 800107c:	2107      	movs	r1, #7
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f8cb 	bl	800121a <LoRa_write>
	HAL_Delay(5);
 8001084:	2005      	movs	r0, #5
 8001086:	f001 f901 	bl	800228c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800108e:	7afb      	ldrb	r3, [r7, #11]
 8001090:	461a      	mov	r2, r3
 8001092:	2108      	movs	r1, #8
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f8c0 	bl	800121a <LoRa_write>
	HAL_Delay(5);
 800109a:	2005      	movs	r0, #5
 800109c:	f001 f8f6 	bl	800228c <HAL_Delay>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	2b0c      	cmp	r3, #12
 80010b6:	dd01      	ble.n	80010bc <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80010b8:	230c      	movs	r3, #12
 80010ba:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	dc01      	bgt.n	80010c6 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80010c2:	2307      	movs	r3, #7
 80010c4:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80010c6:	211e      	movs	r1, #30
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f88c 	bl	80011e6 <LoRa_read>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80010d2:	200a      	movs	r0, #10
 80010d4:	f001 f8da 	bl	800228c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4413      	add	r3, r2
 80010ea:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	461a      	mov	r2, r3
 80010f0:	211e      	movs	r1, #30
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f891 	bl	800121a <LoRa_write>
	HAL_Delay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f001 f8c7 	bl	800228c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ff6c 	bl	8000fdc <LoRa_setAutoLDO>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	461a      	mov	r2, r3
 800111c:	2109      	movs	r1, #9
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f87b 	bl	800121a <LoRa_write>
	HAL_Delay(10);
 8001124:	200a      	movs	r0, #10
 8001126:	f001 f8b1 	bl	800228c <HAL_Delay>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	2b2c      	cmp	r3, #44	@ 0x2c
 8001148:	d801      	bhi.n	800114e <LoRa_setOCP+0x1a>
		current = 45;
 800114a:	232d      	movs	r3, #45	@ 0x2d
 800114c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	2bf0      	cmp	r3, #240	@ 0xf0
 8001152:	d901      	bls.n	8001158 <LoRa_setOCP+0x24>
		current = 240;
 8001154:	23f0      	movs	r3, #240	@ 0xf0
 8001156:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	2b78      	cmp	r3, #120	@ 0x78
 800115c:	d809      	bhi.n	8001172 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	3b2d      	subs	r3, #45	@ 0x2d
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <LoRa_setOCP+0x78>)
 8001164:	fb82 1203 	smull	r1, r2, r2, r3
 8001168:	1052      	asrs	r2, r2, #1
 800116a:	17db      	asrs	r3, r3, #31
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e00b      	b.n	800118a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	2bf0      	cmp	r3, #240	@ 0xf0
 8001176:	d808      	bhi.n	800118a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	331e      	adds	r3, #30
 800117c:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <LoRa_setOCP+0x78>)
 800117e:	fb82 1203 	smull	r1, r2, r2, r3
 8001182:	1092      	asrs	r2, r2, #2
 8001184:	17db      	asrs	r3, r3, #31
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	3320      	adds	r3, #32
 800118e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	461a      	mov	r2, r3
 8001194:	210b      	movs	r1, #11
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f83f 	bl	800121a <LoRa_write>
	HAL_Delay(10);
 800119c:	200a      	movs	r0, #10
 800119e:	f001 f875 	bl	800228c <HAL_Delay>
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	66666667 	.word	0x66666667

080011b0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80011b8:	211e      	movs	r1, #30
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f813 	bl	80011e6 <LoRa_read>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 0307 	orr.w	r3, r3, #7
 80011ca:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	461a      	mov	r2, r3
 80011d0:	211e      	movs	r1, #30
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f821 	bl	800121a <LoRa_write>
	HAL_Delay(10);
 80011d8:	200a      	movs	r0, #10
 80011da:	f001 f857 	bl	800228c <HAL_Delay>
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af02      	add	r7, sp, #8
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80011fc:	f107 030f 	add.w	r3, r7, #15
 8001200:	f107 010e 	add.w	r1, r7, #14
 8001204:	2201      	movs	r2, #1
 8001206:	9200      	str	r2, [sp, #0]
 8001208:	2201      	movs	r2, #1
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fe45 	bl	8000e9a <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af02      	add	r7, sp, #8
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	70fb      	strb	r3, [r7, #3]
 8001226:	4613      	mov	r3, r2
 8001228:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001230:	b2db      	uxtb	r3, r3
 8001232:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001238:	f107 030f 	add.w	r3, r7, #15
 800123c:	f107 010e 	add.w	r1, r7, #14
 8001240:	2201      	movs	r2, #1
 8001242:	9200      	str	r2, [sp, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fe65 	bl	8000f16 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	461a      	mov	r2, r3
 8001260:	460b      	mov	r3, r1
 8001262:	72fb      	strb	r3, [r7, #11]
 8001264:	4613      	mov	r3, r2
 8001266:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001268:	7afb      	ldrb	r3, [r7, #11]
 800126a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800126e:	b2db      	uxtb	r3, r3
 8001270:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	889b      	ldrh	r3, [r3, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	f001 fcbf 	bl	8002c00 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6998      	ldr	r0, [r3, #24]
 8001286:	f107 0117 	add.w	r1, r7, #23
 800128a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800128e:	2201      	movs	r2, #1
 8001290:	f002 feb9 	bl	8004006 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001294:	bf00      	nop
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fb81 	bl	80049a2 <HAL_SPI_GetState>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d1f7      	bne.n	8001296 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6998      	ldr	r0, [r3, #24]
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f002 fea7 	bl	8004006 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012b8:	bf00      	nop
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 fb6f 	bl	80049a2 <HAL_SPI_GetState>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d1f7      	bne.n	80012ba <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	889b      	ldrh	r3, [r3, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4619      	mov	r1, r3
 80012d6:	f001 fc93 	bl	8002c00 <HAL_GPIO_WritePin>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]

	return 1;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	460b      	mov	r3, r1
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	4613      	mov	r3, r2
 800130c:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001314:	2101      	movs	r1, #1
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff fd5e 	bl	8000dd8 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800131c:	210e      	movs	r1, #14
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff ff61 	bl	80011e6 <LoRa_read>
 8001324:	4603      	mov	r3, r0
 8001326:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001328:	7cfb      	ldrb	r3, [r7, #19]
 800132a:	461a      	mov	r2, r3
 800132c:	210d      	movs	r1, #13
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff ff73 	bl	800121a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	461a      	mov	r2, r3
 8001338:	2122      	movs	r1, #34	@ 0x22
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f7ff ff6d 	bl	800121a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	2100      	movs	r1, #0
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff ff84 	bl	8001254 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800134c:	2103      	movs	r1, #3
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff fd42 	bl	8000dd8 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001354:	2112      	movs	r1, #18
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff ff45 	bl	80011e6 <LoRa_read>
 800135c:	4603      	mov	r3, r0
 800135e:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001360:	7cfb      	ldrb	r3, [r7, #19]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00a      	beq.n	8001380 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800136a:	22ff      	movs	r2, #255	@ 0xff
 800136c:	2112      	movs	r1, #18
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff ff53 	bl	800121a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001374:	6979      	ldr	r1, [r7, #20]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff fd2e 	bl	8000dd8 <LoRa_gotoMode>
			return 1;
 800137c:	2301      	movs	r3, #1
 800137e:	e00f      	b.n	80013a0 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	80bb      	strh	r3, [r7, #4]
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d105      	bne.n	8001398 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800138c:	6979      	ldr	r1, [r7, #20]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff fd22 	bl	8000dd8 <LoRa_gotoMode>
				return 0;
 8001394:	2300      	movs	r3, #0
 8001396:	e003      	b.n	80013a0 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001398:	2001      	movs	r0, #1
 800139a:	f000 ff77 	bl	800228c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800139e:	e7d9      	b.n	8001354 <LoRa_transmit+0x5c>
	}
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80013b0:	2105      	movs	r1, #5
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fd10 	bl	8000dd8 <LoRa_gotoMode>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	4613      	mov	r3, r2
 80013cc:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	e007      	b.n	80013e8 <LoRa_receive+0x28>
		data[i]=0;
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	4413      	add	r3, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf3      	blt.n	80013d8 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80013f0:	2101      	movs	r1, #1
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff fcf0 	bl	8000dd8 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80013f8:	2112      	movs	r1, #18
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff fef3 	bl	80011e6 <LoRa_read>
 8001400:	4603      	mov	r3, r0
 8001402:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001404:	7cfb      	ldrb	r3, [r7, #19]
 8001406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d02f      	beq.n	800146e <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800140e:	22ff      	movs	r2, #255	@ 0xff
 8001410:	2112      	movs	r1, #18
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f7ff ff01 	bl	800121a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001418:	2113      	movs	r1, #19
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f7ff fee3 	bl	80011e6 <LoRa_read>
 8001420:	4603      	mov	r3, r0
 8001422:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001424:	2110      	movs	r1, #16
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff fedd 	bl	80011e6 <LoRa_read>
 800142c:	4603      	mov	r3, r0
 800142e:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001430:	7cfb      	ldrb	r3, [r7, #19]
 8001432:	461a      	mov	r2, r3
 8001434:	210d      	movs	r1, #13
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff feef 	bl	800121a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800143c:	7cba      	ldrb	r2, [r7, #18]
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4293      	cmp	r3, r2
 8001442:	bf28      	it	cs
 8001444:	4613      	movcs	r3, r2
 8001446:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00b      	b.n	8001466 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	18d4      	adds	r4, r2, r3
 8001454:	2100      	movs	r1, #0
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7ff fec5 	bl	80011e6 <LoRa_read>
 800145c:	4603      	mov	r3, r0
 800145e:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	7ffb      	ldrb	r3, [r7, #31]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	429a      	cmp	r2, r3
 800146c:	dbef      	blt.n	800144e <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800146e:	2105      	movs	r1, #5
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7ff fcb1 	bl	8000dd8 <LoRa_gotoMode>
    return min;
 8001476:	7ffb      	ldrb	r3, [r7, #31]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3724      	adds	r7, #36	@ 0x24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}

08001480 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff2a 	bl	80012e2 <LoRa_isvalid>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8096 	beq.w	80015c2 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001496:	2100      	movs	r1, #0
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fc9d 	bl	8000dd8 <LoRa_gotoMode>
			HAL_Delay(10);
 800149e:	200a      	movs	r0, #10
 80014a0:	f000 fef4 	bl	800228c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80014a4:	2101      	movs	r1, #1
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fe9d 	bl	80011e6 <LoRa_read>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80014b0:	200a      	movs	r0, #10
 80014b2:	f000 feeb 	bl	800228c <HAL_Delay>
			data = read | 0x80;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014bc:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	461a      	mov	r2, r3
 80014c2:	2101      	movs	r1, #1
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fea8 	bl	800121a <LoRa_write>
			HAL_Delay(100);
 80014ca:	2064      	movs	r0, #100	@ 0x64
 80014cc:	f000 fede 	bl	800228c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fdb6 	bl	8001048 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fe11 	bl	800110c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80014f0:	4619      	mov	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fe1e 	bl	8001134 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80014f8:	2223      	movs	r2, #35	@ 0x23
 80014fa:	210c      	movs	r1, #12
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fe8c 	bl	800121a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fe54 	bl	80011b0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fdc9 	bl	80010a8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001516:	22ff      	movs	r2, #255	@ 0xff
 8001518:	211f      	movs	r1, #31
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fe7d 	bl	800121a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	b2da      	uxtb	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	461a      	mov	r2, r3
 8001540:	211d      	movs	r1, #29
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fe69 	bl	800121a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fd47 	bl	8000fdc <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	b29b      	uxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	2120      	movs	r1, #32
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe5c 	bl	800121a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	2121      	movs	r1, #33	@ 0x21
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fe54 	bl	800121a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001572:	2140      	movs	r1, #64	@ 0x40
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fe36 	bl	80011e6 <LoRa_read>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001584:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	461a      	mov	r2, r3
 800158a:	2140      	movs	r1, #64	@ 0x40
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fe44 	bl	800121a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001592:	2101      	movs	r1, #1
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fc1f 	bl	8000dd8 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80015a0:	200a      	movs	r0, #10
 80015a2:	f000 fe73 	bl	800228c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80015a6:	2142      	movs	r1, #66	@ 0x42
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fe1c 	bl	80011e6 <LoRa_read>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	2b12      	cmp	r3, #18
 80015b6:	d101      	bne.n	80015bc <LoRa_init+0x13c>
				return LORA_OK;
 80015b8:	23c8      	movs	r3, #200	@ 0xc8
 80015ba:	e004      	b.n	80015c6 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80015bc:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80015c0:	e001      	b.n	80015c6 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80015c2:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <Lora_SetDefaultConfig>:




void Lora_SetDefaultConfig(LoRa* setLora)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
	setLora->frequency             = 433;							  // default = 433 MHz
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80015dc:	621a      	str	r2, [r3, #32]
	setLora->spredingFactor        = SF_7;							// default = SF_7
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2207      	movs	r2, #7
 80015e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	setLora->bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2207      	movs	r2, #7
 80015ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	setLora->crcRate				       = CR_4_5;						// default = CR_4_5
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	setLora->power					       = POWER_20db;				// default = 20db
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	22ff      	movs	r2, #255	@ 0xff
 80015fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	setLora->overCurrentProtection = 100; 							// default = 100 mA
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2264      	movs	r2, #100	@ 0x64
 8001602:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	setLora->preamble				       = 8;		  					// default = 8;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2208      	movs	r2, #8
 800160a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800161c:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <MX_CRC_Init+0x3c>)
 800161e:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <MX_CRC_Init+0x40>)
 8001620:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_CRC_Init+0x3c>)
 8001624:	2200      	movs	r2, #0
 8001626:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001628:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <MX_CRC_Init+0x3c>)
 800162a:	2200      	movs	r2, #0
 800162c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_CRC_Init+0x3c>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <MX_CRC_Init+0x3c>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_CRC_Init+0x3c>)
 800163c:	2201      	movs	r2, #1
 800163e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MX_CRC_Init+0x3c>)
 8001642:	f000 ff55 	bl	80024f0 <HAL_CRC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800164c:	f000 f9cc 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000084 	.word	0x20000084
 8001658:	40023000 	.word	0x40023000

0800165c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <HAL_CRC_MspInit+0x38>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10b      	bne.n	8001686 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <HAL_CRC_MspInit+0x3c>)
 8001670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001672:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <HAL_CRC_MspInit+0x3c>)
 8001674:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001678:	6493      	str	r3, [r2, #72]	@ 0x48
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <HAL_CRC_MspInit+0x3c>)
 800167c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023000 	.word	0x40023000
 8001698:	40021000 	.word	0x40021000

0800169c <transmit_data_packet>:
#include "spi.h"
#include "usart.h"
#include "usb.h"
#include "gpio.h"

uint8_t transmit_data_packet(Data_packet* transmit_data) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    uint8_t buffer[20]; // CRC için gerekli olan 2 ekstra byte'ı dahil ettik

    buffer[0] = transmit_data->c_stat;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	723b      	strb	r3, [r7, #8]

    // Altitude değerini 8 bitlik yüksek ve düşük byte'lara ayırarak uint16_t olarak buffer'a ekledik
    buffer[1] = (uint8_t)(transmit_data->altitude >> 8); // Yüksek byte
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	885b      	ldrh	r3, [r3, #2]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	727b      	strb	r3, [r7, #9]
    buffer[2] = (uint8_t)transmit_data->altitude;       // Düşük byte
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	885b      	ldrh	r3, [r3, #2]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	72bb      	strb	r3, [r7, #10]

    // Pressure değeri float olarak buffer'a ekleniyor
    *(float *)&buffer[3] = transmit_data->pressure;
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	3303      	adds	r3, #3
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6852      	ldr	r2, [r2, #4]
 80016c8:	601a      	str	r2, [r3, #0]

    buffer[7] = transmit_data->bat_level;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7a1b      	ldrb	r3, [r3, #8]
 80016ce:	73fb      	strb	r3, [r7, #15]

    // Latitude ve longitude değerleri float olarak buffer'a ekleniyor
    *(float *)&buffer[8] = transmit_data->latitude;
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	3308      	adds	r3, #8
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68d2      	ldr	r2, [r2, #12]
 80016da:	601a      	str	r2, [r3, #0]
    *(float *)&buffer[12] = transmit_data->longtitude;
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	330c      	adds	r3, #12
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6912      	ldr	r2, [r2, #16]
 80016e6:	601a      	str	r2, [r3, #0]

    // CRC hesaplaması için gerekli olan buffer boyutunu 20'ye artırdık
    uint16_t crc = HAL_CRC_Calculate(&hcrc, buffer, 20); // 20 byte'lık buffer için CRC hesaplanıyor
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	2214      	movs	r2, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480b      	ldr	r0, [pc, #44]	@ (8001720 <transmit_data_packet+0x84>)
 80016f2:	f000 ff61 	bl	80025b8 <HAL_CRC_Calculate>
 80016f6:	4603      	mov	r3, r0
 80016f8:	83fb      	strh	r3, [r7, #30]

    buffer[18] = (uint8_t)(crc >> 8); // CRC'nin yüksek byte'ı
 80016fa:	8bfb      	ldrh	r3, [r7, #30]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	76bb      	strb	r3, [r7, #26]
    buffer[19] = (uint8_t)crc;        // CRC'nin düşük byte'ı
 8001704:	8bfb      	ldrh	r3, [r7, #30]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	76fb      	strb	r3, [r7, #27]

    transmit_data->crc = crc; // CRC değeri struct içinde güncelleniyor
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	8bfa      	ldrh	r2, [r7, #30]
 800170e:	829a      	strh	r2, [r3, #20]

    return buffer; // Return değeri buffer
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	b2db      	uxtb	r3, r3
}
 8001716:	4618      	mov	r0, r3
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000084 	.word	0x20000084

08001724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <MX_GPIO_Init+0xac>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	4a24      	ldr	r2, [pc, #144]	@ (80017d0 <MX_GPIO_Init+0xac>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001746:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <MX_GPIO_Init+0xac>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <MX_GPIO_Init+0xac>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <MX_GPIO_Init+0xac>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <MX_GPIO_Init+0xac>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFM98RESET_Pin|SPI1_NSS_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f248 0140 	movw	r1, #32832	@ 0x8040
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f001 fa44 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RFM98RESET_Pin|SPI1_NSS_Pin;
 8001778:	f248 0340 	movw	r3, #32832	@ 0x8040
 800177c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4619      	mov	r1, r3
 8001790:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001794:	f001 f8b2 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8001798:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800179c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b2:	f001 f8a3 	bl	80028fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2017      	movs	r0, #23
 80017bc:	f000 fe63 	bl	8002486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c0:	2017      	movs	r0, #23
 80017c2:	f000 fe7a 	bl	80024ba <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin)
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017e4:	d104      	bne.n	80017f0 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		// RECEIVING DATA - - - - - - - - - - - - - - - - - - - - - - - -
		LoRa_receive(&myLoRa, read_data, 6);
 80017e6:	2206      	movs	r2, #6
 80017e8:	4903      	ldr	r1, [pc, #12]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80017ea:	4804      	ldr	r0, [pc, #16]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x28>)
 80017ec:	f7ff fde8 	bl	80013c0 <LoRa_receive>
  	}
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200000d4 	.word	0x200000d4
 80017fc:	200000a8 	.word	0x200000a8

08001800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001806:	f000 fcd0 	bl	80021aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180a:	f000 f8a1 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180e:	f7ff ff89 	bl	8001724 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001812:	f000 f8ef 	bl	80019f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001816:	f000 f92b 	bl	8001a70 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800181a:	f000 fb0f 	bl	8001e3c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800181e:	f000 fb59 	bl	8001ed4 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8001822:	f000 fc3d 	bl	80020a0 <MX_USB_PCD_Init>
  MX_CRC_Init();
 8001826:	f7ff fef7 	bl	8001618 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	// MODULE SETTINGS ----------------------------------------------
	Lora_SetDefaultConfig(&myLoRa);
 800182a:	483d      	ldr	r0, [pc, #244]	@ (8001920 <main+0x120>)
 800182c:	f7ff fecf 	bl	80015ce <Lora_SetDefaultConfig>

	myLoRa.hSPIx                 = &hspi1;
 8001830:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <main+0x120>)
 8001832:	4a3c      	ldr	r2, [pc, #240]	@ (8001924 <main+0x124>)
 8001834:	619a      	str	r2, [r3, #24]

	myLoRa.CS_port               = SPI1_NSS_GPIO_Port;
 8001836:	4b3a      	ldr	r3, [pc, #232]	@ (8001920 <main+0x120>)
 8001838:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800183c:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin                = SPI1_NSS_Pin;
 800183e:	4b38      	ldr	r3, [pc, #224]	@ (8001920 <main+0x120>)
 8001840:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001844:	809a      	strh	r2, [r3, #4]

	myLoRa.reset_port            = RFM98RESET_GPIO_Port;
 8001846:	4b36      	ldr	r3, [pc, #216]	@ (8001920 <main+0x120>)
 8001848:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800184c:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin             = RFM98RESET_Pin;
 800184e:	4b34      	ldr	r3, [pc, #208]	@ (8001920 <main+0x120>)
 8001850:	2240      	movs	r2, #64	@ 0x40
 8001852:	819a      	strh	r2, [r3, #12]

	myLoRa.DIO0_port						 = DIO0_GPIO_Port;
 8001854:	4b32      	ldr	r3, [pc, #200]	@ (8001920 <main+0x120>)
 8001856:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800185a:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin							 = DIO0_Pin;
 800185c:	4b30      	ldr	r3, [pc, #192]	@ (8001920 <main+0x120>)
 800185e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001862:	829a      	strh	r2, [r3, #20]
	
	LoRa_reset(&myLoRa);
 8001864:	482e      	ldr	r0, [pc, #184]	@ (8001920 <main+0x120>)
 8001866:	f7ff fa99 	bl	8000d9c <LoRa_reset>

	if (200 == LoRa_init(&myLoRa))
 800186a:	482d      	ldr	r0, [pc, #180]	@ (8001920 <main+0x120>)
 800186c:	f7ff fe08 	bl	8001480 <LoRa_init>
 8001870:	4603      	mov	r3, r0
 8001872:	2bc8      	cmp	r3, #200	@ 0xc8
 8001874:	d106      	bne.n	8001884 <main+0x84>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *) "LoRa_init _k", 128,500);
 8001876:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800187a:	2280      	movs	r2, #128	@ 0x80
 800187c:	492a      	ldr	r1, [pc, #168]	@ (8001928 <main+0x128>)
 800187e:	482b      	ldr	r0, [pc, #172]	@ (800192c <main+0x12c>)
 8001880:	f003 faaa 	bl	8004dd8 <HAL_UART_Transmit>
	}
	
	srand(time(NULL));
 8001884:	2000      	movs	r0, #0
 8001886:	f004 fb07 	bl	8005e98 <time>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4613      	mov	r3, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f004 f987 	bl	8005ba4 <srand>
	
	// START CONTINUOUS RECEIVING -----------------------------------
	LoRa_startReceiving(&myLoRa);
 8001896:	4822      	ldr	r0, [pc, #136]	@ (8001920 <main+0x120>)
 8001898:	f7ff fd86 	bl	80013a8 <LoRa_startReceiving>
	//---------------------------------------------------------------



	Data_packet my_data = {.c_stat = 1, .altitude = 3131.657, .pressure = 1024.567, 
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	2301      	movs	r3, #1
 80018ae:	703b      	strb	r3, [r7, #0]
 80018b0:	f640 433b 	movw	r3, #3131	@ 0xc3b
 80018b4:	807b      	strh	r3, [r7, #2]
 80018b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <main+0x130>)
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	2311      	movs	r3, #17
 80018bc:	723b      	strb	r3, [r7, #8]
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <main+0x134>)
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <main+0x138>)
 80018c4:	613b      	str	r3, [r7, #16]
	.bat_level = 17.55, .latitude = 30.865, .longtitude = 21.722};
	buffer[0] = transmit_data_packet(&my_data);
 80018c6:	463b      	mov	r3, r7
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fee7 	bl	800169c <transmit_data_packet>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <main+0x13c>)
 80018d4:	701a      	strb	r2, [r3, #0]
  {

	
	// SENDING DATA - - - - - - - - - - - - - - - - - - - - - - - - -

	write_data[0]=0x3B;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <main+0x140>)
 80018d8:	223b      	movs	r2, #59	@ 0x3b
 80018da:	701a      	strb	r2, [r3, #0]
	write_data[1] = rand() % 100 + 1;
 80018dc:	f004 f990 	bl	8005c00 <rand>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a18      	ldr	r2, [pc, #96]	@ (8001944 <main+0x144>)
 80018e4:	fb82 1203 	smull	r1, r2, r2, r3
 80018e8:	1151      	asrs	r1, r2, #5
 80018ea:	17da      	asrs	r2, r3, #31
 80018ec:	1a8a      	subs	r2, r1, r2
 80018ee:	2164      	movs	r1, #100	@ 0x64
 80018f0:	fb01 f202 	mul.w	r2, r1, r2
 80018f4:	1a9a      	subs	r2, r3, r2
 80018f6:	b2d3      	uxtb	r3, r2
 80018f8:	3301      	adds	r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <main+0x140>)
 80018fe:	705a      	strb	r2, [r3, #1]

	strcpy(write_data + 2, "Baklava");
 8001900:	4a11      	ldr	r2, [pc, #68]	@ (8001948 <main+0x148>)
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <main+0x14c>)
 8001904:	cb03      	ldmia	r3!, {r0, r1}
 8001906:	6010      	str	r0, [r2, #0]
 8001908:	6051      	str	r1, [r2, #4]

	LoRa_transmit(&myLoRa, buffer, 18, 150);
 800190a:	2396      	movs	r3, #150	@ 0x96
 800190c:	2212      	movs	r2, #18
 800190e:	490b      	ldr	r1, [pc, #44]	@ (800193c <main+0x13c>)
 8001910:	4803      	ldr	r0, [pc, #12]	@ (8001920 <main+0x120>)
 8001912:	f7ff fcf1 	bl	80012f8 <LoRa_transmit>
	HAL_Delay(150);
 8001916:	2096      	movs	r0, #150	@ 0x96
 8001918:	f000 fcb8 	bl	800228c <HAL_Delay>
	write_data[0]=0x3B;
 800191c:	bf00      	nop
 800191e:	e7da      	b.n	80018d6 <main+0xd6>
 8001920:	200000a8 	.word	0x200000a8
 8001924:	20000104 	.word	0x20000104
 8001928:	08006cb0 	.word	0x08006cb0
 800192c:	200001d0 	.word	0x200001d0
 8001930:	44801225 	.word	0x44801225
 8001934:	41f6eb85 	.word	0x41f6eb85
 8001938:	41adc6a8 	.word	0x41adc6a8
 800193c:	200000f0 	.word	0x200000f0
 8001940:	200000dc 	.word	0x200000dc
 8001944:	51eb851f 	.word	0x51eb851f
 8001948:	200000de 	.word	0x200000de
 800194c:	08006cc0 	.word	0x08006cc0

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b094      	sub	sp, #80	@ 0x50
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	2238      	movs	r2, #56	@ 0x38
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f004 fa91 	bl	8005e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001972:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001976:	f001 fa6b 	bl	8002e50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001984:	2340      	movs	r3, #64	@ 0x40
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001988:	2302      	movs	r3, #2
 800198a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800198c:	2302      	movs	r3, #2
 800198e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001990:	2301      	movs	r3, #1
 8001992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001994:	230c      	movs	r3, #12
 8001996:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001998:	2302      	movs	r3, #2
 800199a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800199c:	2304      	movs	r3, #4
 800199e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80019a0:	2306      	movs	r3, #6
 80019a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 fb05 	bl	8002fb8 <HAL_RCC_OscConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80019b4:	f000 f818 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b8:	230f      	movs	r3, #15
 80019ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019bc:	2303      	movs	r3, #3
 80019be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 fe03 	bl	80035dc <HAL_RCC_ClockConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80019dc:	f000 f804 	bl	80019e8 <Error_Handler>
  }
}
 80019e0:	bf00      	nop
 80019e2:	3750      	adds	r7, #80	@ 0x50
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <Error_Handler+0x8>

080019f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <MX_SPI1_Init+0x74>)
 80019fa:	4a1c      	ldr	r2, [pc, #112]	@ (8001a6c <MX_SPI1_Init+0x78>)
 80019fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a06:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a0c:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a0e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a42:	2207      	movs	r2, #7
 8001a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a4e:	2208      	movs	r2, #8
 8001a50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_SPI1_Init+0x74>)
 8001a54:	f002 fa2c 	bl	8003eb0 <HAL_SPI_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a5e:	f7ff ffc3 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000104 	.word	0x20000104
 8001a6c:	40013000 	.word	0x40013000

08001a70 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001a76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae8 <MX_SPI2_Init+0x78>)
 8001a78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001a7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a82:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001a8a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a8e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a96:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001a9e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001aa2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001abc:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001abe:	2207      	movs	r2, #7
 8001ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001aca:	2208      	movs	r2, #8
 8001acc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <MX_SPI2_Init+0x74>)
 8001ad0:	f002 f9ee 	bl	8003eb0 <HAL_SPI_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ada:	f7ff ff85 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000168 	.word	0x20000168
 8001ae8:	40003800 	.word	0x40003800

08001aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	@ 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2e      	ldr	r2, [pc, #184]	@ (8001bc4 <HAL_SPI_MspInit+0xd8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d128      	bne.n	8001b60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b12:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b18:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b28      	ldr	r3, [pc, #160]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a27      	ldr	r2, [pc, #156]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b3e:	2338      	movs	r3, #56	@ 0x38
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b4e:	2305      	movs	r3, #5
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	481c      	ldr	r0, [pc, #112]	@ (8001bcc <HAL_SPI_MspInit+0xe0>)
 8001b5a:	f000 fecf 	bl	80028fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b5e:	e02d      	b.n	8001bbc <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd0 <HAL_SPI_MspInit+0xe4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d128      	bne.n	8001bbc <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b6a:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6e:	4a16      	ldr	r2, [pc, #88]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_SPI_MspInit+0xdc>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b9a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bac:	2305      	movs	r3, #5
 8001bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <HAL_SPI_MspInit+0xe0>)
 8001bb8:	f000 fea0 	bl	80028fc <HAL_GPIO_Init>
}
 8001bbc:	bf00      	nop
 8001bbe:	3730      	adds	r7, #48	@ 0x30
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40013000 	.word	0x40013000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	40003800 	.word	0x40003800

08001bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <HAL_MspInit+0x44>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <HAL_MspInit+0x44>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <HAL_MspInit+0x44>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_MspInit+0x44>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	4a08      	ldr	r2, [pc, #32]	@ (8001c18 <HAL_MspInit+0x44>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_MspInit+0x44>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c0a:	f001 f9c5 	bl	8002f98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <NMI_Handler+0x4>

08001c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <MemManage_Handler+0x4>

08001c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c72:	f000 faed 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001c7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c82:	f000 ffd5 	bl	8002c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  return 1;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <_kill>:

int _kill(int pid, int sig)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ca4:	f004 f96c 	bl	8005f80 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2216      	movs	r2, #22
 8001cac:	601a      	str	r2, [r3, #0]
  return -1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_exit>:

void _exit (int status)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffe7 	bl	8001c9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <_exit+0x12>

08001cd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e00a      	b.n	8001cf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce2:	f3af 8000 	nop.w
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	60ba      	str	r2, [r7, #8]
 8001cee:	b2ca      	uxtb	r2, r1
 8001cf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbf0      	blt.n	8001ce2 <_read+0x12>
  }

  return len;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	e009      	b.n	8001d30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbf1      	blt.n	8001d1c <_write+0x12>
  }
  return len;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_close>:

int _close(int file)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_isatty>:

int _isatty(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	@ (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f004 f8d0 	bl	8005f80 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20020000 	.word	0x20020000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	200001cc 	.word	0x200001cc
 8001e14:	20000728 	.word	0x20000728

08001e18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e40:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e42:	4a23      	ldr	r2, [pc, #140]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e46:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e84:	4811      	ldr	r0, [pc, #68]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e86:	f002 ff57 	bl	8004d38 <HAL_UART_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e90:	f7ff fdaa 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e94:	2100      	movs	r1, #0
 8001e96:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e98:	f003 fd80 	bl	800599c <HAL_UARTEx_SetTxFifoThreshold>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ea2:	f7ff fda1 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4808      	ldr	r0, [pc, #32]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001eaa:	f003 fdb5 	bl	8005a18 <HAL_UARTEx_SetRxFifoThreshold>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001eb4:	f7ff fd98 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001eb8:	4804      	ldr	r0, [pc, #16]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001eba:	f003 fd36 	bl	800592a <HAL_UARTEx_DisableFifoMode>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ec4:	f7ff fd90 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200001d0 	.word	0x200001d0
 8001ed0:	40013800 	.word	0x40013800

08001ed4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed8:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001eda:	4a24      	ldr	r2, [pc, #144]	@ (8001f6c <MX_USART2_UART_Init+0x98>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ede:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001f00:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001f04:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f1e:	4812      	ldr	r0, [pc, #72]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001f20:	f002 ff0a 	bl	8004d38 <HAL_UART_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001f2a:	f7ff fd5d 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001f32:	f003 fd33 	bl	800599c <HAL_UARTEx_SetTxFifoThreshold>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001f3c:	f7ff fd54 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f40:	2100      	movs	r1, #0
 8001f42:	4809      	ldr	r0, [pc, #36]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001f44:	f003 fd68 	bl	8005a18 <HAL_UARTEx_SetRxFifoThreshold>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001f4e:	f7ff fd4b 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_USART2_UART_Init+0x94>)
 8001f54:	f003 fce9 	bl	800592a <HAL_UARTEx_DisableFifoMode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001f5e:	f7ff fd43 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000264 	.word	0x20000264
 8001f6c:	40004400 	.word	0x40004400

08001f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b0a0      	sub	sp, #128	@ 0x80
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f88:	f107 0318 	add.w	r3, r7, #24
 8001f8c:	2254      	movs	r2, #84	@ 0x54
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 ff78 	bl	8005e86 <memset>
  if(uartHandle->Instance==USART1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002090 <HAL_UART_MspInit+0x120>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d136      	bne.n	800200e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 fd31 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fb8:	f7ff fd16 	bl	80019e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fbc:	4b35      	ldr	r3, [pc, #212]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc0:	4a34      	ldr	r2, [pc, #208]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fc8:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fec:	23c0      	movs	r3, #192	@ 0xc0
 8001fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002000:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002004:	4619      	mov	r1, r3
 8002006:	4824      	ldr	r0, [pc, #144]	@ (8002098 <HAL_UART_MspInit+0x128>)
 8002008:	f000 fc78 	bl	80028fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800200c:	e03b      	b.n	8002086 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a22      	ldr	r2, [pc, #136]	@ (800209c <HAL_UART_MspInit+0x12c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d136      	bne.n	8002086 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002020:	f107 0318 	add.w	r3, r7, #24
 8002024:	4618      	mov	r0, r3
 8002026:	f001 fcf5 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002030:	f7ff fcda 	bl	80019e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	4a16      	ldr	r2, [pc, #88]	@ (8002094 <HAL_UART_MspInit+0x124>)
 800203a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_UART_MspInit+0x124>)
 800204e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002050:	4a10      	ldr	r2, [pc, #64]	@ (8002094 <HAL_UART_MspInit+0x124>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002058:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <HAL_UART_MspInit+0x124>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002064:	230f      	movs	r3, #15
 8002066:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002074:	2307      	movs	r3, #7
 8002076:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800207c:	4619      	mov	r1, r3
 800207e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002082:	f000 fc3b 	bl	80028fc <HAL_GPIO_Init>
}
 8002086:	bf00      	nop
 8002088:	3780      	adds	r7, #128	@ 0x80
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40013800 	.word	0x40013800
 8002094:	40021000 	.word	0x40021000
 8002098:	48000400 	.word	0x48000400
 800209c:	40004400 	.word	0x40004400

080020a0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <MX_USB_PCD_Init+0x48>)
 80020a6:	4a11      	ldr	r2, [pc, #68]	@ (80020ec <MX_USB_PCD_Init+0x4c>)
 80020a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80020aa:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <MX_USB_PCD_Init+0x48>)
 80020ac:	2208      	movs	r2, #8
 80020ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80020b0:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <MX_USB_PCD_Init+0x48>)
 80020b2:	2202      	movs	r2, #2
 80020b4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <MX_USB_PCD_Init+0x48>)
 80020b8:	2202      	movs	r2, #2
 80020ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <MX_USB_PCD_Init+0x48>)
 80020be:	2200      	movs	r2, #0
 80020c0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <MX_USB_PCD_Init+0x48>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80020c8:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <MX_USB_PCD_Init+0x48>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <MX_USB_PCD_Init+0x48>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80020d4:	4804      	ldr	r0, [pc, #16]	@ (80020e8 <MX_USB_PCD_Init+0x48>)
 80020d6:	f000 fdc3 	bl	8002c60 <HAL_PCD_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80020e0:	f7ff fc82 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200002f8 	.word	0x200002f8
 80020ec:	40005c00 	.word	0x40005c00

080020f0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b098      	sub	sp, #96	@ 0x60
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2254      	movs	r2, #84	@ 0x54
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fec0 	bl	8005e86 <memset>
  if(pcdHandle->Instance==USB)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <HAL_PCD_MspInit+0x60>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d11b      	bne.n	8002148 <HAL_PCD_MspInit+0x58>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002110:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002114:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002116:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800211a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	4618      	mov	r0, r3
 8002122:	f001 fc77 	bl	8003a14 <HAL_RCCEx_PeriphCLKConfig>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800212c:	f7ff fc5c 	bl	80019e8 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_PCD_MspInit+0x64>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <HAL_PCD_MspInit+0x64>)
 8002136:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800213a:	6593      	str	r3, [r2, #88]	@ 0x58
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_PCD_MspInit+0x64>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002148:	bf00      	nop
 800214a:	3760      	adds	r7, #96	@ 0x60
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40005c00 	.word	0x40005c00
 8002154:	40021000 	.word	0x40021000

08002158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002158:	480d      	ldr	r0, [pc, #52]	@ (8002190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800215a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800215c:	f7ff fe5c 	bl	8001e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002160:	480c      	ldr	r0, [pc, #48]	@ (8002194 <LoopForever+0x6>)
  ldr r1, =_edata
 8002162:	490d      	ldr	r1, [pc, #52]	@ (8002198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <LoopForever+0xe>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002168:	e002      	b.n	8002170 <LoopCopyDataInit>

0800216a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800216c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216e:	3304      	adds	r3, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002174:	d3f9      	bcc.n	800216a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002176:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002178:	4c0a      	ldr	r4, [pc, #40]	@ (80021a4 <LoopForever+0x16>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800217c:	e001      	b.n	8002182 <LoopFillZerobss>

0800217e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002180:	3204      	adds	r2, #4

08002182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002184:	d3fb      	bcc.n	800217e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002186:	f003 ff01 	bl	8005f8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800218a:	f7ff fb39 	bl	8001800 <main>

0800218e <LoopForever>:

LoopForever:
    b LoopForever
 800218e:	e7fe      	b.n	800218e <LoopForever>
  ldr   r0, =_estack
 8002190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002198:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800219c:	08006df8 	.word	0x08006df8
  ldr r2, =_sbss
 80021a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80021a4:	20000724 	.word	0x20000724

080021a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC1_2_IRQHandler>

080021aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 f95b 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ba:	200f      	movs	r0, #15
 80021bc:	f000 f80e 	bl	80021dc <HAL_InitTick>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	e001      	b.n	80021d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021cc:	f7ff fd02 	bl	8001bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d0:	79fb      	ldrb	r3, [r7, #7]

}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <HAL_InitTick+0x68>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d022      	beq.n	8002236 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <HAL_InitTick+0x6c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b13      	ldr	r3, [pc, #76]	@ (8002244 <HAL_InitTick+0x68>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f966 	bl	80024d6 <HAL_SYSTICK_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10f      	bne.n	8002230 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b0f      	cmp	r3, #15
 8002214:	d809      	bhi.n	800222a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002216:	2200      	movs	r2, #0
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	f04f 30ff 	mov.w	r0, #4294967295
 800221e:	f000 f932 	bl	8002486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002222:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <HAL_InitTick+0x70>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e007      	b.n	800223a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	e004      	b.n	800223a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e001      	b.n	800223a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000008 	.word	0x20000008
 8002248:	20000000 	.word	0x20000000
 800224c:	20000004 	.word	0x20000004

08002250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_IncTick+0x1c>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_IncTick+0x20>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4413      	add	r3, r2
 800225e:	4a03      	ldr	r2, [pc, #12]	@ (800226c <HAL_IncTick+0x1c>)
 8002260:	6013      	str	r3, [r2, #0]
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	200005d4 	.word	0x200005d4
 8002270:	20000008 	.word	0x20000008

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200005d4 	.word	0x200005d4

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff ffee 	bl	8002274 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d004      	beq.n	80022b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <HAL_Delay+0x40>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4413      	add	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b0:	bf00      	nop
 80022b2:	f7ff ffdf 	bl	8002274 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d8f7      	bhi.n	80022b2 <HAL_Delay+0x26>
  {
  }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000008 	.word	0x20000008

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	@ (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	@ (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	@ 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800243c:	d301      	bcc.n	8002442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <SysTick_Config+0x40>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244a:	210f      	movs	r1, #15
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f7ff ff8e 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <SysTick_Config+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SysTick_Config+0x40>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff29 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff40 	bl	8002318 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff90 	bl	80023c4 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5f 	bl	8002370 <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff33 	bl	8002334 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa4 	bl	800242c <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e054      	b.n	80025ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7f5b      	ldrb	r3, [r3, #29]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff f8a2 	bl	800165c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	791b      	ldrb	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a22      	ldr	r2, [pc, #136]	@ (80025b4 <HAL_CRC_Init+0xc4>)
 800252c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0218 	bic.w	r2, r2, #24
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	e00c      	b.n	800255a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	461a      	mov	r2, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f948 	bl	80027e0 <HAL_CRCEx_Polynomial_Set>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e028      	b.n	80025ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	795b      	ldrb	r3, [r3, #5]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f04f 32ff 	mov.w	r2, #4294967295
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	e004      	b.n	8002578 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6912      	ldr	r2, [r2, #16]
 8002576:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	04c11db7 	.word	0x04c11db7

080025b8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2202      	movs	r2, #2
 80025cc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d006      	beq.n	80025f4 <HAL_CRC_Calculate+0x3c>
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d829      	bhi.n	800263e <HAL_CRC_Calculate+0x86>
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d019      	beq.n	8002622 <HAL_CRC_Calculate+0x6a>
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d01e      	beq.n	8002630 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80025f2:	e024      	b.n	800263e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e00a      	b.n	8002610 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	441a      	add	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3301      	adds	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	d3f0      	bcc.n	80025fa <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	613b      	str	r3, [r7, #16]
      break;
 8002620:	e00e      	b.n	8002640 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f812 	bl	8002650 <CRC_Handle_8>
 800262c:	6138      	str	r0, [r7, #16]
      break;
 800262e:	e007      	b.n	8002640 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f899 	bl	800276c <CRC_Handle_16>
 800263a:	6138      	str	r0, [r7, #16]
      break;
 800263c:	e000      	b.n	8002640 <HAL_CRC_Calculate+0x88>
      break;
 800263e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002646:	693b      	ldr	r3, [r7, #16]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	e023      	b.n	80026aa <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	4413      	add	r3, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	3301      	adds	r3, #1
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	440b      	add	r3, r1
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800267c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	440b      	add	r3, r1
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800268c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	3303      	adds	r3, #3
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	440b      	add	r3, r1
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80026a0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80026a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3301      	adds	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3d6      	bcc.n	8002662 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04d      	beq.n	800275a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	4413      	add	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d116      	bne.n	8002710 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	3301      	adds	r3, #1
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	440b      	add	r3, r1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	4313      	orrs	r3, r2
 8002700:	b21b      	sxth	r3, r3
 8002702:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	8b7a      	ldrh	r2, [r7, #26]
 800270e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b03      	cmp	r3, #3
 8002718:	d11f      	bne.n	800275a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	4413      	add	r3, r2
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	b21a      	sxth	r2, r3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	3301      	adds	r3, #1
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	440b      	add	r3, r1
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b21b      	sxth	r3, r3
 8002736:	4313      	orrs	r3, r2
 8002738:	b21b      	sxth	r3, r3
 800273a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	8b7a      	ldrh	r2, [r7, #26]
 8002746:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	4413      	add	r3, r2
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3724      	adds	r7, #36	@ 0x24
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e013      	b.n	80027a6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	4413      	add	r3, r2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	041a      	lsls	r2, r3, #16
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	440b      	add	r3, r1
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	4619      	mov	r1, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d3e6      	bcc.n	800277e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	4413      	add	r3, r2
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80027f0:	231f      	movs	r3, #31
 80027f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
 8002802:	e063      	b.n	80028cc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002804:	bf00      	nop
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1e5a      	subs	r2, r3, #1
 800280a:	613a      	str	r2, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <HAL_CRCEx_Polynomial_Set+0x44>
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b18      	cmp	r3, #24
 8002828:	d846      	bhi.n	80028b8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800282a:	a201      	add	r2, pc, #4	@ (adr r2, 8002830 <HAL_CRCEx_Polynomial_Set+0x50>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	080028bf 	.word	0x080028bf
 8002834:	080028b9 	.word	0x080028b9
 8002838:	080028b9 	.word	0x080028b9
 800283c:	080028b9 	.word	0x080028b9
 8002840:	080028b9 	.word	0x080028b9
 8002844:	080028b9 	.word	0x080028b9
 8002848:	080028b9 	.word	0x080028b9
 800284c:	080028b9 	.word	0x080028b9
 8002850:	080028ad 	.word	0x080028ad
 8002854:	080028b9 	.word	0x080028b9
 8002858:	080028b9 	.word	0x080028b9
 800285c:	080028b9 	.word	0x080028b9
 8002860:	080028b9 	.word	0x080028b9
 8002864:	080028b9 	.word	0x080028b9
 8002868:	080028b9 	.word	0x080028b9
 800286c:	080028b9 	.word	0x080028b9
 8002870:	080028a1 	.word	0x080028a1
 8002874:	080028b9 	.word	0x080028b9
 8002878:	080028b9 	.word	0x080028b9
 800287c:	080028b9 	.word	0x080028b9
 8002880:	080028b9 	.word	0x080028b9
 8002884:	080028b9 	.word	0x080028b9
 8002888:	080028b9 	.word	0x080028b9
 800288c:	080028b9 	.word	0x080028b9
 8002890:	08002895 	.word	0x08002895
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2b06      	cmp	r3, #6
 8002898:	d913      	bls.n	80028c2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800289e:	e010      	b.n	80028c2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	d90f      	bls.n	80028c6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80028aa:	e00c      	b.n	80028c6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	d90b      	bls.n	80028ca <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80028b6:	e008      	b.n	80028ca <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	75fb      	strb	r3, [r7, #23]
        break;
 80028bc:	e006      	b.n	80028cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028be:	bf00      	nop
 80028c0:	e004      	b.n	80028cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028c2:	bf00      	nop
 80028c4:	e002      	b.n	80028cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028c6:	bf00      	nop
 80028c8:	e000      	b.n	80028cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80028ca:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10d      	bne.n	80028ee <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 0118 	bic.w	r1, r3, #24
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800290a:	e15a      	b.n	8002bc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 814c 	beq.w	8002bbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d005      	beq.n	800293c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002938:	2b02      	cmp	r3, #2
 800293a:	d130      	bne.n	800299e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002972:	2201      	movs	r2, #1
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 0201 	and.w	r2, r3, #1
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d017      	beq.n	80029da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d123      	bne.n	8002a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3208      	adds	r2, #8
 80029ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	6939      	ldr	r1, [r7, #16]
 8002a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	2203      	movs	r2, #3
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0203 	and.w	r2, r3, #3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80a6 	beq.w	8002bbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a70:	4b5b      	ldr	r3, [pc, #364]	@ (8002be0 <HAL_GPIO_Init+0x2e4>)
 8002a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a74:	4a5a      	ldr	r2, [pc, #360]	@ (8002be0 <HAL_GPIO_Init+0x2e4>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a7c:	4b58      	ldr	r3, [pc, #352]	@ (8002be0 <HAL_GPIO_Init+0x2e4>)
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a88:	4a56      	ldr	r2, [pc, #344]	@ (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ab2:	d01f      	beq.n	8002af4 <HAL_GPIO_Init+0x1f8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8002be8 <HAL_GPIO_Init+0x2ec>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d019      	beq.n	8002af0 <HAL_GPIO_Init+0x1f4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a4b      	ldr	r2, [pc, #300]	@ (8002bec <HAL_GPIO_Init+0x2f0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <HAL_GPIO_Init+0x1f0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf0 <HAL_GPIO_Init+0x2f4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00d      	beq.n	8002ae8 <HAL_GPIO_Init+0x1ec>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a49      	ldr	r2, [pc, #292]	@ (8002bf4 <HAL_GPIO_Init+0x2f8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d007      	beq.n	8002ae4 <HAL_GPIO_Init+0x1e8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a48      	ldr	r2, [pc, #288]	@ (8002bf8 <HAL_GPIO_Init+0x2fc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d101      	bne.n	8002ae0 <HAL_GPIO_Init+0x1e4>
 8002adc:	2305      	movs	r3, #5
 8002ade:	e00a      	b.n	8002af6 <HAL_GPIO_Init+0x1fa>
 8002ae0:	2306      	movs	r3, #6
 8002ae2:	e008      	b.n	8002af6 <HAL_GPIO_Init+0x1fa>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	e006      	b.n	8002af6 <HAL_GPIO_Init+0x1fa>
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e004      	b.n	8002af6 <HAL_GPIO_Init+0x1fa>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e002      	b.n	8002af6 <HAL_GPIO_Init+0x1fa>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_GPIO_Init+0x1fa>
 8002af4:	2300      	movs	r3, #0
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	f002 0203 	and.w	r2, r2, #3
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	4093      	lsls	r3, r2
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b06:	4937      	ldr	r1, [pc, #220]	@ (8002be4 <HAL_GPIO_Init+0x2e8>)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b14:	4b39      	ldr	r3, [pc, #228]	@ (8002bfc <HAL_GPIO_Init+0x300>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b38:	4a30      	ldr	r2, [pc, #192]	@ (8002bfc <HAL_GPIO_Init+0x300>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002bfc <HAL_GPIO_Init+0x300>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b62:	4a26      	ldr	r2, [pc, #152]	@ (8002bfc <HAL_GPIO_Init+0x300>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b68:	4b24      	ldr	r3, [pc, #144]	@ (8002bfc <HAL_GPIO_Init+0x300>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bfc <HAL_GPIO_Init+0x300>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b92:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <HAL_GPIO_Init+0x300>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bb6:	4a11      	ldr	r2, [pc, #68]	@ (8002bfc <HAL_GPIO_Init+0x300>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f ae9d 	bne.w	800290c <HAL_GPIO_Init+0x10>
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40010000 	.word	0x40010000
 8002be8:	48000400 	.word	0x48000400
 8002bec:	48000800 	.word	0x48000800
 8002bf0:	48000c00 	.word	0x48000c00
 8002bf4:	48001000 	.word	0x48001000
 8002bf8:	48001400 	.word	0x48001400
 8002bfc:	40010400 	.word	0x40010400

08002c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c46:	4a05      	ldr	r2, [pc, #20]	@ (8002c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fdc0 	bl	80017d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40010400 	.word	0x40010400

08002c60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0c0      	b.n	8002df4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fa32 	bl	80020f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 ff49 	bl	8005b30 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	e03e      	b.n	8002d22 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3311      	adds	r3, #17
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3310      	adds	r3, #16
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3313      	adds	r3, #19
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3320      	adds	r3, #32
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	3324      	adds	r3, #36	@ 0x24
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	791b      	ldrb	r3, [r3, #4]
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d3bb      	bcc.n	8002ca4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e044      	b.n	8002dbc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	3301      	adds	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	791b      	ldrb	r3, [r3, #4]
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3b5      	bcc.n	8002d32 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002dd2:	f002 fec8 	bl	8005b66 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7a9b      	ldrb	r3, [r3, #10]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f805 	bl	8002dfc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	f043 0302 	orr.w	r3, r3, #2
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d141      	bne.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6a:	d131      	bne.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e6c:	4b47      	ldr	r3, [pc, #284]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e72:	4a46      	ldr	r2, [pc, #280]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e7c:	4b43      	ldr	r3, [pc, #268]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e84:	4a41      	ldr	r2, [pc, #260]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e8c:	4b40      	ldr	r3, [pc, #256]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2232      	movs	r2, #50	@ 0x32
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	4a3f      	ldr	r2, [pc, #252]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	0c9b      	lsrs	r3, r3, #18
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea2:	e002      	b.n	8002eaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eaa:	4b38      	ldr	r3, [pc, #224]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb6:	d102      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f2      	bne.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ebe:	4b33      	ldr	r3, [pc, #204]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eca:	d158      	bne.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e057      	b.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ee0:	e04d      	b.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee8:	d141      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eea:	4b28      	ldr	r3, [pc, #160]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef6:	d131      	bne.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ef8:	4b24      	ldr	r3, [pc, #144]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002efe:	4a23      	ldr	r2, [pc, #140]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f08:	4b20      	ldr	r3, [pc, #128]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f10:	4a1e      	ldr	r2, [pc, #120]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f18:	4b1d      	ldr	r3, [pc, #116]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2232      	movs	r2, #50	@ 0x32
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	4a1c      	ldr	r2, [pc, #112]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2e:	e002      	b.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f42:	d102      	bne.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f2      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f56:	d112      	bne.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e011      	b.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f62:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f6c:	e007      	b.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f6e:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f76:	4a05      	ldr	r2, [pc, #20]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	20000000 	.word	0x20000000
 8002f94:	431bde83 	.word	0x431bde83

08002f98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa6:	6093      	str	r3, [r2, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40007000 	.word	0x40007000

08002fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e2fe      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d075      	beq.n	80030c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd6:	4b97      	ldr	r3, [pc, #604]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe0:	4b94      	ldr	r3, [pc, #592]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d102      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3e>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d002      	beq.n	8002ffc <HAL_RCC_OscConfig+0x44>
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d10b      	bne.n	8003014 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	4b8d      	ldr	r3, [pc, #564]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d05b      	beq.n	80030c0 <HAL_RCC_OscConfig+0x108>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d157      	bne.n	80030c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e2d9      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800301c:	d106      	bne.n	800302c <HAL_RCC_OscConfig+0x74>
 800301e:	4b85      	ldr	r3, [pc, #532]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a84      	ldr	r2, [pc, #528]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e01d      	b.n	8003068 <HAL_RCC_OscConfig+0xb0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x98>
 8003036:	4b7f      	ldr	r3, [pc, #508]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7e      	ldr	r2, [pc, #504]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800303c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b7c      	ldr	r3, [pc, #496]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7b      	ldr	r2, [pc, #492]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0xb0>
 8003050:	4b78      	ldr	r3, [pc, #480]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a77      	ldr	r2, [pc, #476]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b75      	ldr	r3, [pc, #468]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a74      	ldr	r2, [pc, #464]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7ff f900 	bl	8002274 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7ff f8fc 	bl	8002274 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	@ 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e29e      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800308a:	4b6a      	ldr	r3, [pc, #424]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0xc0>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7ff f8ec 	bl	8002274 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7ff f8e8 	bl	8002274 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	@ 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e28a      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030b2:	4b60      	ldr	r3, [pc, #384]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0xe8>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d075      	beq.n	80031ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ce:	4b59      	ldr	r3, [pc, #356]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d8:	4b56      	ldr	r3, [pc, #344]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d102      	bne.n	80030ee <HAL_RCC_OscConfig+0x136>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d002      	beq.n	80030f4 <HAL_RCC_OscConfig+0x13c>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d11f      	bne.n	8003134 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_OscConfig+0x154>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e25d      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b49      	ldr	r3, [pc, #292]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	4946      	ldr	r1, [pc, #280]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003120:	4b45      	ldr	r3, [pc, #276]	@ (8003238 <HAL_RCC_OscConfig+0x280>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff f859 	bl	80021dc <HAL_InitTick>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d043      	beq.n	80031b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e249      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d023      	beq.n	8003184 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800313c:	4b3d      	ldr	r3, [pc, #244]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a3c      	ldr	r2, [pc, #240]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7ff f894 	bl	8002274 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003150:	f7ff f890 	bl	8002274 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e232      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003162:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316e:	4b31      	ldr	r3, [pc, #196]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	492d      	ldr	r1, [pc, #180]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
 8003182:	e01a      	b.n	80031ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003184:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2a      	ldr	r2, [pc, #168]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800318a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800318e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7ff f870 	bl	8002274 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003198:	f7ff f86c 	bl	8002274 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e20e      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031aa:	4b22      	ldr	r3, [pc, #136]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x1e0>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d041      	beq.n	800324a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01c      	beq.n	8003208 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ce:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d4:	4a17      	ldr	r2, [pc, #92]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7ff f849 	bl	8002274 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e6:	f7ff f845 	bl	8002274 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1e7      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0ef      	beq.n	80031e6 <HAL_RCC_OscConfig+0x22e>
 8003206:	e020      	b.n	800324a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003208:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 800320a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800320e:	4a09      	ldr	r2, [pc, #36]	@ (8003234 <HAL_RCC_OscConfig+0x27c>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7ff f82c 	bl	8002274 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800321e:	e00d      	b.n	800323c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7ff f828 	bl	8002274 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d906      	bls.n	800323c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1ca      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323c:	4b8c      	ldr	r3, [pc, #560]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ea      	bne.n	8003220 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a6 	beq.w	80033a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800325c:	4b84      	ldr	r3, [pc, #528]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_OscConfig+0x2b4>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x2b6>
 800326c:	2300      	movs	r3, #0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b7f      	ldr	r3, [pc, #508]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003276:	4a7e      	ldr	r2, [pc, #504]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327c:	6593      	str	r3, [r2, #88]	@ 0x58
 800327e:	4b7c      	ldr	r3, [pc, #496]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800328a:	2301      	movs	r3, #1
 800328c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328e:	4b79      	ldr	r3, [pc, #484]	@ (8003474 <HAL_RCC_OscConfig+0x4bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800329a:	4b76      	ldr	r3, [pc, #472]	@ (8003474 <HAL_RCC_OscConfig+0x4bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a75      	ldr	r2, [pc, #468]	@ (8003474 <HAL_RCC_OscConfig+0x4bc>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a6:	f7fe ffe5 	bl	8002274 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7fe ffe1 	bl	8002274 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e183      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003474 <HAL_RCC_OscConfig+0x4bc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_RCC_OscConfig+0x32e>
 80032d4:	4b66      	ldr	r3, [pc, #408]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032da:	4a65      	ldr	r2, [pc, #404]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032e4:	e024      	b.n	8003330 <HAL_RCC_OscConfig+0x378>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d110      	bne.n	8003310 <HAL_RCC_OscConfig+0x358>
 80032ee:	4b60      	ldr	r3, [pc, #384]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f4:	4a5e      	ldr	r2, [pc, #376]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003304:	4a5a      	ldr	r2, [pc, #360]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800330e:	e00f      	b.n	8003330 <HAL_RCC_OscConfig+0x378>
 8003310:	4b57      	ldr	r3, [pc, #348]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a56      	ldr	r2, [pc, #344]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003326:	4a52      	ldr	r2, [pc, #328]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe ff9c 	bl	8002274 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe ff98 	bl	8002274 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e138      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003356:	4b46      	ldr	r3, [pc, #280]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ed      	beq.n	8003340 <HAL_RCC_OscConfig+0x388>
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe ff85 	bl	8002274 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe ff81 	bl	8002274 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e121      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003384:	4b3a      	ldr	r3, [pc, #232]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ed      	bne.n	800336e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003392:	7ffb      	ldrb	r3, [r7, #31]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4b35      	ldr	r3, [pc, #212]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	4a34      	ldr	r2, [pc, #208]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d03c      	beq.n	800342a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 80033ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033be:	4a2c      	ldr	r2, [pc, #176]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe ff54 	bl	8002274 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d0:	f7fe ff50 	bl	8002274 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0f2      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e2:	4b23      	ldr	r3, [pc, #140]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 80033e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <HAL_RCC_OscConfig+0x418>
 80033f0:	e01b      	b.n	800342a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 80033f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fe ff37 	bl	8002274 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340a:	f7fe ff33 	bl	8002274 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0d5      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 800341e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ef      	bne.n	800340a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80c9 	beq.w	80035c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003434:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b0c      	cmp	r3, #12
 800343e:	f000 8083 	beq.w	8003548 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d15e      	bne.n	8003508 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b09      	ldr	r3, [pc, #36]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a08      	ldr	r2, [pc, #32]	@ (8003470 <HAL_RCC_OscConfig+0x4b8>)
 8003450:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fe ff0d 	bl	8002274 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345c:	e00c      	b.n	8003478 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7fe ff09 	bl	8002274 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d905      	bls.n	8003478 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0ab      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
 8003470:	40021000 	.word	0x40021000
 8003474:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003478:	4b55      	ldr	r3, [pc, #340]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ec      	bne.n	800345e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003484:	4b52      	ldr	r3, [pc, #328]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	4b52      	ldr	r3, [pc, #328]	@ (80035d4 <HAL_RCC_OscConfig+0x61c>)
 800348a:	4013      	ands	r3, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6a11      	ldr	r1, [r2, #32]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003494:	3a01      	subs	r2, #1
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	4311      	orrs	r1, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800349e:	0212      	lsls	r2, r2, #8
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034a6:	0852      	lsrs	r2, r2, #1
 80034a8:	3a01      	subs	r2, #1
 80034aa:	0552      	lsls	r2, r2, #21
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034b2:	0852      	lsrs	r2, r2, #1
 80034b4:	3a01      	subs	r2, #1
 80034b6:	0652      	lsls	r2, r2, #25
 80034b8:	4311      	orrs	r1, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034be:	06d2      	lsls	r2, r2, #27
 80034c0:	430a      	orrs	r2, r1
 80034c2:	4943      	ldr	r1, [pc, #268]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c8:	4b41      	ldr	r3, [pc, #260]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a40      	ldr	r2, [pc, #256]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d4:	4b3e      	ldr	r3, [pc, #248]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a3d      	ldr	r2, [pc, #244]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fec8 	bl	8002274 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fec4 	bl	8002274 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e066      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	4b35      	ldr	r3, [pc, #212]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x530>
 8003506:	e05e      	b.n	80035c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a30      	ldr	r2, [pc, #192]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe feae 	bl	8002274 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe feaa 	bl	8002274 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e04c      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352e:	4b28      	ldr	r3, [pc, #160]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800353a:	4b25      	ldr	r3, [pc, #148]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	4924      	ldr	r1, [pc, #144]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 8003540:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <HAL_RCC_OscConfig+0x620>)
 8003542:	4013      	ands	r3, r2
 8003544:	60cb      	str	r3, [r1, #12]
 8003546:	e03e      	b.n	80035c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e039      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003554:	4b1e      	ldr	r3, [pc, #120]	@ (80035d0 <HAL_RCC_OscConfig+0x618>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0203 	and.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	429a      	cmp	r2, r3
 8003566:	d12c      	bne.n	80035c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	3b01      	subs	r3, #1
 8003574:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d123      	bne.n	80035c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003584:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d11b      	bne.n	80035c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d113      	bne.n	80035c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	3b01      	subs	r3, #1
 80035a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	3b01      	subs	r3, #1
 80035bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	019f800c 	.word	0x019f800c
 80035d8:	feeefffc 	.word	0xfeeefffc

080035dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e11e      	b.n	8003832 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b91      	ldr	r3, [pc, #580]	@ (800383c <HAL_RCC_ClockConfig+0x260>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d910      	bls.n	8003624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b8e      	ldr	r3, [pc, #568]	@ (800383c <HAL_RCC_ClockConfig+0x260>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 020f 	bic.w	r2, r3, #15
 800360a:	498c      	ldr	r1, [pc, #560]	@ (800383c <HAL_RCC_ClockConfig+0x260>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b8a      	ldr	r3, [pc, #552]	@ (800383c <HAL_RCC_ClockConfig+0x260>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e106      	b.n	8003832 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d073      	beq.n	8003718 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d129      	bne.n	800368c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003638:	4b81      	ldr	r3, [pc, #516]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0f4      	b.n	8003832 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003648:	f000 f99e 	bl	8003988 <RCC_GetSysClockFreqFromPLLSource>
 800364c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4a7c      	ldr	r2, [pc, #496]	@ (8003844 <HAL_RCC_ClockConfig+0x268>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d93f      	bls.n	80036d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003656:	4b7a      	ldr	r3, [pc, #488]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800366a:	2b00      	cmp	r3, #0
 800366c:	d033      	beq.n	80036d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003672:	2b00      	cmp	r3, #0
 8003674:	d12f      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003676:	4b72      	ldr	r3, [pc, #456]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800367e:	4a70      	ldr	r2, [pc, #448]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003684:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003686:	2380      	movs	r3, #128	@ 0x80
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e024      	b.n	80036d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003694:	4b6a      	ldr	r3, [pc, #424]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0c6      	b.n	8003832 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a4:	4b66      	ldr	r3, [pc, #408]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0be      	b.n	8003832 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036b4:	f000 f8ce 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4a61      	ldr	r2, [pc, #388]	@ (8003844 <HAL_RCC_ClockConfig+0x268>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d909      	bls.n	80036d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 80036cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036d2:	2380      	movs	r3, #128	@ 0x80
 80036d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 0203 	bic.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4957      	ldr	r1, [pc, #348]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e8:	f7fe fdc4 	bl	8002274 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f0:	f7fe fdc0 	bl	8002274 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e095      	b.n	8003832 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	4b4e      	ldr	r3, [pc, #312]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 020c 	and.w	r2, r3, #12
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	429a      	cmp	r2, r3
 8003716:	d1eb      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d023      	beq.n	800376c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003730:	4b43      	ldr	r3, [pc, #268]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4a42      	ldr	r2, [pc, #264]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003736:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800373a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003748:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003750:	4a3b      	ldr	r2, [pc, #236]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003752:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003758:	4b39      	ldr	r3, [pc, #228]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4936      	ldr	r1, [pc, #216]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
 800376a:	e008      	b.n	800377e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b80      	cmp	r3, #128	@ 0x80
 8003770:	d105      	bne.n	800377e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003772:	4b33      	ldr	r3, [pc, #204]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4a32      	ldr	r2, [pc, #200]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003778:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800377c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800377e:	4b2f      	ldr	r3, [pc, #188]	@ (800383c <HAL_RCC_ClockConfig+0x260>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d21d      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378c:	4b2b      	ldr	r3, [pc, #172]	@ (800383c <HAL_RCC_ClockConfig+0x260>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 020f 	bic.w	r2, r3, #15
 8003794:	4929      	ldr	r1, [pc, #164]	@ (800383c <HAL_RCC_ClockConfig+0x260>)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	4313      	orrs	r3, r2
 800379a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800379c:	f7fe fd6a 	bl	8002274 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fe fd66 	bl	8002274 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e03b      	b.n	8003832 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	@ (800383c <HAL_RCC_ClockConfig+0x260>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1ed      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4917      	ldr	r1, [pc, #92]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f2:	4b13      	ldr	r3, [pc, #76]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	490f      	ldr	r1, [pc, #60]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003806:	f000 f825 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 800380a:	4602      	mov	r2, r0
 800380c:	4b0c      	ldr	r3, [pc, #48]	@ (8003840 <HAL_RCC_ClockConfig+0x264>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	490c      	ldr	r1, [pc, #48]	@ (8003848 <HAL_RCC_ClockConfig+0x26c>)
 8003818:	5ccb      	ldrb	r3, [r1, r3]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <HAL_RCC_ClockConfig+0x270>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003826:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <HAL_RCC_ClockConfig+0x274>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fcd6 	bl	80021dc <HAL_InitTick>
 8003830:	4603      	mov	r3, r0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40022000 	.word	0x40022000
 8003840:	40021000 	.word	0x40021000
 8003844:	04c4b400 	.word	0x04c4b400
 8003848:	08006cc8 	.word	0x08006cc8
 800384c:	20000000 	.word	0x20000000
 8003850:	20000004 	.word	0x20000004

08003854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800385a:	4b2c      	ldr	r3, [pc, #176]	@ (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b04      	cmp	r3, #4
 8003864:	d102      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003866:	4b2a      	ldr	r3, [pc, #168]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	e047      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800386c:	4b27      	ldr	r3, [pc, #156]	@ (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d102      	bne.n	800387e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003878:	4b26      	ldr	r3, [pc, #152]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xc0>)
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	e03e      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800387e:	4b23      	ldr	r3, [pc, #140]	@ (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b0c      	cmp	r3, #12
 8003888:	d136      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800388a:	4b20      	ldr	r3, [pc, #128]	@ (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003894:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	3301      	adds	r3, #1
 80038a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d10c      	bne.n	80038c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	4a16      	ldr	r2, [pc, #88]	@ (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b2:	68d2      	ldr	r2, [r2, #12]
 80038b4:	0a12      	lsrs	r2, r2, #8
 80038b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	617b      	str	r3, [r7, #20]
      break;
 80038c0:	e00c      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038c2:	4a13      	ldr	r2, [pc, #76]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	4a10      	ldr	r2, [pc, #64]	@ (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	0a12      	lsrs	r2, r2, #8
 80038d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038d4:	fb02 f303 	mul.w	r3, r2, r3
 80038d8:	617b      	str	r3, [r7, #20]
      break;
 80038da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	0e5b      	lsrs	r3, r3, #25
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	3301      	adds	r3, #1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	e001      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038fc:	693b      	ldr	r3, [r7, #16]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	00f42400 	.word	0x00f42400
 8003914:	007a1200 	.word	0x007a1200

08003918 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b03      	ldr	r3, [pc, #12]	@ (800392c <HAL_RCC_GetHCLKFreq+0x14>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000000 	.word	0x20000000

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003934:	f7ff fff0 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4904      	ldr	r1, [pc, #16]	@ (8003958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	08006cd8 	.word	0x08006cd8

0800395c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003960:	f7ff ffda 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0adb      	lsrs	r3, r3, #11
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4904      	ldr	r1, [pc, #16]	@ (8003984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	08006cd8 	.word	0x08006cd8

08003988 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800398e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003998:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3301      	adds	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d10c      	bne.n	80039c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ac:	4a17      	ldr	r2, [pc, #92]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b6:	68d2      	ldr	r2, [r2, #12]
 80039b8:	0a12      	lsrs	r2, r2, #8
 80039ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	617b      	str	r3, [r7, #20]
    break;
 80039c4:	e00c      	b.n	80039e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039c6:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	0a12      	lsrs	r2, r2, #8
 80039d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
    break;
 80039de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e0:	4b09      	ldr	r3, [pc, #36]	@ (8003a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0e5b      	lsrs	r3, r3, #25
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	3301      	adds	r3, #1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039fa:	687b      	ldr	r3, [r7, #4]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	007a1200 	.word	0x007a1200
 8003a10:	00f42400 	.word	0x00f42400

08003a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a20:	2300      	movs	r3, #0
 8003a22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8098 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a36:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10d      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	4b40      	ldr	r3, [pc, #256]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a46:	4a3f      	ldr	r2, [pc, #252]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a39      	ldr	r2, [pc, #228]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a6a:	f7fe fc03 	bl	8002274 <HAL_GetTick>
 8003a6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a70:	e009      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a72:	f7fe fbff 	bl	8002274 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d902      	bls.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	74fb      	strb	r3, [r7, #19]
        break;
 8003a84:	e005      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a86:	4b30      	ldr	r3, [pc, #192]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ef      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d159      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a98:	4b2a      	ldr	r3, [pc, #168]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01e      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d019      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ab4:	4b23      	ldr	r3, [pc, #140]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ac0:	4b20      	ldr	r3, [pc, #128]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ae0:	4a18      	ldr	r2, [pc, #96]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fe fbbf 	bl	8002274 <HAL_GetTick>
 8003af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af8:	e00b      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe fbbb 	bl	8002274 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d902      	bls.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b10:	e006      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ec      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b26:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b34:	4903      	ldr	r1, [pc, #12]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b3c:	e008      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	74bb      	strb	r3, [r7, #18]
 8003b42:	e005      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b50:	7c7b      	ldrb	r3, [r7, #17]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4ba7      	ldr	r3, [pc, #668]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	4aa6      	ldr	r2, [pc, #664]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b6e:	4ba1      	ldr	r3, [pc, #644]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	f023 0203 	bic.w	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	499d      	ldr	r1, [pc, #628]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b90:	4b98      	ldr	r3, [pc, #608]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 020c 	bic.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	4995      	ldr	r1, [pc, #596]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb2:	4b90      	ldr	r3, [pc, #576]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	498c      	ldr	r1, [pc, #560]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd4:	4b87      	ldr	r3, [pc, #540]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	4984      	ldr	r1, [pc, #528]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	497b      	ldr	r1, [pc, #492]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c18:	4b76      	ldr	r3, [pc, #472]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	4973      	ldr	r1, [pc, #460]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	496a      	ldr	r1, [pc, #424]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c5c:	4b65      	ldr	r3, [pc, #404]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4962      	ldr	r1, [pc, #392]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	4959      	ldr	r1, [pc, #356]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ca0:	4b54      	ldr	r3, [pc, #336]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	4951      	ldr	r1, [pc, #324]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	4948      	ldr	r1, [pc, #288]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d015      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ce4:	4b43      	ldr	r3, [pc, #268]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	4940      	ldr	r1, [pc, #256]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d02:	d105      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d04:	4b3b      	ldr	r3, [pc, #236]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4a3a      	ldr	r2, [pc, #232]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d015      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d1c:	4b35      	ldr	r3, [pc, #212]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2a:	4932      	ldr	r1, [pc, #200]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d46:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d54:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d62:	4924      	ldr	r1, [pc, #144]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d72:	d105      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d74:	4b1f      	ldr	r3, [pc, #124]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a1e      	ldr	r2, [pc, #120]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d015      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8c:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	4916      	ldr	r1, [pc, #88]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003daa:	d105      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a10      	ldr	r2, [pc, #64]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d019      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4908      	ldr	r1, [pc, #32]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de2:	d109      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de4:	4b03      	ldr	r3, [pc, #12]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a02      	ldr	r2, [pc, #8]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dee:	60d3      	str	r3, [r2, #12]
 8003df0:	e002      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e04:	4b29      	ldr	r3, [pc, #164]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	4926      	ldr	r1, [pc, #152]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e24:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e2e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4a:	4918      	ldr	r1, [pc, #96]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e5c:	4b13      	ldr	r3, [pc, #76]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a12      	ldr	r2, [pc, #72]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e66:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e74:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e82:	490a      	ldr	r1, [pc, #40]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e94:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a04      	ldr	r2, [pc, #16]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ea0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000

08003eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e09d      	b.n	8003ffe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d108      	bne.n	8003edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ed2:	d009      	beq.n	8003ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	61da      	str	r2, [r3, #28]
 8003eda:	e005      	b.n	8003ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fdf2 	bl	8001aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f28:	d902      	bls.n	8003f30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e002      	b.n	8003f36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f3e:	d007      	beq.n	8003f50 <HAL_SPI_Init+0xa0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f48:	d002      	beq.n	8003f50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f92:	ea42 0103 	orr.w	r1, r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	0c1b      	lsrs	r3, r3, #16
 8003fac:	f003 0204 	and.w	r2, r3, #4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003fcc:	ea42 0103 	orr.w	r1, r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b088      	sub	sp, #32
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_SPI_Transmit+0x22>
 8004024:	2302      	movs	r3, #2
 8004026:	e15f      	b.n	80042e8 <HAL_SPI_Transmit+0x2e2>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004030:	f7fe f920 	bl	8002274 <HAL_GetTick>
 8004034:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b01      	cmp	r3, #1
 8004044:	d002      	beq.n	800404c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004046:	2302      	movs	r3, #2
 8004048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800404a:	e148      	b.n	80042de <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_SPI_Transmit+0x52>
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800405c:	e13f      	b.n	80042de <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2203      	movs	r2, #3
 8004062:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a8:	d10f      	bne.n	80040ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d4:	2b40      	cmp	r3, #64	@ 0x40
 80040d6:	d007      	beq.n	80040e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040f0:	d94f      	bls.n	8004192 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_SPI_Transmit+0xfa>
 80040fa:	8afb      	ldrh	r3, [r7, #22]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d142      	bne.n	8004186 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004104:	881a      	ldrh	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004110:	1c9a      	adds	r2, r3, #2
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004124:	e02f      	b.n	8004186 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d112      	bne.n	800415a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	881a      	ldrh	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004144:	1c9a      	adds	r2, r3, #2
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004158:	e015      	b.n	8004186 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800415a:	f7fe f88b 	bl	8002274 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d803      	bhi.n	8004172 <HAL_SPI_Transmit+0x16c>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004170:	d102      	bne.n	8004178 <HAL_SPI_Transmit+0x172>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004184:	e0ab      	b.n	80042de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1ca      	bne.n	8004126 <HAL_SPI_Transmit+0x120>
 8004190:	e080      	b.n	8004294 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_SPI_Transmit+0x19a>
 800419a:	8afb      	ldrh	r3, [r7, #22]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d174      	bne.n	800428a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d912      	bls.n	80041d0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ba:	1c9a      	adds	r2, r3, #2
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b02      	subs	r3, #2
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041ce:	e05c      	b.n	800428a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80041f6:	e048      	b.n	800428a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d12b      	bne.n	800425e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d912      	bls.n	8004236 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004214:	881a      	ldrh	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004220:	1c9a      	adds	r2, r3, #2
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b02      	subs	r3, #2
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004234:	e029      	b.n	800428a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	7812      	ldrb	r2, [r2, #0]
 8004242:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800425c:	e015      	b.n	800428a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800425e:	f7fe f809 	bl	8002274 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d803      	bhi.n	8004276 <HAL_SPI_Transmit+0x270>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d102      	bne.n	800427c <HAL_SPI_Transmit+0x276>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004288:	e029      	b.n	80042de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1b1      	bne.n	80041f8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	6839      	ldr	r1, [r7, #0]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fd07 	bl	8004cac <SPI_EndRxTxTransaction>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e003      	b.n	80042de <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d002      	beq.n	8004316 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004310:	2302      	movs	r3, #2
 8004312:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004314:	e11a      	b.n	800454c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800431e:	d112      	bne.n	8004346 <HAL_SPI_Receive+0x56>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10e      	bne.n	8004346 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2204      	movs	r2, #4
 800432c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004330:	88fa      	ldrh	r2, [r7, #6]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f90e 	bl	800455e <HAL_SPI_TransmitReceive>
 8004342:	4603      	mov	r3, r0
 8004344:	e107      	b.n	8004556 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_SPI_Receive+0x64>
 8004350:	2302      	movs	r3, #2
 8004352:	e100      	b.n	8004556 <HAL_SPI_Receive+0x266>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800435c:	f7fd ff8a 	bl	8002274 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_SPI_Receive+0x7e>
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004372:	e0eb      	b.n	800454c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2204      	movs	r2, #4
 8004378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043be:	d908      	bls.n	80043d2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	e007      	b.n	80043e2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043e0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ea:	d10f      	bne.n	800440c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800440a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004416:	2b40      	cmp	r3, #64	@ 0x40
 8004418:	d007      	beq.n	800442a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004428:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004432:	d86f      	bhi.n	8004514 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004434:	e034      	b.n	80044a0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d117      	bne.n	8004474 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f103 020c 	add.w	r2, r3, #12
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004472:	e015      	b.n	80044a0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004474:	f7fd fefe 	bl	8002274 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d803      	bhi.n	800448c <HAL_SPI_Receive+0x19c>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d102      	bne.n	8004492 <HAL_SPI_Receive+0x1a2>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800449e:	e055      	b.n	800454c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1c4      	bne.n	8004436 <HAL_SPI_Receive+0x146>
 80044ac:	e038      	b.n	8004520 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d115      	bne.n	80044e8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	b292      	uxth	r2, r2
 80044c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	1c9a      	adds	r2, r3, #2
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80044e6:	e015      	b.n	8004514 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e8:	f7fd fec4 	bl	8002274 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d803      	bhi.n	8004500 <HAL_SPI_Receive+0x210>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d102      	bne.n	8004506 <HAL_SPI_Receive+0x216>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004512:	e01b      	b.n	800454c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1c6      	bne.n	80044ae <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	6839      	ldr	r1, [r7, #0]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fb69 	bl	8004bfc <SPI_EndRxTransaction>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
 8004542:	e003      	b.n	800454c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b08a      	sub	sp, #40	@ 0x28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800456c:	2301      	movs	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x26>
 8004580:	2302      	movs	r3, #2
 8004582:	e20a      	b.n	800499a <HAL_SPI_TransmitReceive+0x43c>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458c:	f7fd fe72 	bl	8002274 <HAL_GetTick>
 8004590:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004598:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045a0:	887b      	ldrh	r3, [r7, #2]
 80045a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045a4:	887b      	ldrh	r3, [r7, #2]
 80045a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045a8:	7efb      	ldrb	r3, [r7, #27]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d00e      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x6e>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045b4:	d106      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x66>
 80045be:	7efb      	ldrb	r3, [r7, #27]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d003      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80045ca:	e1e0      	b.n	800498e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_SPI_TransmitReceive+0x80>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_SPI_TransmitReceive+0x80>
 80045d8:	887b      	ldrh	r3, [r7, #2]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d103      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80045e4:	e1d3      	b.n	800498e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d003      	beq.n	80045fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2205      	movs	r2, #5
 80045f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	887a      	ldrh	r2, [r7, #2]
 800460a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	887a      	ldrh	r2, [r7, #2]
 8004612:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	887a      	ldrh	r2, [r7, #2]
 8004620:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	887a      	ldrh	r2, [r7, #2]
 8004626:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800463c:	d802      	bhi.n	8004644 <HAL_SPI_TransmitReceive+0xe6>
 800463e:	8a3b      	ldrh	r3, [r7, #16]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d908      	bls.n	8004656 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	e007      	b.n	8004666 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004664:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d007      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800468c:	f240 8081 	bls.w	8004792 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_SPI_TransmitReceive+0x140>
 8004698:	8a7b      	ldrh	r3, [r7, #18]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d16d      	bne.n	800477a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a2:	881a      	ldrh	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	1c9a      	adds	r2, r3, #2
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c2:	e05a      	b.n	800477a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d11b      	bne.n	800470a <HAL_SPI_TransmitReceive+0x1ac>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d016      	beq.n	800470a <HAL_SPI_TransmitReceive+0x1ac>
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d113      	bne.n	800470a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e6:	881a      	ldrh	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	1c9a      	adds	r2, r3, #2
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	d11c      	bne.n	8004752 <HAL_SPI_TransmitReceive+0x1f4>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d016      	beq.n	8004752 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	b292      	uxth	r2, r2
 8004730:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	1c9a      	adds	r2, r3, #2
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800474e:	2301      	movs	r3, #1
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004752:	f7fd fd8f 	bl	8002274 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475e:	429a      	cmp	r2, r3
 8004760:	d80b      	bhi.n	800477a <HAL_SPI_TransmitReceive+0x21c>
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d007      	beq.n	800477a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004778:	e109      	b.n	800498e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d19f      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x166>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d199      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x166>
 8004790:	e0e3      	b.n	800495a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_SPI_TransmitReceive+0x244>
 800479a:	8a7b      	ldrh	r3, [r7, #18]
 800479c:	2b01      	cmp	r3, #1
 800479e:	f040 80cf 	bne.w	8004940 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d912      	bls.n	80047d2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	881a      	ldrh	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047bc:	1c9a      	adds	r2, r3, #2
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b02      	subs	r3, #2
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047d0:	e0b6      	b.n	8004940 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f8:	e0a2      	b.n	8004940 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d134      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x314>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d02f      	beq.n	8004872 <HAL_SPI_TransmitReceive+0x314>
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	2b01      	cmp	r3, #1
 8004816:	d12c      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d912      	bls.n	8004848 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004832:	1c9a      	adds	r2, r3, #2
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b02      	subs	r3, #2
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004846:	e012      	b.n	800486e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	7812      	ldrb	r2, [r2, #0]
 8004854:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d148      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x3b4>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d042      	beq.n	8004912 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d923      	bls.n	80048e0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	b292      	uxth	r2, r2
 80048a4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	1c9a      	adds	r2, r3, #2
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b02      	subs	r3, #2
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d81f      	bhi.n	800490e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	e016      	b.n	800490e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f103 020c 	add.w	r2, r3, #12
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800490e:	2301      	movs	r3, #1
 8004910:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004912:	f7fd fcaf 	bl	8002274 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800491e:	429a      	cmp	r2, r3
 8004920:	d803      	bhi.n	800492a <HAL_SPI_TransmitReceive+0x3cc>
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d102      	bne.n	8004930 <HAL_SPI_TransmitReceive+0x3d2>
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800493e:	e026      	b.n	800498e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	f47f af57 	bne.w	80047fa <HAL_SPI_TransmitReceive+0x29c>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	f47f af50 	bne.w	80047fa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f9a4 	bl	8004cac <SPI_EndRxTxTransaction>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004984:	e003      	b.n	800498e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004996:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800499a:	4618      	mov	r0, r3
 800499c:	3728      	adds	r7, #40	@ 0x28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049b0:	b2db      	uxtb	r3, r3
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049d0:	f7fd fc50 	bl	8002274 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	4413      	add	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049e0:	f7fd fc48 	bl	8002274 <HAL_GetTick>
 80049e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049e6:	4b39      	ldr	r3, [pc, #228]	@ (8004acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	015b      	lsls	r3, r3, #5
 80049ec:	0d1b      	lsrs	r3, r3, #20
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049f6:	e054      	b.n	8004aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d050      	beq.n	8004aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a00:	f7fd fc38 	bl	8002274 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d902      	bls.n	8004a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d13d      	bne.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a2e:	d111      	bne.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a38:	d004      	beq.n	8004a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a42:	d107      	bne.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a5c:	d10f      	bne.n	8004a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e017      	b.n	8004ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d19b      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000000 	.word	0x20000000

08004ad0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	@ 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ae2:	f7fd fbc7 	bl	8002274 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	4413      	add	r3, r2
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004af2:	f7fd fbbf 	bl	8002274 <HAL_GetTick>
 8004af6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b00:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	00da      	lsls	r2, r3, #3
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	0d1b      	lsrs	r3, r3, #20
 8004b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b18:	e060      	b.n	8004bdc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b20:	d107      	bne.n	8004b32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d050      	beq.n	8004bdc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b3a:	f7fd fb9b 	bl	8002274 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d902      	bls.n	8004b50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d13d      	bne.n	8004bcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b68:	d111      	bne.n	8004b8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b72:	d004      	beq.n	8004b7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7c:	d107      	bne.n	8004b8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b96:	d10f      	bne.n	8004bb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e010      	b.n	8004bee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d196      	bne.n	8004b1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3728      	adds	r7, #40	@ 0x28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000000 	.word	0x20000000

08004bfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c10:	d111      	bne.n	8004c36 <SPI_EndRxTransaction+0x3a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1a:	d004      	beq.n	8004c26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c24:	d107      	bne.n	8004c36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c34:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2180      	movs	r1, #128	@ 0x80
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff febd 	bl	80049c0 <SPI_WaitFlagStateUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c50:	f043 0220 	orr.w	r2, r3, #32
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e023      	b.n	8004ca4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c64:	d11d      	bne.n	8004ca2 <SPI_EndRxTransaction+0xa6>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c6e:	d004      	beq.n	8004c7a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c78:	d113      	bne.n	8004ca2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7ff ff22 	bl	8004ad0 <SPI_WaitFifoStateUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e000      	b.n	8004ca4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff ff03 	bl	8004ad0 <SPI_WaitFifoStateUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e027      	b.n	8004d30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2180      	movs	r1, #128	@ 0x80
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff fe68 	bl	80049c0 <SPI_WaitFlagStateUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e014      	b.n	8004d30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff fedc 	bl	8004ad0 <SPI_WaitFifoStateUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d22:	f043 0220 	orr.w	r2, r3, #32
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e000      	b.n	8004d30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e042      	b.n	8004dd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fd f907 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2224      	movs	r2, #36	@ 0x24
 8004d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fbb2 	bl	80054ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f8b3 	bl	8004ef4 <UART_SetConfig>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e01b      	b.n	8004dd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004db6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fc31 	bl	8005630 <UART_CheckIdleState>
 8004dce:	4603      	mov	r3, r0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	@ 0x28
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d17b      	bne.n	8004eea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_UART_Transmit+0x26>
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e074      	b.n	8004eec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2221      	movs	r2, #33	@ 0x21
 8004e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e12:	f7fd fa2f 	bl	8002274 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e30:	d108      	bne.n	8004e44 <HAL_UART_Transmit+0x6c>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	e003      	b.n	8004e4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e4c:	e030      	b.n	8004eb0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2200      	movs	r2, #0
 8004e56:	2180      	movs	r1, #128	@ 0x80
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fc93 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e03d      	b.n	8004eec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10b      	bne.n	8004e8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e84:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	3302      	adds	r3, #2
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e007      	b.n	8004e9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1c8      	bne.n	8004e4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2140      	movs	r1, #64	@ 0x40
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fc5c 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e006      	b.n	8004eec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef8:	b08c      	sub	sp, #48	@ 0x30
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4baa      	ldr	r3, [pc, #680]	@ (80051cc <UART_SetConfig+0x2d8>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	6812      	ldr	r2, [r2, #0]
 8004f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a9f      	ldr	r2, [pc, #636]	@ (80051d0 <UART_SetConfig+0x2dc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7e:	f023 010f 	bic.w	r1, r3, #15
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a90      	ldr	r2, [pc, #576]	@ (80051d4 <UART_SetConfig+0x2e0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d125      	bne.n	8004fe4 <UART_SetConfig+0xf0>
 8004f98:	4b8f      	ldr	r3, [pc, #572]	@ (80051d8 <UART_SetConfig+0x2e4>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d81a      	bhi.n	8004fdc <UART_SetConfig+0xe8>
 8004fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fac <UART_SetConfig+0xb8>)
 8004fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fac:	08004fbd 	.word	0x08004fbd
 8004fb0:	08004fcd 	.word	0x08004fcd
 8004fb4:	08004fc5 	.word	0x08004fc5
 8004fb8:	08004fd5 	.word	0x08004fd5
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc2:	e116      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fca:	e112      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd2:	e10e      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fda:	e10a      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe2:	e106      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a7c      	ldr	r2, [pc, #496]	@ (80051dc <UART_SetConfig+0x2e8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d138      	bne.n	8005060 <UART_SetConfig+0x16c>
 8004fee:	4b7a      	ldr	r3, [pc, #488]	@ (80051d8 <UART_SetConfig+0x2e4>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f003 030c 	and.w	r3, r3, #12
 8004ff8:	2b0c      	cmp	r3, #12
 8004ffa:	d82d      	bhi.n	8005058 <UART_SetConfig+0x164>
 8004ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8005004 <UART_SetConfig+0x110>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005039 	.word	0x08005039
 8005008:	08005059 	.word	0x08005059
 800500c:	08005059 	.word	0x08005059
 8005010:	08005059 	.word	0x08005059
 8005014:	08005049 	.word	0x08005049
 8005018:	08005059 	.word	0x08005059
 800501c:	08005059 	.word	0x08005059
 8005020:	08005059 	.word	0x08005059
 8005024:	08005041 	.word	0x08005041
 8005028:	08005059 	.word	0x08005059
 800502c:	08005059 	.word	0x08005059
 8005030:	08005059 	.word	0x08005059
 8005034:	08005051 	.word	0x08005051
 8005038:	2300      	movs	r3, #0
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503e:	e0d8      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8005040:	2302      	movs	r3, #2
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005046:	e0d4      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8005048:	2304      	movs	r3, #4
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504e:	e0d0      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8005050:	2308      	movs	r3, #8
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005056:	e0cc      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8005058:	2310      	movs	r3, #16
 800505a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505e:	e0c8      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a5e      	ldr	r2, [pc, #376]	@ (80051e0 <UART_SetConfig+0x2ec>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d125      	bne.n	80050b6 <UART_SetConfig+0x1c2>
 800506a:	4b5b      	ldr	r3, [pc, #364]	@ (80051d8 <UART_SetConfig+0x2e4>)
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005074:	2b30      	cmp	r3, #48	@ 0x30
 8005076:	d016      	beq.n	80050a6 <UART_SetConfig+0x1b2>
 8005078:	2b30      	cmp	r3, #48	@ 0x30
 800507a:	d818      	bhi.n	80050ae <UART_SetConfig+0x1ba>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d00a      	beq.n	8005096 <UART_SetConfig+0x1a2>
 8005080:	2b20      	cmp	r3, #32
 8005082:	d814      	bhi.n	80050ae <UART_SetConfig+0x1ba>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <UART_SetConfig+0x19a>
 8005088:	2b10      	cmp	r3, #16
 800508a:	d008      	beq.n	800509e <UART_SetConfig+0x1aa>
 800508c:	e00f      	b.n	80050ae <UART_SetConfig+0x1ba>
 800508e:	2300      	movs	r3, #0
 8005090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005094:	e0ad      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8005096:	2302      	movs	r3, #2
 8005098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509c:	e0a9      	b.n	80051f2 <UART_SetConfig+0x2fe>
 800509e:	2304      	movs	r3, #4
 80050a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a4:	e0a5      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80050a6:	2308      	movs	r3, #8
 80050a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ac:	e0a1      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80050ae:	2310      	movs	r3, #16
 80050b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b4:	e09d      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a4a      	ldr	r2, [pc, #296]	@ (80051e4 <UART_SetConfig+0x2f0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d125      	bne.n	800510c <UART_SetConfig+0x218>
 80050c0:	4b45      	ldr	r3, [pc, #276]	@ (80051d8 <UART_SetConfig+0x2e4>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80050cc:	d016      	beq.n	80050fc <UART_SetConfig+0x208>
 80050ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80050d0:	d818      	bhi.n	8005104 <UART_SetConfig+0x210>
 80050d2:	2b80      	cmp	r3, #128	@ 0x80
 80050d4:	d00a      	beq.n	80050ec <UART_SetConfig+0x1f8>
 80050d6:	2b80      	cmp	r3, #128	@ 0x80
 80050d8:	d814      	bhi.n	8005104 <UART_SetConfig+0x210>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <UART_SetConfig+0x1f0>
 80050de:	2b40      	cmp	r3, #64	@ 0x40
 80050e0:	d008      	beq.n	80050f4 <UART_SetConfig+0x200>
 80050e2:	e00f      	b.n	8005104 <UART_SetConfig+0x210>
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	e082      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80050ec:	2302      	movs	r3, #2
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f2:	e07e      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80050f4:	2304      	movs	r3, #4
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fa:	e07a      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80050fc:	2308      	movs	r3, #8
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005102:	e076      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8005104:	2310      	movs	r3, #16
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510a:	e072      	b.n	80051f2 <UART_SetConfig+0x2fe>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a35      	ldr	r2, [pc, #212]	@ (80051e8 <UART_SetConfig+0x2f4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d12a      	bne.n	800516c <UART_SetConfig+0x278>
 8005116:	4b30      	ldr	r3, [pc, #192]	@ (80051d8 <UART_SetConfig+0x2e4>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005124:	d01a      	beq.n	800515c <UART_SetConfig+0x268>
 8005126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800512a:	d81b      	bhi.n	8005164 <UART_SetConfig+0x270>
 800512c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005130:	d00c      	beq.n	800514c <UART_SetConfig+0x258>
 8005132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005136:	d815      	bhi.n	8005164 <UART_SetConfig+0x270>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <UART_SetConfig+0x250>
 800513c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005140:	d008      	beq.n	8005154 <UART_SetConfig+0x260>
 8005142:	e00f      	b.n	8005164 <UART_SetConfig+0x270>
 8005144:	2300      	movs	r3, #0
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800514a:	e052      	b.n	80051f2 <UART_SetConfig+0x2fe>
 800514c:	2302      	movs	r3, #2
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005152:	e04e      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8005154:	2304      	movs	r3, #4
 8005156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800515a:	e04a      	b.n	80051f2 <UART_SetConfig+0x2fe>
 800515c:	2308      	movs	r3, #8
 800515e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005162:	e046      	b.n	80051f2 <UART_SetConfig+0x2fe>
 8005164:	2310      	movs	r3, #16
 8005166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516a:	e042      	b.n	80051f2 <UART_SetConfig+0x2fe>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <UART_SetConfig+0x2dc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d13a      	bne.n	80051ec <UART_SetConfig+0x2f8>
 8005176:	4b18      	ldr	r3, [pc, #96]	@ (80051d8 <UART_SetConfig+0x2e4>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005180:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005184:	d01a      	beq.n	80051bc <UART_SetConfig+0x2c8>
 8005186:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800518a:	d81b      	bhi.n	80051c4 <UART_SetConfig+0x2d0>
 800518c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005190:	d00c      	beq.n	80051ac <UART_SetConfig+0x2b8>
 8005192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005196:	d815      	bhi.n	80051c4 <UART_SetConfig+0x2d0>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <UART_SetConfig+0x2b0>
 800519c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a0:	d008      	beq.n	80051b4 <UART_SetConfig+0x2c0>
 80051a2:	e00f      	b.n	80051c4 <UART_SetConfig+0x2d0>
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051aa:	e022      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80051ac:	2302      	movs	r3, #2
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b2:	e01e      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80051b4:	2304      	movs	r3, #4
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ba:	e01a      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80051bc:	2308      	movs	r3, #8
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051c2:	e016      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ca:	e012      	b.n	80051f2 <UART_SetConfig+0x2fe>
 80051cc:	cfff69f3 	.word	0xcfff69f3
 80051d0:	40008000 	.word	0x40008000
 80051d4:	40013800 	.word	0x40013800
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40004400 	.word	0x40004400
 80051e0:	40004800 	.word	0x40004800
 80051e4:	40004c00 	.word	0x40004c00
 80051e8:	40005000 	.word	0x40005000
 80051ec:	2310      	movs	r3, #16
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4aae      	ldr	r2, [pc, #696]	@ (80054b0 <UART_SetConfig+0x5bc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	f040 8097 	bne.w	800532c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005202:	2b08      	cmp	r3, #8
 8005204:	d823      	bhi.n	800524e <UART_SetConfig+0x35a>
 8005206:	a201      	add	r2, pc, #4	@ (adr r2, 800520c <UART_SetConfig+0x318>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	08005231 	.word	0x08005231
 8005210:	0800524f 	.word	0x0800524f
 8005214:	08005239 	.word	0x08005239
 8005218:	0800524f 	.word	0x0800524f
 800521c:	0800523f 	.word	0x0800523f
 8005220:	0800524f 	.word	0x0800524f
 8005224:	0800524f 	.word	0x0800524f
 8005228:	0800524f 	.word	0x0800524f
 800522c:	08005247 	.word	0x08005247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005230:	f7fe fb7e 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8005234:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005236:	e010      	b.n	800525a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005238:	4b9e      	ldr	r3, [pc, #632]	@ (80054b4 <UART_SetConfig+0x5c0>)
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800523c:	e00d      	b.n	800525a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800523e:	f7fe fb09 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8005242:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005244:	e009      	b.n	800525a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800524a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800524c:	e005      	b.n	800525a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005258:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8130 	beq.w	80054c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	4a94      	ldr	r2, [pc, #592]	@ (80054b8 <UART_SetConfig+0x5c4>)
 8005268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800526c:	461a      	mov	r2, r3
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	fbb3 f3f2 	udiv	r3, r3, r2
 8005274:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	4413      	add	r3, r2
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	429a      	cmp	r2, r3
 8005284:	d305      	bcc.n	8005292 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	429a      	cmp	r2, r3
 8005290:	d903      	bls.n	800529a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005298:	e113      	b.n	80054c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	2200      	movs	r2, #0
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	60fa      	str	r2, [r7, #12]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	4a84      	ldr	r2, [pc, #528]	@ (80054b8 <UART_SetConfig+0x5c4>)
 80052a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2200      	movs	r2, #0
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052bc:	f7fb fbf6 	bl	8000aac <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4610      	mov	r0, r2
 80052c6:	4619      	mov	r1, r3
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	020b      	lsls	r3, r1, #8
 80052d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052d6:	0202      	lsls	r2, r0, #8
 80052d8:	6979      	ldr	r1, [r7, #20]
 80052da:	6849      	ldr	r1, [r1, #4]
 80052dc:	0849      	lsrs	r1, r1, #1
 80052de:	2000      	movs	r0, #0
 80052e0:	460c      	mov	r4, r1
 80052e2:	4605      	mov	r5, r0
 80052e4:	eb12 0804 	adds.w	r8, r2, r4
 80052e8:	eb43 0905 	adc.w	r9, r3, r5
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	469a      	mov	sl, r3
 80052f4:	4693      	mov	fp, r2
 80052f6:	4652      	mov	r2, sl
 80052f8:	465b      	mov	r3, fp
 80052fa:	4640      	mov	r0, r8
 80052fc:	4649      	mov	r1, r9
 80052fe:	f7fb fbd5 	bl	8000aac <__aeabi_uldivmod>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4613      	mov	r3, r2
 8005308:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005310:	d308      	bcc.n	8005324 <UART_SetConfig+0x430>
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005318:	d204      	bcs.n	8005324 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a3a      	ldr	r2, [r7, #32]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	e0ce      	b.n	80054c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800532a:	e0ca      	b.n	80054c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005334:	d166      	bne.n	8005404 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005336:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800533a:	2b08      	cmp	r3, #8
 800533c:	d827      	bhi.n	800538e <UART_SetConfig+0x49a>
 800533e:	a201      	add	r2, pc, #4	@ (adr r2, 8005344 <UART_SetConfig+0x450>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005369 	.word	0x08005369
 8005348:	08005371 	.word	0x08005371
 800534c:	08005379 	.word	0x08005379
 8005350:	0800538f 	.word	0x0800538f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800538f 	.word	0x0800538f
 800535c:	0800538f 	.word	0x0800538f
 8005360:	0800538f 	.word	0x0800538f
 8005364:	08005387 	.word	0x08005387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005368:	f7fe fae2 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 800536c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800536e:	e014      	b.n	800539a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005370:	f7fe faf4 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8005374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005376:	e010      	b.n	800539a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005378:	4b4e      	ldr	r3, [pc, #312]	@ (80054b4 <UART_SetConfig+0x5c0>)
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800537c:	e00d      	b.n	800539a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537e:	f7fe fa69 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8005382:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005384:	e009      	b.n	800539a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800538c:	e005      	b.n	800539a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8090 	beq.w	80054c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	4a44      	ldr	r2, [pc, #272]	@ (80054b8 <UART_SetConfig+0x5c4>)
 80053a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053b4:	005a      	lsls	r2, r3, #1
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	441a      	add	r2, r3
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d916      	bls.n	80053fc <UART_SetConfig+0x508>
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d4:	d212      	bcs.n	80053fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f023 030f 	bic.w	r3, r3, #15
 80053de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	8bfb      	ldrh	r3, [r7, #30]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	8bfa      	ldrh	r2, [r7, #30]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	e062      	b.n	80054c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005402:	e05e      	b.n	80054c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005404:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005408:	2b08      	cmp	r3, #8
 800540a:	d828      	bhi.n	800545e <UART_SetConfig+0x56a>
 800540c:	a201      	add	r2, pc, #4	@ (adr r2, 8005414 <UART_SetConfig+0x520>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	08005439 	.word	0x08005439
 8005418:	08005441 	.word	0x08005441
 800541c:	08005449 	.word	0x08005449
 8005420:	0800545f 	.word	0x0800545f
 8005424:	0800544f 	.word	0x0800544f
 8005428:	0800545f 	.word	0x0800545f
 800542c:	0800545f 	.word	0x0800545f
 8005430:	0800545f 	.word	0x0800545f
 8005434:	08005457 	.word	0x08005457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005438:	f7fe fa7a 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 800543c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800543e:	e014      	b.n	800546a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005440:	f7fe fa8c 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8005444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005446:	e010      	b.n	800546a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005448:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <UART_SetConfig+0x5c0>)
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800544c:	e00d      	b.n	800546a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800544e:	f7fe fa01 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8005452:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005454:	e009      	b.n	800546a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800545c:	e005      	b.n	800546a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005468:	bf00      	nop
    }

    if (pclk != 0U)
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	2b00      	cmp	r3, #0
 800546e:	d028      	beq.n	80054c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	4a10      	ldr	r2, [pc, #64]	@ (80054b8 <UART_SetConfig+0x5c4>)
 8005476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800547a:	461a      	mov	r2, r3
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	441a      	add	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d910      	bls.n	80054bc <UART_SetConfig+0x5c8>
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a0:	d20c      	bcs.n	80054bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60da      	str	r2, [r3, #12]
 80054ac:	e009      	b.n	80054c2 <UART_SetConfig+0x5ce>
 80054ae:	bf00      	nop
 80054b0:	40008000 	.word	0x40008000
 80054b4:	00f42400 	.word	0x00f42400
 80054b8:	08006ce0 	.word	0x08006ce0
      }
      else
      {
        ret = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2200      	movs	r2, #0
 80054dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80054de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3730      	adds	r7, #48	@ 0x30
 80054e6:	46bd      	mov	sp, r7
 80054e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01a      	beq.n	8005602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ea:	d10a      	bne.n	8005602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
  }
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b098      	sub	sp, #96	@ 0x60
 8005634:	af02      	add	r7, sp, #8
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005640:	f7fc fe18 	bl	8002274 <HAL_GetTick>
 8005644:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b08      	cmp	r3, #8
 8005652:	d12f      	bne.n	80056b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005654:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565c:	2200      	movs	r2, #0
 800565e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f88e 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d022      	beq.n	80056b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800567c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005682:	653b      	str	r3, [r7, #80]	@ 0x50
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800568c:	647b      	str	r3, [r7, #68]	@ 0x44
 800568e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800569a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e6      	bne.n	800566e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e063      	b.n	800577c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d149      	bne.n	8005756 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ca:	2200      	movs	r2, #0
 80056cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f857 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d03c      	beq.n	8005756 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	623b      	str	r3, [r7, #32]
   return(result);
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80056fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e6      	bne.n	80056dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	60fb      	str	r3, [r7, #12]
   return(result);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800572e:	61fa      	str	r2, [r7, #28]
 8005730:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	69b9      	ldr	r1, [r7, #24]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	617b      	str	r3, [r7, #20]
   return(result);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e012      	b.n	800577c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3758      	adds	r7, #88	@ 0x58
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005794:	e04f      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d04b      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579e:	f7fc fd69 	bl	8002274 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e04e      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d037      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b80      	cmp	r3, #128	@ 0x80
 80057ca:	d034      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b40      	cmp	r3, #64	@ 0x40
 80057d0:	d031      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d110      	bne.n	8005802 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2208      	movs	r2, #8
 80057e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f838 	bl	800585e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2208      	movs	r2, #8
 80057f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e029      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800580c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005810:	d111      	bne.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800581a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f81e 	bl	800585e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e00f      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4013      	ands	r3, r2
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	bf0c      	ite	eq
 8005846:	2301      	moveq	r3, #1
 8005848:	2300      	movne	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	429a      	cmp	r2, r3
 8005852:	d0a0      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800585e:	b480      	push	{r7}
 8005860:	b095      	sub	sp, #84	@ 0x54
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800587a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005884:	643b      	str	r3, [r7, #64]	@ 0x40
 8005886:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800588a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e6      	bne.n	8005866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3308      	adds	r3, #8
 800589e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3308      	adds	r3, #8
 80058ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e3      	bne.n	8005898 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d118      	bne.n	800590a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f023 0310 	bic.w	r3, r3, #16
 80058ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6979      	ldr	r1, [r7, #20]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	613b      	str	r3, [r7, #16]
   return(result);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e6      	bne.n	80058d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800591e:	bf00      	nop
 8005920:	3754      	adds	r7, #84	@ 0x54
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_UARTEx_DisableFifoMode+0x16>
 800593c:	2302      	movs	r3, #2
 800593e:	e027      	b.n	8005990 <HAL_UARTEx_DisableFifoMode+0x66>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2224      	movs	r2, #36	@ 0x24
 800594c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800596e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e02d      	b.n	8005a10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2224      	movs	r2, #36	@ 0x24
 80059c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f84f 	bl	8005a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e02d      	b.n	8005a8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	@ 0x24
 8005a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f811 	bl	8005a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d108      	bne.n	8005ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ab4:	e031      	b.n	8005b1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005aba:	2308      	movs	r3, #8
 8005abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	0e5b      	lsrs	r3, r3, #25
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	0f5b      	lsrs	r3, r3, #29
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ade:	7bbb      	ldrb	r3, [r7, #14]
 8005ae0:	7b3a      	ldrb	r2, [r7, #12]
 8005ae2:	4911      	ldr	r1, [pc, #68]	@ (8005b28 <UARTEx_SetNbDataToProcess+0x94>)
 8005ae4:	5c8a      	ldrb	r2, [r1, r2]
 8005ae6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aea:	7b3a      	ldrb	r2, [r7, #12]
 8005aec:	490f      	ldr	r1, [pc, #60]	@ (8005b2c <UARTEx_SetNbDataToProcess+0x98>)
 8005aee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	7b7a      	ldrb	r2, [r7, #13]
 8005b00:	4909      	ldr	r1, [pc, #36]	@ (8005b28 <UARTEx_SetNbDataToProcess+0x94>)
 8005b02:	5c8a      	ldrb	r2, [r1, r2]
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b08:	7b7a      	ldrb	r2, [r7, #13]
 8005b0a:	4908      	ldr	r1, [pc, #32]	@ (8005b2c <UARTEx_SetNbDataToProcess+0x98>)
 8005b0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	08006cf8 	.word	0x08006cf8
 8005b2c:	08006d00 	.word	0x08006d00

08005b30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b38:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005b3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	1d3b      	adds	r3, r7, #4
 8005b70:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <srand>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4b10      	ldr	r3, [pc, #64]	@ (8005be8 <srand+0x44>)
 8005ba8:	681d      	ldr	r5, [r3, #0]
 8005baa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005bac:	4604      	mov	r4, r0
 8005bae:	b9b3      	cbnz	r3, 8005bde <srand+0x3a>
 8005bb0:	2018      	movs	r0, #24
 8005bb2:	f000 fa89 	bl	80060c8 <malloc>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	6328      	str	r0, [r5, #48]	@ 0x30
 8005bba:	b920      	cbnz	r0, 8005bc6 <srand+0x22>
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005bec <srand+0x48>)
 8005bbe:	480c      	ldr	r0, [pc, #48]	@ (8005bf0 <srand+0x4c>)
 8005bc0:	2146      	movs	r1, #70	@ 0x46
 8005bc2:	f000 fa19 	bl	8005ff8 <__assert_func>
 8005bc6:	490b      	ldr	r1, [pc, #44]	@ (8005bf4 <srand+0x50>)
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <srand+0x54>)
 8005bca:	e9c0 1300 	strd	r1, r3, [r0]
 8005bce:	4b0b      	ldr	r3, [pc, #44]	@ (8005bfc <srand+0x58>)
 8005bd0:	6083      	str	r3, [r0, #8]
 8005bd2:	230b      	movs	r3, #11
 8005bd4:	8183      	strh	r3, [r0, #12]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	2001      	movs	r0, #1
 8005bda:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005bde:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005be0:	2200      	movs	r2, #0
 8005be2:	611c      	str	r4, [r3, #16]
 8005be4:	615a      	str	r2, [r3, #20]
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	20000018 	.word	0x20000018
 8005bec:	08006d08 	.word	0x08006d08
 8005bf0:	08006d1f 	.word	0x08006d1f
 8005bf4:	abcd330e 	.word	0xabcd330e
 8005bf8:	e66d1234 	.word	0xe66d1234
 8005bfc:	0005deec 	.word	0x0005deec

08005c00 <rand>:
 8005c00:	4b16      	ldr	r3, [pc, #88]	@ (8005c5c <rand+0x5c>)
 8005c02:	b510      	push	{r4, lr}
 8005c04:	681c      	ldr	r4, [r3, #0]
 8005c06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005c08:	b9b3      	cbnz	r3, 8005c38 <rand+0x38>
 8005c0a:	2018      	movs	r0, #24
 8005c0c:	f000 fa5c 	bl	80060c8 <malloc>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6320      	str	r0, [r4, #48]	@ 0x30
 8005c14:	b920      	cbnz	r0, 8005c20 <rand+0x20>
 8005c16:	4b12      	ldr	r3, [pc, #72]	@ (8005c60 <rand+0x60>)
 8005c18:	4812      	ldr	r0, [pc, #72]	@ (8005c64 <rand+0x64>)
 8005c1a:	2152      	movs	r1, #82	@ 0x52
 8005c1c:	f000 f9ec 	bl	8005ff8 <__assert_func>
 8005c20:	4911      	ldr	r1, [pc, #68]	@ (8005c68 <rand+0x68>)
 8005c22:	4b12      	ldr	r3, [pc, #72]	@ (8005c6c <rand+0x6c>)
 8005c24:	e9c0 1300 	strd	r1, r3, [r0]
 8005c28:	4b11      	ldr	r3, [pc, #68]	@ (8005c70 <rand+0x70>)
 8005c2a:	6083      	str	r3, [r0, #8]
 8005c2c:	230b      	movs	r3, #11
 8005c2e:	8183      	strh	r3, [r0, #12]
 8005c30:	2100      	movs	r1, #0
 8005c32:	2001      	movs	r0, #1
 8005c34:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005c38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005c3a:	480e      	ldr	r0, [pc, #56]	@ (8005c74 <rand+0x74>)
 8005c3c:	690b      	ldr	r3, [r1, #16]
 8005c3e:	694c      	ldr	r4, [r1, #20]
 8005c40:	4a0d      	ldr	r2, [pc, #52]	@ (8005c78 <rand+0x78>)
 8005c42:	4358      	muls	r0, r3
 8005c44:	fb02 0004 	mla	r0, r2, r4, r0
 8005c48:	fba3 3202 	umull	r3, r2, r3, r2
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	eb40 0002 	adc.w	r0, r0, r2
 8005c52:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005c56:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005c5a:	bd10      	pop	{r4, pc}
 8005c5c:	20000018 	.word	0x20000018
 8005c60:	08006d08 	.word	0x08006d08
 8005c64:	08006d1f 	.word	0x08006d1f
 8005c68:	abcd330e 	.word	0xabcd330e
 8005c6c:	e66d1234 	.word	0xe66d1234
 8005c70:	0005deec 	.word	0x0005deec
 8005c74:	5851f42d 	.word	0x5851f42d
 8005c78:	4c957f2d 	.word	0x4c957f2d

08005c7c <std>:
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	b510      	push	{r4, lr}
 8005c80:	4604      	mov	r4, r0
 8005c82:	e9c0 3300 	strd	r3, r3, [r0]
 8005c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c8a:	6083      	str	r3, [r0, #8]
 8005c8c:	8181      	strh	r1, [r0, #12]
 8005c8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c90:	81c2      	strh	r2, [r0, #14]
 8005c92:	6183      	str	r3, [r0, #24]
 8005c94:	4619      	mov	r1, r3
 8005c96:	2208      	movs	r2, #8
 8005c98:	305c      	adds	r0, #92	@ 0x5c
 8005c9a:	f000 f8f4 	bl	8005e86 <memset>
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd4 <std+0x58>)
 8005ca0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd8 <std+0x5c>)
 8005ca4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cdc <std+0x60>)
 8005ca8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005caa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <std+0x64>)
 8005cac:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <std+0x68>)
 8005cb0:	6224      	str	r4, [r4, #32]
 8005cb2:	429c      	cmp	r4, r3
 8005cb4:	d006      	beq.n	8005cc4 <std+0x48>
 8005cb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cba:	4294      	cmp	r4, r2
 8005cbc:	d002      	beq.n	8005cc4 <std+0x48>
 8005cbe:	33d0      	adds	r3, #208	@ 0xd0
 8005cc0:	429c      	cmp	r4, r3
 8005cc2:	d105      	bne.n	8005cd0 <std+0x54>
 8005cc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ccc:	f000 b982 	b.w	8005fd4 <__retarget_lock_init_recursive>
 8005cd0:	bd10      	pop	{r4, pc}
 8005cd2:	bf00      	nop
 8005cd4:	08005e01 	.word	0x08005e01
 8005cd8:	08005e23 	.word	0x08005e23
 8005cdc:	08005e5b 	.word	0x08005e5b
 8005ce0:	08005e7f 	.word	0x08005e7f
 8005ce4:	200005d8 	.word	0x200005d8

08005ce8 <stdio_exit_handler>:
 8005ce8:	4a02      	ldr	r2, [pc, #8]	@ (8005cf4 <stdio_exit_handler+0xc>)
 8005cea:	4903      	ldr	r1, [pc, #12]	@ (8005cf8 <stdio_exit_handler+0x10>)
 8005cec:	4803      	ldr	r0, [pc, #12]	@ (8005cfc <stdio_exit_handler+0x14>)
 8005cee:	f000 b869 	b.w	8005dc4 <_fwalk_sglue>
 8005cf2:	bf00      	nop
 8005cf4:	2000000c 	.word	0x2000000c
 8005cf8:	0800633d 	.word	0x0800633d
 8005cfc:	2000001c 	.word	0x2000001c

08005d00 <cleanup_stdio>:
 8005d00:	6841      	ldr	r1, [r0, #4]
 8005d02:	4b0c      	ldr	r3, [pc, #48]	@ (8005d34 <cleanup_stdio+0x34>)
 8005d04:	4299      	cmp	r1, r3
 8005d06:	b510      	push	{r4, lr}
 8005d08:	4604      	mov	r4, r0
 8005d0a:	d001      	beq.n	8005d10 <cleanup_stdio+0x10>
 8005d0c:	f000 fb16 	bl	800633c <_fflush_r>
 8005d10:	68a1      	ldr	r1, [r4, #8]
 8005d12:	4b09      	ldr	r3, [pc, #36]	@ (8005d38 <cleanup_stdio+0x38>)
 8005d14:	4299      	cmp	r1, r3
 8005d16:	d002      	beq.n	8005d1e <cleanup_stdio+0x1e>
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fb0f 	bl	800633c <_fflush_r>
 8005d1e:	68e1      	ldr	r1, [r4, #12]
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <cleanup_stdio+0x3c>)
 8005d22:	4299      	cmp	r1, r3
 8005d24:	d004      	beq.n	8005d30 <cleanup_stdio+0x30>
 8005d26:	4620      	mov	r0, r4
 8005d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d2c:	f000 bb06 	b.w	800633c <_fflush_r>
 8005d30:	bd10      	pop	{r4, pc}
 8005d32:	bf00      	nop
 8005d34:	200005d8 	.word	0x200005d8
 8005d38:	20000640 	.word	0x20000640
 8005d3c:	200006a8 	.word	0x200006a8

08005d40 <global_stdio_init.part.0>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	4b0b      	ldr	r3, [pc, #44]	@ (8005d70 <global_stdio_init.part.0+0x30>)
 8005d44:	4c0b      	ldr	r4, [pc, #44]	@ (8005d74 <global_stdio_init.part.0+0x34>)
 8005d46:	4a0c      	ldr	r2, [pc, #48]	@ (8005d78 <global_stdio_init.part.0+0x38>)
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2104      	movs	r1, #4
 8005d50:	f7ff ff94 	bl	8005c7c <std>
 8005d54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d58:	2201      	movs	r2, #1
 8005d5a:	2109      	movs	r1, #9
 8005d5c:	f7ff ff8e 	bl	8005c7c <std>
 8005d60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d64:	2202      	movs	r2, #2
 8005d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d6a:	2112      	movs	r1, #18
 8005d6c:	f7ff bf86 	b.w	8005c7c <std>
 8005d70:	20000710 	.word	0x20000710
 8005d74:	200005d8 	.word	0x200005d8
 8005d78:	08005ce9 	.word	0x08005ce9

08005d7c <__sfp_lock_acquire>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	@ (8005d84 <__sfp_lock_acquire+0x8>)
 8005d7e:	f000 b92a 	b.w	8005fd6 <__retarget_lock_acquire_recursive>
 8005d82:	bf00      	nop
 8005d84:	20000719 	.word	0x20000719

08005d88 <__sfp_lock_release>:
 8005d88:	4801      	ldr	r0, [pc, #4]	@ (8005d90 <__sfp_lock_release+0x8>)
 8005d8a:	f000 b925 	b.w	8005fd8 <__retarget_lock_release_recursive>
 8005d8e:	bf00      	nop
 8005d90:	20000719 	.word	0x20000719

08005d94 <__sinit>:
 8005d94:	b510      	push	{r4, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	f7ff fff0 	bl	8005d7c <__sfp_lock_acquire>
 8005d9c:	6a23      	ldr	r3, [r4, #32]
 8005d9e:	b11b      	cbz	r3, 8005da8 <__sinit+0x14>
 8005da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da4:	f7ff bff0 	b.w	8005d88 <__sfp_lock_release>
 8005da8:	4b04      	ldr	r3, [pc, #16]	@ (8005dbc <__sinit+0x28>)
 8005daa:	6223      	str	r3, [r4, #32]
 8005dac:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <__sinit+0x2c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f5      	bne.n	8005da0 <__sinit+0xc>
 8005db4:	f7ff ffc4 	bl	8005d40 <global_stdio_init.part.0>
 8005db8:	e7f2      	b.n	8005da0 <__sinit+0xc>
 8005dba:	bf00      	nop
 8005dbc:	08005d01 	.word	0x08005d01
 8005dc0:	20000710 	.word	0x20000710

08005dc4 <_fwalk_sglue>:
 8005dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	4607      	mov	r7, r0
 8005dca:	4688      	mov	r8, r1
 8005dcc:	4614      	mov	r4, r2
 8005dce:	2600      	movs	r6, #0
 8005dd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dd4:	f1b9 0901 	subs.w	r9, r9, #1
 8005dd8:	d505      	bpl.n	8005de6 <_fwalk_sglue+0x22>
 8005dda:	6824      	ldr	r4, [r4, #0]
 8005ddc:	2c00      	cmp	r4, #0
 8005dde:	d1f7      	bne.n	8005dd0 <_fwalk_sglue+0xc>
 8005de0:	4630      	mov	r0, r6
 8005de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de6:	89ab      	ldrh	r3, [r5, #12]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d907      	bls.n	8005dfc <_fwalk_sglue+0x38>
 8005dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005df0:	3301      	adds	r3, #1
 8005df2:	d003      	beq.n	8005dfc <_fwalk_sglue+0x38>
 8005df4:	4629      	mov	r1, r5
 8005df6:	4638      	mov	r0, r7
 8005df8:	47c0      	blx	r8
 8005dfa:	4306      	orrs	r6, r0
 8005dfc:	3568      	adds	r5, #104	@ 0x68
 8005dfe:	e7e9      	b.n	8005dd4 <_fwalk_sglue+0x10>

08005e00 <__sread>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	460c      	mov	r4, r1
 8005e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e08:	f000 f896 	bl	8005f38 <_read_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	bfab      	itete	ge
 8005e10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e12:	89a3      	ldrhlt	r3, [r4, #12]
 8005e14:	181b      	addge	r3, r3, r0
 8005e16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e1a:	bfac      	ite	ge
 8005e1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e1e:	81a3      	strhlt	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__swrite>:
 8005e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e26:	461f      	mov	r7, r3
 8005e28:	898b      	ldrh	r3, [r1, #12]
 8005e2a:	05db      	lsls	r3, r3, #23
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	4616      	mov	r6, r2
 8005e32:	d505      	bpl.n	8005e40 <__swrite+0x1e>
 8005e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e38:	2302      	movs	r3, #2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f000 f86a 	bl	8005f14 <_lseek_r>
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	463b      	mov	r3, r7
 8005e50:	4628      	mov	r0, r5
 8005e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	f000 b881 	b.w	8005f5c <_write_r>

08005e5a <__sseek>:
 8005e5a:	b510      	push	{r4, lr}
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e62:	f000 f857 	bl	8005f14 <_lseek_r>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	bf15      	itete	ne
 8005e6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e76:	81a3      	strheq	r3, [r4, #12]
 8005e78:	bf18      	it	ne
 8005e7a:	81a3      	strhne	r3, [r4, #12]
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <__sclose>:
 8005e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e82:	f000 b825 	b.w	8005ed0 <_close_r>

08005e86 <memset>:
 8005e86:	4402      	add	r2, r0
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d100      	bne.n	8005e90 <memset+0xa>
 8005e8e:	4770      	bx	lr
 8005e90:	f803 1b01 	strb.w	r1, [r3], #1
 8005e94:	e7f9      	b.n	8005e8a <memset+0x4>
	...

08005e98 <time>:
 8005e98:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ecc <time+0x34>)
 8005e9c:	f04f 36ff 	mov.w	r6, #4294967295
 8005ea0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ea4:	4669      	mov	r1, sp
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	e9cd 6700 	strd	r6, r7, [sp]
 8005eb0:	f000 f81e 	bl	8005ef0 <_gettimeofday_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	bfb8      	it	lt
 8005eb8:	e9cd 6700 	strdlt	r6, r7, [sp]
 8005ebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ec0:	b10c      	cbz	r4, 8005ec6 <time+0x2e>
 8005ec2:	e9c4 0100 	strd	r0, r1, [r4]
 8005ec6:	b004      	add	sp, #16
 8005ec8:	bdd0      	pop	{r4, r6, r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000018 	.word	0x20000018

08005ed0 <_close_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d06      	ldr	r5, [pc, #24]	@ (8005eec <_close_r+0x1c>)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	f7fb ff31 	bl	8001d42 <_close>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d102      	bne.n	8005eea <_close_r+0x1a>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b103      	cbz	r3, 8005eea <_close_r+0x1a>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	20000714 	.word	0x20000714

08005ef0 <_gettimeofday_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d07      	ldr	r5, [pc, #28]	@ (8005f10 <_gettimeofday_r+0x20>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	602b      	str	r3, [r5, #0]
 8005efe:	f000 fe99 	bl	8006c34 <_gettimeofday>
 8005f02:	1c43      	adds	r3, r0, #1
 8005f04:	d102      	bne.n	8005f0c <_gettimeofday_r+0x1c>
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	b103      	cbz	r3, 8005f0c <_gettimeofday_r+0x1c>
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	bd38      	pop	{r3, r4, r5, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000714 	.word	0x20000714

08005f14 <_lseek_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d07      	ldr	r5, [pc, #28]	@ (8005f34 <_lseek_r+0x20>)
 8005f18:	4604      	mov	r4, r0
 8005f1a:	4608      	mov	r0, r1
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	2200      	movs	r2, #0
 8005f20:	602a      	str	r2, [r5, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f7fb ff34 	bl	8001d90 <_lseek>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_lseek_r+0x1e>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_lseek_r+0x1e>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	20000714 	.word	0x20000714

08005f38 <_read_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4d07      	ldr	r5, [pc, #28]	@ (8005f58 <_read_r+0x20>)
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	4608      	mov	r0, r1
 8005f40:	4611      	mov	r1, r2
 8005f42:	2200      	movs	r2, #0
 8005f44:	602a      	str	r2, [r5, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f7fb fec2 	bl	8001cd0 <_read>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_read_r+0x1e>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_read_r+0x1e>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20000714 	.word	0x20000714

08005f5c <_write_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d07      	ldr	r5, [pc, #28]	@ (8005f7c <_write_r+0x20>)
 8005f60:	4604      	mov	r4, r0
 8005f62:	4608      	mov	r0, r1
 8005f64:	4611      	mov	r1, r2
 8005f66:	2200      	movs	r2, #0
 8005f68:	602a      	str	r2, [r5, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f7fb fecd 	bl	8001d0a <_write>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_write_r+0x1e>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_write_r+0x1e>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20000714 	.word	0x20000714

08005f80 <__errno>:
 8005f80:	4b01      	ldr	r3, [pc, #4]	@ (8005f88 <__errno+0x8>)
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20000018 	.word	0x20000018

08005f8c <__libc_init_array>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8005fc4 <__libc_init_array+0x38>)
 8005f90:	4c0d      	ldr	r4, [pc, #52]	@ (8005fc8 <__libc_init_array+0x3c>)
 8005f92:	1b64      	subs	r4, r4, r5
 8005f94:	10a4      	asrs	r4, r4, #2
 8005f96:	2600      	movs	r6, #0
 8005f98:	42a6      	cmp	r6, r4
 8005f9a:	d109      	bne.n	8005fb0 <__libc_init_array+0x24>
 8005f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8005fcc <__libc_init_array+0x40>)
 8005f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8005fd0 <__libc_init_array+0x44>)
 8005fa0:	f000 fe50 	bl	8006c44 <_init>
 8005fa4:	1b64      	subs	r4, r4, r5
 8005fa6:	10a4      	asrs	r4, r4, #2
 8005fa8:	2600      	movs	r6, #0
 8005faa:	42a6      	cmp	r6, r4
 8005fac:	d105      	bne.n	8005fba <__libc_init_array+0x2e>
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb4:	4798      	blx	r3
 8005fb6:	3601      	adds	r6, #1
 8005fb8:	e7ee      	b.n	8005f98 <__libc_init_array+0xc>
 8005fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbe:	4798      	blx	r3
 8005fc0:	3601      	adds	r6, #1
 8005fc2:	e7f2      	b.n	8005faa <__libc_init_array+0x1e>
 8005fc4:	08006df0 	.word	0x08006df0
 8005fc8:	08006df0 	.word	0x08006df0
 8005fcc:	08006df0 	.word	0x08006df0
 8005fd0:	08006df4 	.word	0x08006df4

08005fd4 <__retarget_lock_init_recursive>:
 8005fd4:	4770      	bx	lr

08005fd6 <__retarget_lock_acquire_recursive>:
 8005fd6:	4770      	bx	lr

08005fd8 <__retarget_lock_release_recursive>:
 8005fd8:	4770      	bx	lr

08005fda <memcpy>:
 8005fda:	440a      	add	r2, r1
 8005fdc:	4291      	cmp	r1, r2
 8005fde:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fe2:	d100      	bne.n	8005fe6 <memcpy+0xc>
 8005fe4:	4770      	bx	lr
 8005fe6:	b510      	push	{r4, lr}
 8005fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff0:	4291      	cmp	r1, r2
 8005ff2:	d1f9      	bne.n	8005fe8 <memcpy+0xe>
 8005ff4:	bd10      	pop	{r4, pc}
	...

08005ff8 <__assert_func>:
 8005ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ffa:	4614      	mov	r4, r2
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4b09      	ldr	r3, [pc, #36]	@ (8006024 <__assert_func+0x2c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4605      	mov	r5, r0
 8006004:	68d8      	ldr	r0, [r3, #12]
 8006006:	b954      	cbnz	r4, 800601e <__assert_func+0x26>
 8006008:	4b07      	ldr	r3, [pc, #28]	@ (8006028 <__assert_func+0x30>)
 800600a:	461c      	mov	r4, r3
 800600c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006010:	9100      	str	r1, [sp, #0]
 8006012:	462b      	mov	r3, r5
 8006014:	4905      	ldr	r1, [pc, #20]	@ (800602c <__assert_func+0x34>)
 8006016:	f000 f9b9 	bl	800638c <fiprintf>
 800601a:	f000 f9d9 	bl	80063d0 <abort>
 800601e:	4b04      	ldr	r3, [pc, #16]	@ (8006030 <__assert_func+0x38>)
 8006020:	e7f4      	b.n	800600c <__assert_func+0x14>
 8006022:	bf00      	nop
 8006024:	20000018 	.word	0x20000018
 8006028:	08006db2 	.word	0x08006db2
 800602c:	08006d84 	.word	0x08006d84
 8006030:	08006d77 	.word	0x08006d77

08006034 <_free_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4605      	mov	r5, r0
 8006038:	2900      	cmp	r1, #0
 800603a:	d041      	beq.n	80060c0 <_free_r+0x8c>
 800603c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006040:	1f0c      	subs	r4, r1, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	bfb8      	it	lt
 8006046:	18e4      	addlt	r4, r4, r3
 8006048:	f000 f8e8 	bl	800621c <__malloc_lock>
 800604c:	4a1d      	ldr	r2, [pc, #116]	@ (80060c4 <_free_r+0x90>)
 800604e:	6813      	ldr	r3, [r2, #0]
 8006050:	b933      	cbnz	r3, 8006060 <_free_r+0x2c>
 8006052:	6063      	str	r3, [r4, #4]
 8006054:	6014      	str	r4, [r2, #0]
 8006056:	4628      	mov	r0, r5
 8006058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800605c:	f000 b8e4 	b.w	8006228 <__malloc_unlock>
 8006060:	42a3      	cmp	r3, r4
 8006062:	d908      	bls.n	8006076 <_free_r+0x42>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	1821      	adds	r1, r4, r0
 8006068:	428b      	cmp	r3, r1
 800606a:	bf01      	itttt	eq
 800606c:	6819      	ldreq	r1, [r3, #0]
 800606e:	685b      	ldreq	r3, [r3, #4]
 8006070:	1809      	addeq	r1, r1, r0
 8006072:	6021      	streq	r1, [r4, #0]
 8006074:	e7ed      	b.n	8006052 <_free_r+0x1e>
 8006076:	461a      	mov	r2, r3
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	b10b      	cbz	r3, 8006080 <_free_r+0x4c>
 800607c:	42a3      	cmp	r3, r4
 800607e:	d9fa      	bls.n	8006076 <_free_r+0x42>
 8006080:	6811      	ldr	r1, [r2, #0]
 8006082:	1850      	adds	r0, r2, r1
 8006084:	42a0      	cmp	r0, r4
 8006086:	d10b      	bne.n	80060a0 <_free_r+0x6c>
 8006088:	6820      	ldr	r0, [r4, #0]
 800608a:	4401      	add	r1, r0
 800608c:	1850      	adds	r0, r2, r1
 800608e:	4283      	cmp	r3, r0
 8006090:	6011      	str	r1, [r2, #0]
 8006092:	d1e0      	bne.n	8006056 <_free_r+0x22>
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	6053      	str	r3, [r2, #4]
 800609a:	4408      	add	r0, r1
 800609c:	6010      	str	r0, [r2, #0]
 800609e:	e7da      	b.n	8006056 <_free_r+0x22>
 80060a0:	d902      	bls.n	80060a8 <_free_r+0x74>
 80060a2:	230c      	movs	r3, #12
 80060a4:	602b      	str	r3, [r5, #0]
 80060a6:	e7d6      	b.n	8006056 <_free_r+0x22>
 80060a8:	6820      	ldr	r0, [r4, #0]
 80060aa:	1821      	adds	r1, r4, r0
 80060ac:	428b      	cmp	r3, r1
 80060ae:	bf04      	itt	eq
 80060b0:	6819      	ldreq	r1, [r3, #0]
 80060b2:	685b      	ldreq	r3, [r3, #4]
 80060b4:	6063      	str	r3, [r4, #4]
 80060b6:	bf04      	itt	eq
 80060b8:	1809      	addeq	r1, r1, r0
 80060ba:	6021      	streq	r1, [r4, #0]
 80060bc:	6054      	str	r4, [r2, #4]
 80060be:	e7ca      	b.n	8006056 <_free_r+0x22>
 80060c0:	bd38      	pop	{r3, r4, r5, pc}
 80060c2:	bf00      	nop
 80060c4:	20000720 	.word	0x20000720

080060c8 <malloc>:
 80060c8:	4b02      	ldr	r3, [pc, #8]	@ (80060d4 <malloc+0xc>)
 80060ca:	4601      	mov	r1, r0
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	f000 b825 	b.w	800611c <_malloc_r>
 80060d2:	bf00      	nop
 80060d4:	20000018 	.word	0x20000018

080060d8 <sbrk_aligned>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	4e0f      	ldr	r6, [pc, #60]	@ (8006118 <sbrk_aligned+0x40>)
 80060dc:	460c      	mov	r4, r1
 80060de:	6831      	ldr	r1, [r6, #0]
 80060e0:	4605      	mov	r5, r0
 80060e2:	b911      	cbnz	r1, 80060ea <sbrk_aligned+0x12>
 80060e4:	f000 f964 	bl	80063b0 <_sbrk_r>
 80060e8:	6030      	str	r0, [r6, #0]
 80060ea:	4621      	mov	r1, r4
 80060ec:	4628      	mov	r0, r5
 80060ee:	f000 f95f 	bl	80063b0 <_sbrk_r>
 80060f2:	1c43      	adds	r3, r0, #1
 80060f4:	d103      	bne.n	80060fe <sbrk_aligned+0x26>
 80060f6:	f04f 34ff 	mov.w	r4, #4294967295
 80060fa:	4620      	mov	r0, r4
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	1cc4      	adds	r4, r0, #3
 8006100:	f024 0403 	bic.w	r4, r4, #3
 8006104:	42a0      	cmp	r0, r4
 8006106:	d0f8      	beq.n	80060fa <sbrk_aligned+0x22>
 8006108:	1a21      	subs	r1, r4, r0
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f950 	bl	80063b0 <_sbrk_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d1f2      	bne.n	80060fa <sbrk_aligned+0x22>
 8006114:	e7ef      	b.n	80060f6 <sbrk_aligned+0x1e>
 8006116:	bf00      	nop
 8006118:	2000071c 	.word	0x2000071c

0800611c <_malloc_r>:
 800611c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006120:	1ccd      	adds	r5, r1, #3
 8006122:	f025 0503 	bic.w	r5, r5, #3
 8006126:	3508      	adds	r5, #8
 8006128:	2d0c      	cmp	r5, #12
 800612a:	bf38      	it	cc
 800612c:	250c      	movcc	r5, #12
 800612e:	2d00      	cmp	r5, #0
 8006130:	4606      	mov	r6, r0
 8006132:	db01      	blt.n	8006138 <_malloc_r+0x1c>
 8006134:	42a9      	cmp	r1, r5
 8006136:	d904      	bls.n	8006142 <_malloc_r+0x26>
 8006138:	230c      	movs	r3, #12
 800613a:	6033      	str	r3, [r6, #0]
 800613c:	2000      	movs	r0, #0
 800613e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006218 <_malloc_r+0xfc>
 8006146:	f000 f869 	bl	800621c <__malloc_lock>
 800614a:	f8d8 3000 	ldr.w	r3, [r8]
 800614e:	461c      	mov	r4, r3
 8006150:	bb44      	cbnz	r4, 80061a4 <_malloc_r+0x88>
 8006152:	4629      	mov	r1, r5
 8006154:	4630      	mov	r0, r6
 8006156:	f7ff ffbf 	bl	80060d8 <sbrk_aligned>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	4604      	mov	r4, r0
 800615e:	d158      	bne.n	8006212 <_malloc_r+0xf6>
 8006160:	f8d8 4000 	ldr.w	r4, [r8]
 8006164:	4627      	mov	r7, r4
 8006166:	2f00      	cmp	r7, #0
 8006168:	d143      	bne.n	80061f2 <_malloc_r+0xd6>
 800616a:	2c00      	cmp	r4, #0
 800616c:	d04b      	beq.n	8006206 <_malloc_r+0xea>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	4639      	mov	r1, r7
 8006172:	4630      	mov	r0, r6
 8006174:	eb04 0903 	add.w	r9, r4, r3
 8006178:	f000 f91a 	bl	80063b0 <_sbrk_r>
 800617c:	4581      	cmp	r9, r0
 800617e:	d142      	bne.n	8006206 <_malloc_r+0xea>
 8006180:	6821      	ldr	r1, [r4, #0]
 8006182:	1a6d      	subs	r5, r5, r1
 8006184:	4629      	mov	r1, r5
 8006186:	4630      	mov	r0, r6
 8006188:	f7ff ffa6 	bl	80060d8 <sbrk_aligned>
 800618c:	3001      	adds	r0, #1
 800618e:	d03a      	beq.n	8006206 <_malloc_r+0xea>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	442b      	add	r3, r5
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	f8d8 3000 	ldr.w	r3, [r8]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	bb62      	cbnz	r2, 80061f8 <_malloc_r+0xdc>
 800619e:	f8c8 7000 	str.w	r7, [r8]
 80061a2:	e00f      	b.n	80061c4 <_malloc_r+0xa8>
 80061a4:	6822      	ldr	r2, [r4, #0]
 80061a6:	1b52      	subs	r2, r2, r5
 80061a8:	d420      	bmi.n	80061ec <_malloc_r+0xd0>
 80061aa:	2a0b      	cmp	r2, #11
 80061ac:	d917      	bls.n	80061de <_malloc_r+0xc2>
 80061ae:	1961      	adds	r1, r4, r5
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	6025      	str	r5, [r4, #0]
 80061b4:	bf18      	it	ne
 80061b6:	6059      	strne	r1, [r3, #4]
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	bf08      	it	eq
 80061bc:	f8c8 1000 	streq.w	r1, [r8]
 80061c0:	5162      	str	r2, [r4, r5]
 80061c2:	604b      	str	r3, [r1, #4]
 80061c4:	4630      	mov	r0, r6
 80061c6:	f000 f82f 	bl	8006228 <__malloc_unlock>
 80061ca:	f104 000b 	add.w	r0, r4, #11
 80061ce:	1d23      	adds	r3, r4, #4
 80061d0:	f020 0007 	bic.w	r0, r0, #7
 80061d4:	1ac2      	subs	r2, r0, r3
 80061d6:	bf1c      	itt	ne
 80061d8:	1a1b      	subne	r3, r3, r0
 80061da:	50a3      	strne	r3, [r4, r2]
 80061dc:	e7af      	b.n	800613e <_malloc_r+0x22>
 80061de:	6862      	ldr	r2, [r4, #4]
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	bf0c      	ite	eq
 80061e4:	f8c8 2000 	streq.w	r2, [r8]
 80061e8:	605a      	strne	r2, [r3, #4]
 80061ea:	e7eb      	b.n	80061c4 <_malloc_r+0xa8>
 80061ec:	4623      	mov	r3, r4
 80061ee:	6864      	ldr	r4, [r4, #4]
 80061f0:	e7ae      	b.n	8006150 <_malloc_r+0x34>
 80061f2:	463c      	mov	r4, r7
 80061f4:	687f      	ldr	r7, [r7, #4]
 80061f6:	e7b6      	b.n	8006166 <_malloc_r+0x4a>
 80061f8:	461a      	mov	r2, r3
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d1fb      	bne.n	80061f8 <_malloc_r+0xdc>
 8006200:	2300      	movs	r3, #0
 8006202:	6053      	str	r3, [r2, #4]
 8006204:	e7de      	b.n	80061c4 <_malloc_r+0xa8>
 8006206:	230c      	movs	r3, #12
 8006208:	6033      	str	r3, [r6, #0]
 800620a:	4630      	mov	r0, r6
 800620c:	f000 f80c 	bl	8006228 <__malloc_unlock>
 8006210:	e794      	b.n	800613c <_malloc_r+0x20>
 8006212:	6005      	str	r5, [r0, #0]
 8006214:	e7d6      	b.n	80061c4 <_malloc_r+0xa8>
 8006216:	bf00      	nop
 8006218:	20000720 	.word	0x20000720

0800621c <__malloc_lock>:
 800621c:	4801      	ldr	r0, [pc, #4]	@ (8006224 <__malloc_lock+0x8>)
 800621e:	f7ff beda 	b.w	8005fd6 <__retarget_lock_acquire_recursive>
 8006222:	bf00      	nop
 8006224:	20000718 	.word	0x20000718

08006228 <__malloc_unlock>:
 8006228:	4801      	ldr	r0, [pc, #4]	@ (8006230 <__malloc_unlock+0x8>)
 800622a:	f7ff bed5 	b.w	8005fd8 <__retarget_lock_release_recursive>
 800622e:	bf00      	nop
 8006230:	20000718 	.word	0x20000718

08006234 <__sflush_r>:
 8006234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800623c:	0716      	lsls	r6, r2, #28
 800623e:	4605      	mov	r5, r0
 8006240:	460c      	mov	r4, r1
 8006242:	d454      	bmi.n	80062ee <__sflush_r+0xba>
 8006244:	684b      	ldr	r3, [r1, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	dc02      	bgt.n	8006250 <__sflush_r+0x1c>
 800624a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	dd48      	ble.n	80062e2 <__sflush_r+0xae>
 8006250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006252:	2e00      	cmp	r6, #0
 8006254:	d045      	beq.n	80062e2 <__sflush_r+0xae>
 8006256:	2300      	movs	r3, #0
 8006258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800625c:	682f      	ldr	r7, [r5, #0]
 800625e:	6a21      	ldr	r1, [r4, #32]
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	d030      	beq.n	80062c6 <__sflush_r+0x92>
 8006264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	0759      	lsls	r1, r3, #29
 800626a:	d505      	bpl.n	8006278 <__sflush_r+0x44>
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006272:	b10b      	cbz	r3, 8006278 <__sflush_r+0x44>
 8006274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	2300      	movs	r3, #0
 800627a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800627c:	6a21      	ldr	r1, [r4, #32]
 800627e:	4628      	mov	r0, r5
 8006280:	47b0      	blx	r6
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	d106      	bne.n	8006296 <__sflush_r+0x62>
 8006288:	6829      	ldr	r1, [r5, #0]
 800628a:	291d      	cmp	r1, #29
 800628c:	d82b      	bhi.n	80062e6 <__sflush_r+0xb2>
 800628e:	4a2a      	ldr	r2, [pc, #168]	@ (8006338 <__sflush_r+0x104>)
 8006290:	410a      	asrs	r2, r1
 8006292:	07d6      	lsls	r6, r2, #31
 8006294:	d427      	bmi.n	80062e6 <__sflush_r+0xb2>
 8006296:	2200      	movs	r2, #0
 8006298:	6062      	str	r2, [r4, #4]
 800629a:	04d9      	lsls	r1, r3, #19
 800629c:	6922      	ldr	r2, [r4, #16]
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	d504      	bpl.n	80062ac <__sflush_r+0x78>
 80062a2:	1c42      	adds	r2, r0, #1
 80062a4:	d101      	bne.n	80062aa <__sflush_r+0x76>
 80062a6:	682b      	ldr	r3, [r5, #0]
 80062a8:	b903      	cbnz	r3, 80062ac <__sflush_r+0x78>
 80062aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80062ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ae:	602f      	str	r7, [r5, #0]
 80062b0:	b1b9      	cbz	r1, 80062e2 <__sflush_r+0xae>
 80062b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062b6:	4299      	cmp	r1, r3
 80062b8:	d002      	beq.n	80062c0 <__sflush_r+0x8c>
 80062ba:	4628      	mov	r0, r5
 80062bc:	f7ff feba 	bl	8006034 <_free_r>
 80062c0:	2300      	movs	r3, #0
 80062c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80062c4:	e00d      	b.n	80062e2 <__sflush_r+0xae>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b0      	blx	r6
 80062cc:	4602      	mov	r2, r0
 80062ce:	1c50      	adds	r0, r2, #1
 80062d0:	d1c9      	bne.n	8006266 <__sflush_r+0x32>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0c6      	beq.n	8006266 <__sflush_r+0x32>
 80062d8:	2b1d      	cmp	r3, #29
 80062da:	d001      	beq.n	80062e0 <__sflush_r+0xac>
 80062dc:	2b16      	cmp	r3, #22
 80062de:	d11e      	bne.n	800631e <__sflush_r+0xea>
 80062e0:	602f      	str	r7, [r5, #0]
 80062e2:	2000      	movs	r0, #0
 80062e4:	e022      	b.n	800632c <__sflush_r+0xf8>
 80062e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ea:	b21b      	sxth	r3, r3
 80062ec:	e01b      	b.n	8006326 <__sflush_r+0xf2>
 80062ee:	690f      	ldr	r7, [r1, #16]
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	d0f6      	beq.n	80062e2 <__sflush_r+0xae>
 80062f4:	0793      	lsls	r3, r2, #30
 80062f6:	680e      	ldr	r6, [r1, #0]
 80062f8:	bf08      	it	eq
 80062fa:	694b      	ldreq	r3, [r1, #20]
 80062fc:	600f      	str	r7, [r1, #0]
 80062fe:	bf18      	it	ne
 8006300:	2300      	movne	r3, #0
 8006302:	eba6 0807 	sub.w	r8, r6, r7
 8006306:	608b      	str	r3, [r1, #8]
 8006308:	f1b8 0f00 	cmp.w	r8, #0
 800630c:	dde9      	ble.n	80062e2 <__sflush_r+0xae>
 800630e:	6a21      	ldr	r1, [r4, #32]
 8006310:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006312:	4643      	mov	r3, r8
 8006314:	463a      	mov	r2, r7
 8006316:	4628      	mov	r0, r5
 8006318:	47b0      	blx	r6
 800631a:	2800      	cmp	r0, #0
 800631c:	dc08      	bgt.n	8006330 <__sflush_r+0xfc>
 800631e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006326:	81a3      	strh	r3, [r4, #12]
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	4407      	add	r7, r0
 8006332:	eba8 0800 	sub.w	r8, r8, r0
 8006336:	e7e7      	b.n	8006308 <__sflush_r+0xd4>
 8006338:	dfbffffe 	.word	0xdfbffffe

0800633c <_fflush_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	690b      	ldr	r3, [r1, #16]
 8006340:	4605      	mov	r5, r0
 8006342:	460c      	mov	r4, r1
 8006344:	b913      	cbnz	r3, 800634c <_fflush_r+0x10>
 8006346:	2500      	movs	r5, #0
 8006348:	4628      	mov	r0, r5
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	b118      	cbz	r0, 8006356 <_fflush_r+0x1a>
 800634e:	6a03      	ldr	r3, [r0, #32]
 8006350:	b90b      	cbnz	r3, 8006356 <_fflush_r+0x1a>
 8006352:	f7ff fd1f 	bl	8005d94 <__sinit>
 8006356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f3      	beq.n	8006346 <_fflush_r+0xa>
 800635e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006360:	07d0      	lsls	r0, r2, #31
 8006362:	d404      	bmi.n	800636e <_fflush_r+0x32>
 8006364:	0599      	lsls	r1, r3, #22
 8006366:	d402      	bmi.n	800636e <_fflush_r+0x32>
 8006368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800636a:	f7ff fe34 	bl	8005fd6 <__retarget_lock_acquire_recursive>
 800636e:	4628      	mov	r0, r5
 8006370:	4621      	mov	r1, r4
 8006372:	f7ff ff5f 	bl	8006234 <__sflush_r>
 8006376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006378:	07da      	lsls	r2, r3, #31
 800637a:	4605      	mov	r5, r0
 800637c:	d4e4      	bmi.n	8006348 <_fflush_r+0xc>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	059b      	lsls	r3, r3, #22
 8006382:	d4e1      	bmi.n	8006348 <_fflush_r+0xc>
 8006384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006386:	f7ff fe27 	bl	8005fd8 <__retarget_lock_release_recursive>
 800638a:	e7dd      	b.n	8006348 <_fflush_r+0xc>

0800638c <fiprintf>:
 800638c:	b40e      	push	{r1, r2, r3}
 800638e:	b503      	push	{r0, r1, lr}
 8006390:	4601      	mov	r1, r0
 8006392:	ab03      	add	r3, sp, #12
 8006394:	4805      	ldr	r0, [pc, #20]	@ (80063ac <fiprintf+0x20>)
 8006396:	f853 2b04 	ldr.w	r2, [r3], #4
 800639a:	6800      	ldr	r0, [r0, #0]
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	f000 f847 	bl	8006430 <_vfiprintf_r>
 80063a2:	b002      	add	sp, #8
 80063a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a8:	b003      	add	sp, #12
 80063aa:	4770      	bx	lr
 80063ac:	20000018 	.word	0x20000018

080063b0 <_sbrk_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4d06      	ldr	r5, [pc, #24]	@ (80063cc <_sbrk_r+0x1c>)
 80063b4:	2300      	movs	r3, #0
 80063b6:	4604      	mov	r4, r0
 80063b8:	4608      	mov	r0, r1
 80063ba:	602b      	str	r3, [r5, #0]
 80063bc:	f7fb fcf6 	bl	8001dac <_sbrk>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d102      	bne.n	80063ca <_sbrk_r+0x1a>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	b103      	cbz	r3, 80063ca <_sbrk_r+0x1a>
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	bd38      	pop	{r3, r4, r5, pc}
 80063cc:	20000714 	.word	0x20000714

080063d0 <abort>:
 80063d0:	b508      	push	{r3, lr}
 80063d2:	2006      	movs	r0, #6
 80063d4:	f000 fb8e 	bl	8006af4 <raise>
 80063d8:	2001      	movs	r0, #1
 80063da:	f7fb fc6e 	bl	8001cba <_exit>

080063de <__sfputc_r>:
 80063de:	6893      	ldr	r3, [r2, #8]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	b410      	push	{r4}
 80063e6:	6093      	str	r3, [r2, #8]
 80063e8:	da08      	bge.n	80063fc <__sfputc_r+0x1e>
 80063ea:	6994      	ldr	r4, [r2, #24]
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	db01      	blt.n	80063f4 <__sfputc_r+0x16>
 80063f0:	290a      	cmp	r1, #10
 80063f2:	d103      	bne.n	80063fc <__sfputc_r+0x1e>
 80063f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f8:	f000 bac0 	b.w	800697c <__swbuf_r>
 80063fc:	6813      	ldr	r3, [r2, #0]
 80063fe:	1c58      	adds	r0, r3, #1
 8006400:	6010      	str	r0, [r2, #0]
 8006402:	7019      	strb	r1, [r3, #0]
 8006404:	4608      	mov	r0, r1
 8006406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640a:	4770      	bx	lr

0800640c <__sfputs_r>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	4606      	mov	r6, r0
 8006410:	460f      	mov	r7, r1
 8006412:	4614      	mov	r4, r2
 8006414:	18d5      	adds	r5, r2, r3
 8006416:	42ac      	cmp	r4, r5
 8006418:	d101      	bne.n	800641e <__sfputs_r+0x12>
 800641a:	2000      	movs	r0, #0
 800641c:	e007      	b.n	800642e <__sfputs_r+0x22>
 800641e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006422:	463a      	mov	r2, r7
 8006424:	4630      	mov	r0, r6
 8006426:	f7ff ffda 	bl	80063de <__sfputc_r>
 800642a:	1c43      	adds	r3, r0, #1
 800642c:	d1f3      	bne.n	8006416 <__sfputs_r+0xa>
 800642e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006430 <_vfiprintf_r>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	460d      	mov	r5, r1
 8006436:	b09d      	sub	sp, #116	@ 0x74
 8006438:	4614      	mov	r4, r2
 800643a:	4698      	mov	r8, r3
 800643c:	4606      	mov	r6, r0
 800643e:	b118      	cbz	r0, 8006448 <_vfiprintf_r+0x18>
 8006440:	6a03      	ldr	r3, [r0, #32]
 8006442:	b90b      	cbnz	r3, 8006448 <_vfiprintf_r+0x18>
 8006444:	f7ff fca6 	bl	8005d94 <__sinit>
 8006448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800644a:	07d9      	lsls	r1, r3, #31
 800644c:	d405      	bmi.n	800645a <_vfiprintf_r+0x2a>
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	059a      	lsls	r2, r3, #22
 8006452:	d402      	bmi.n	800645a <_vfiprintf_r+0x2a>
 8006454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006456:	f7ff fdbe 	bl	8005fd6 <__retarget_lock_acquire_recursive>
 800645a:	89ab      	ldrh	r3, [r5, #12]
 800645c:	071b      	lsls	r3, r3, #28
 800645e:	d501      	bpl.n	8006464 <_vfiprintf_r+0x34>
 8006460:	692b      	ldr	r3, [r5, #16]
 8006462:	b99b      	cbnz	r3, 800648c <_vfiprintf_r+0x5c>
 8006464:	4629      	mov	r1, r5
 8006466:	4630      	mov	r0, r6
 8006468:	f000 fac6 	bl	80069f8 <__swsetup_r>
 800646c:	b170      	cbz	r0, 800648c <_vfiprintf_r+0x5c>
 800646e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006470:	07dc      	lsls	r4, r3, #31
 8006472:	d504      	bpl.n	800647e <_vfiprintf_r+0x4e>
 8006474:	f04f 30ff 	mov.w	r0, #4294967295
 8006478:	b01d      	add	sp, #116	@ 0x74
 800647a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	0598      	lsls	r0, r3, #22
 8006482:	d4f7      	bmi.n	8006474 <_vfiprintf_r+0x44>
 8006484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006486:	f7ff fda7 	bl	8005fd8 <__retarget_lock_release_recursive>
 800648a:	e7f3      	b.n	8006474 <_vfiprintf_r+0x44>
 800648c:	2300      	movs	r3, #0
 800648e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006490:	2320      	movs	r3, #32
 8006492:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006496:	f8cd 800c 	str.w	r8, [sp, #12]
 800649a:	2330      	movs	r3, #48	@ 0x30
 800649c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800664c <_vfiprintf_r+0x21c>
 80064a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064a4:	f04f 0901 	mov.w	r9, #1
 80064a8:	4623      	mov	r3, r4
 80064aa:	469a      	mov	sl, r3
 80064ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b0:	b10a      	cbz	r2, 80064b6 <_vfiprintf_r+0x86>
 80064b2:	2a25      	cmp	r2, #37	@ 0x25
 80064b4:	d1f9      	bne.n	80064aa <_vfiprintf_r+0x7a>
 80064b6:	ebba 0b04 	subs.w	fp, sl, r4
 80064ba:	d00b      	beq.n	80064d4 <_vfiprintf_r+0xa4>
 80064bc:	465b      	mov	r3, fp
 80064be:	4622      	mov	r2, r4
 80064c0:	4629      	mov	r1, r5
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff ffa2 	bl	800640c <__sfputs_r>
 80064c8:	3001      	adds	r0, #1
 80064ca:	f000 80a7 	beq.w	800661c <_vfiprintf_r+0x1ec>
 80064ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064d0:	445a      	add	r2, fp
 80064d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80064d4:	f89a 3000 	ldrb.w	r3, [sl]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 809f 	beq.w	800661c <_vfiprintf_r+0x1ec>
 80064de:	2300      	movs	r3, #0
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295
 80064e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064e8:	f10a 0a01 	add.w	sl, sl, #1
 80064ec:	9304      	str	r3, [sp, #16]
 80064ee:	9307      	str	r3, [sp, #28]
 80064f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80064f6:	4654      	mov	r4, sl
 80064f8:	2205      	movs	r2, #5
 80064fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fe:	4853      	ldr	r0, [pc, #332]	@ (800664c <_vfiprintf_r+0x21c>)
 8006500:	f7f9 fe8e 	bl	8000220 <memchr>
 8006504:	9a04      	ldr	r2, [sp, #16]
 8006506:	b9d8      	cbnz	r0, 8006540 <_vfiprintf_r+0x110>
 8006508:	06d1      	lsls	r1, r2, #27
 800650a:	bf44      	itt	mi
 800650c:	2320      	movmi	r3, #32
 800650e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006512:	0713      	lsls	r3, r2, #28
 8006514:	bf44      	itt	mi
 8006516:	232b      	movmi	r3, #43	@ 0x2b
 8006518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800651c:	f89a 3000 	ldrb.w	r3, [sl]
 8006520:	2b2a      	cmp	r3, #42	@ 0x2a
 8006522:	d015      	beq.n	8006550 <_vfiprintf_r+0x120>
 8006524:	9a07      	ldr	r2, [sp, #28]
 8006526:	4654      	mov	r4, sl
 8006528:	2000      	movs	r0, #0
 800652a:	f04f 0c0a 	mov.w	ip, #10
 800652e:	4621      	mov	r1, r4
 8006530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006534:	3b30      	subs	r3, #48	@ 0x30
 8006536:	2b09      	cmp	r3, #9
 8006538:	d94b      	bls.n	80065d2 <_vfiprintf_r+0x1a2>
 800653a:	b1b0      	cbz	r0, 800656a <_vfiprintf_r+0x13a>
 800653c:	9207      	str	r2, [sp, #28]
 800653e:	e014      	b.n	800656a <_vfiprintf_r+0x13a>
 8006540:	eba0 0308 	sub.w	r3, r0, r8
 8006544:	fa09 f303 	lsl.w	r3, r9, r3
 8006548:	4313      	orrs	r3, r2
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	46a2      	mov	sl, r4
 800654e:	e7d2      	b.n	80064f6 <_vfiprintf_r+0xc6>
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	1d19      	adds	r1, r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	9103      	str	r1, [sp, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	bfbb      	ittet	lt
 800655c:	425b      	neglt	r3, r3
 800655e:	f042 0202 	orrlt.w	r2, r2, #2
 8006562:	9307      	strge	r3, [sp, #28]
 8006564:	9307      	strlt	r3, [sp, #28]
 8006566:	bfb8      	it	lt
 8006568:	9204      	strlt	r2, [sp, #16]
 800656a:	7823      	ldrb	r3, [r4, #0]
 800656c:	2b2e      	cmp	r3, #46	@ 0x2e
 800656e:	d10a      	bne.n	8006586 <_vfiprintf_r+0x156>
 8006570:	7863      	ldrb	r3, [r4, #1]
 8006572:	2b2a      	cmp	r3, #42	@ 0x2a
 8006574:	d132      	bne.n	80065dc <_vfiprintf_r+0x1ac>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	1d1a      	adds	r2, r3, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	9203      	str	r2, [sp, #12]
 800657e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006582:	3402      	adds	r4, #2
 8006584:	9305      	str	r3, [sp, #20]
 8006586:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800665c <_vfiprintf_r+0x22c>
 800658a:	7821      	ldrb	r1, [r4, #0]
 800658c:	2203      	movs	r2, #3
 800658e:	4650      	mov	r0, sl
 8006590:	f7f9 fe46 	bl	8000220 <memchr>
 8006594:	b138      	cbz	r0, 80065a6 <_vfiprintf_r+0x176>
 8006596:	9b04      	ldr	r3, [sp, #16]
 8006598:	eba0 000a 	sub.w	r0, r0, sl
 800659c:	2240      	movs	r2, #64	@ 0x40
 800659e:	4082      	lsls	r2, r0
 80065a0:	4313      	orrs	r3, r2
 80065a2:	3401      	adds	r4, #1
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065aa:	4829      	ldr	r0, [pc, #164]	@ (8006650 <_vfiprintf_r+0x220>)
 80065ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065b0:	2206      	movs	r2, #6
 80065b2:	f7f9 fe35 	bl	8000220 <memchr>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d03f      	beq.n	800663a <_vfiprintf_r+0x20a>
 80065ba:	4b26      	ldr	r3, [pc, #152]	@ (8006654 <_vfiprintf_r+0x224>)
 80065bc:	bb1b      	cbnz	r3, 8006606 <_vfiprintf_r+0x1d6>
 80065be:	9b03      	ldr	r3, [sp, #12]
 80065c0:	3307      	adds	r3, #7
 80065c2:	f023 0307 	bic.w	r3, r3, #7
 80065c6:	3308      	adds	r3, #8
 80065c8:	9303      	str	r3, [sp, #12]
 80065ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065cc:	443b      	add	r3, r7
 80065ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d0:	e76a      	b.n	80064a8 <_vfiprintf_r+0x78>
 80065d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065d6:	460c      	mov	r4, r1
 80065d8:	2001      	movs	r0, #1
 80065da:	e7a8      	b.n	800652e <_vfiprintf_r+0xfe>
 80065dc:	2300      	movs	r3, #0
 80065de:	3401      	adds	r4, #1
 80065e0:	9305      	str	r3, [sp, #20]
 80065e2:	4619      	mov	r1, r3
 80065e4:	f04f 0c0a 	mov.w	ip, #10
 80065e8:	4620      	mov	r0, r4
 80065ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ee:	3a30      	subs	r2, #48	@ 0x30
 80065f0:	2a09      	cmp	r2, #9
 80065f2:	d903      	bls.n	80065fc <_vfiprintf_r+0x1cc>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0c6      	beq.n	8006586 <_vfiprintf_r+0x156>
 80065f8:	9105      	str	r1, [sp, #20]
 80065fa:	e7c4      	b.n	8006586 <_vfiprintf_r+0x156>
 80065fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006600:	4604      	mov	r4, r0
 8006602:	2301      	movs	r3, #1
 8006604:	e7f0      	b.n	80065e8 <_vfiprintf_r+0x1b8>
 8006606:	ab03      	add	r3, sp, #12
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	462a      	mov	r2, r5
 800660c:	4b12      	ldr	r3, [pc, #72]	@ (8006658 <_vfiprintf_r+0x228>)
 800660e:	a904      	add	r1, sp, #16
 8006610:	4630      	mov	r0, r6
 8006612:	f3af 8000 	nop.w
 8006616:	4607      	mov	r7, r0
 8006618:	1c78      	adds	r0, r7, #1
 800661a:	d1d6      	bne.n	80065ca <_vfiprintf_r+0x19a>
 800661c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800661e:	07d9      	lsls	r1, r3, #31
 8006620:	d405      	bmi.n	800662e <_vfiprintf_r+0x1fe>
 8006622:	89ab      	ldrh	r3, [r5, #12]
 8006624:	059a      	lsls	r2, r3, #22
 8006626:	d402      	bmi.n	800662e <_vfiprintf_r+0x1fe>
 8006628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800662a:	f7ff fcd5 	bl	8005fd8 <__retarget_lock_release_recursive>
 800662e:	89ab      	ldrh	r3, [r5, #12]
 8006630:	065b      	lsls	r3, r3, #25
 8006632:	f53f af1f 	bmi.w	8006474 <_vfiprintf_r+0x44>
 8006636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006638:	e71e      	b.n	8006478 <_vfiprintf_r+0x48>
 800663a:	ab03      	add	r3, sp, #12
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	462a      	mov	r2, r5
 8006640:	4b05      	ldr	r3, [pc, #20]	@ (8006658 <_vfiprintf_r+0x228>)
 8006642:	a904      	add	r1, sp, #16
 8006644:	4630      	mov	r0, r6
 8006646:	f000 f879 	bl	800673c <_printf_i>
 800664a:	e7e4      	b.n	8006616 <_vfiprintf_r+0x1e6>
 800664c:	08006db3 	.word	0x08006db3
 8006650:	08006dbd 	.word	0x08006dbd
 8006654:	00000000 	.word	0x00000000
 8006658:	0800640d 	.word	0x0800640d
 800665c:	08006db9 	.word	0x08006db9

08006660 <_printf_common>:
 8006660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	4616      	mov	r6, r2
 8006666:	4698      	mov	r8, r3
 8006668:	688a      	ldr	r2, [r1, #8]
 800666a:	690b      	ldr	r3, [r1, #16]
 800666c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006670:	4293      	cmp	r3, r2
 8006672:	bfb8      	it	lt
 8006674:	4613      	movlt	r3, r2
 8006676:	6033      	str	r3, [r6, #0]
 8006678:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800667c:	4607      	mov	r7, r0
 800667e:	460c      	mov	r4, r1
 8006680:	b10a      	cbz	r2, 8006686 <_printf_common+0x26>
 8006682:	3301      	adds	r3, #1
 8006684:	6033      	str	r3, [r6, #0]
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	0699      	lsls	r1, r3, #26
 800668a:	bf42      	ittt	mi
 800668c:	6833      	ldrmi	r3, [r6, #0]
 800668e:	3302      	addmi	r3, #2
 8006690:	6033      	strmi	r3, [r6, #0]
 8006692:	6825      	ldr	r5, [r4, #0]
 8006694:	f015 0506 	ands.w	r5, r5, #6
 8006698:	d106      	bne.n	80066a8 <_printf_common+0x48>
 800669a:	f104 0a19 	add.w	sl, r4, #25
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	6832      	ldr	r2, [r6, #0]
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	42ab      	cmp	r3, r5
 80066a6:	dc26      	bgt.n	80066f6 <_printf_common+0x96>
 80066a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066ac:	6822      	ldr	r2, [r4, #0]
 80066ae:	3b00      	subs	r3, #0
 80066b0:	bf18      	it	ne
 80066b2:	2301      	movne	r3, #1
 80066b4:	0692      	lsls	r2, r2, #26
 80066b6:	d42b      	bmi.n	8006710 <_printf_common+0xb0>
 80066b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066bc:	4641      	mov	r1, r8
 80066be:	4638      	mov	r0, r7
 80066c0:	47c8      	blx	r9
 80066c2:	3001      	adds	r0, #1
 80066c4:	d01e      	beq.n	8006704 <_printf_common+0xa4>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	6922      	ldr	r2, [r4, #16]
 80066ca:	f003 0306 	and.w	r3, r3, #6
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	bf02      	ittt	eq
 80066d2:	68e5      	ldreq	r5, [r4, #12]
 80066d4:	6833      	ldreq	r3, [r6, #0]
 80066d6:	1aed      	subeq	r5, r5, r3
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	bf0c      	ite	eq
 80066dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066e0:	2500      	movne	r5, #0
 80066e2:	4293      	cmp	r3, r2
 80066e4:	bfc4      	itt	gt
 80066e6:	1a9b      	subgt	r3, r3, r2
 80066e8:	18ed      	addgt	r5, r5, r3
 80066ea:	2600      	movs	r6, #0
 80066ec:	341a      	adds	r4, #26
 80066ee:	42b5      	cmp	r5, r6
 80066f0:	d11a      	bne.n	8006728 <_printf_common+0xc8>
 80066f2:	2000      	movs	r0, #0
 80066f4:	e008      	b.n	8006708 <_printf_common+0xa8>
 80066f6:	2301      	movs	r3, #1
 80066f8:	4652      	mov	r2, sl
 80066fa:	4641      	mov	r1, r8
 80066fc:	4638      	mov	r0, r7
 80066fe:	47c8      	blx	r9
 8006700:	3001      	adds	r0, #1
 8006702:	d103      	bne.n	800670c <_printf_common+0xac>
 8006704:	f04f 30ff 	mov.w	r0, #4294967295
 8006708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670c:	3501      	adds	r5, #1
 800670e:	e7c6      	b.n	800669e <_printf_common+0x3e>
 8006710:	18e1      	adds	r1, r4, r3
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	2030      	movs	r0, #48	@ 0x30
 8006716:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800671a:	4422      	add	r2, r4
 800671c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006720:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006724:	3302      	adds	r3, #2
 8006726:	e7c7      	b.n	80066b8 <_printf_common+0x58>
 8006728:	2301      	movs	r3, #1
 800672a:	4622      	mov	r2, r4
 800672c:	4641      	mov	r1, r8
 800672e:	4638      	mov	r0, r7
 8006730:	47c8      	blx	r9
 8006732:	3001      	adds	r0, #1
 8006734:	d0e6      	beq.n	8006704 <_printf_common+0xa4>
 8006736:	3601      	adds	r6, #1
 8006738:	e7d9      	b.n	80066ee <_printf_common+0x8e>
	...

0800673c <_printf_i>:
 800673c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006740:	7e0f      	ldrb	r7, [r1, #24]
 8006742:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006744:	2f78      	cmp	r7, #120	@ 0x78
 8006746:	4691      	mov	r9, r2
 8006748:	4680      	mov	r8, r0
 800674a:	460c      	mov	r4, r1
 800674c:	469a      	mov	sl, r3
 800674e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006752:	d807      	bhi.n	8006764 <_printf_i+0x28>
 8006754:	2f62      	cmp	r7, #98	@ 0x62
 8006756:	d80a      	bhi.n	800676e <_printf_i+0x32>
 8006758:	2f00      	cmp	r7, #0
 800675a:	f000 80d2 	beq.w	8006902 <_printf_i+0x1c6>
 800675e:	2f58      	cmp	r7, #88	@ 0x58
 8006760:	f000 80b9 	beq.w	80068d6 <_printf_i+0x19a>
 8006764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006768:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800676c:	e03a      	b.n	80067e4 <_printf_i+0xa8>
 800676e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006772:	2b15      	cmp	r3, #21
 8006774:	d8f6      	bhi.n	8006764 <_printf_i+0x28>
 8006776:	a101      	add	r1, pc, #4	@ (adr r1, 800677c <_printf_i+0x40>)
 8006778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800677c:	080067d5 	.word	0x080067d5
 8006780:	080067e9 	.word	0x080067e9
 8006784:	08006765 	.word	0x08006765
 8006788:	08006765 	.word	0x08006765
 800678c:	08006765 	.word	0x08006765
 8006790:	08006765 	.word	0x08006765
 8006794:	080067e9 	.word	0x080067e9
 8006798:	08006765 	.word	0x08006765
 800679c:	08006765 	.word	0x08006765
 80067a0:	08006765 	.word	0x08006765
 80067a4:	08006765 	.word	0x08006765
 80067a8:	080068e9 	.word	0x080068e9
 80067ac:	08006813 	.word	0x08006813
 80067b0:	080068a3 	.word	0x080068a3
 80067b4:	08006765 	.word	0x08006765
 80067b8:	08006765 	.word	0x08006765
 80067bc:	0800690b 	.word	0x0800690b
 80067c0:	08006765 	.word	0x08006765
 80067c4:	08006813 	.word	0x08006813
 80067c8:	08006765 	.word	0x08006765
 80067cc:	08006765 	.word	0x08006765
 80067d0:	080068ab 	.word	0x080068ab
 80067d4:	6833      	ldr	r3, [r6, #0]
 80067d6:	1d1a      	adds	r2, r3, #4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6032      	str	r2, [r6, #0]
 80067dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067e4:	2301      	movs	r3, #1
 80067e6:	e09d      	b.n	8006924 <_printf_i+0x1e8>
 80067e8:	6833      	ldr	r3, [r6, #0]
 80067ea:	6820      	ldr	r0, [r4, #0]
 80067ec:	1d19      	adds	r1, r3, #4
 80067ee:	6031      	str	r1, [r6, #0]
 80067f0:	0606      	lsls	r6, r0, #24
 80067f2:	d501      	bpl.n	80067f8 <_printf_i+0xbc>
 80067f4:	681d      	ldr	r5, [r3, #0]
 80067f6:	e003      	b.n	8006800 <_printf_i+0xc4>
 80067f8:	0645      	lsls	r5, r0, #25
 80067fa:	d5fb      	bpl.n	80067f4 <_printf_i+0xb8>
 80067fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006800:	2d00      	cmp	r5, #0
 8006802:	da03      	bge.n	800680c <_printf_i+0xd0>
 8006804:	232d      	movs	r3, #45	@ 0x2d
 8006806:	426d      	negs	r5, r5
 8006808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800680c:	4859      	ldr	r0, [pc, #356]	@ (8006974 <_printf_i+0x238>)
 800680e:	230a      	movs	r3, #10
 8006810:	e011      	b.n	8006836 <_printf_i+0xfa>
 8006812:	6821      	ldr	r1, [r4, #0]
 8006814:	6833      	ldr	r3, [r6, #0]
 8006816:	0608      	lsls	r0, r1, #24
 8006818:	f853 5b04 	ldr.w	r5, [r3], #4
 800681c:	d402      	bmi.n	8006824 <_printf_i+0xe8>
 800681e:	0649      	lsls	r1, r1, #25
 8006820:	bf48      	it	mi
 8006822:	b2ad      	uxthmi	r5, r5
 8006824:	2f6f      	cmp	r7, #111	@ 0x6f
 8006826:	4853      	ldr	r0, [pc, #332]	@ (8006974 <_printf_i+0x238>)
 8006828:	6033      	str	r3, [r6, #0]
 800682a:	bf14      	ite	ne
 800682c:	230a      	movne	r3, #10
 800682e:	2308      	moveq	r3, #8
 8006830:	2100      	movs	r1, #0
 8006832:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006836:	6866      	ldr	r6, [r4, #4]
 8006838:	60a6      	str	r6, [r4, #8]
 800683a:	2e00      	cmp	r6, #0
 800683c:	bfa2      	ittt	ge
 800683e:	6821      	ldrge	r1, [r4, #0]
 8006840:	f021 0104 	bicge.w	r1, r1, #4
 8006844:	6021      	strge	r1, [r4, #0]
 8006846:	b90d      	cbnz	r5, 800684c <_printf_i+0x110>
 8006848:	2e00      	cmp	r6, #0
 800684a:	d04b      	beq.n	80068e4 <_printf_i+0x1a8>
 800684c:	4616      	mov	r6, r2
 800684e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006852:	fb03 5711 	mls	r7, r3, r1, r5
 8006856:	5dc7      	ldrb	r7, [r0, r7]
 8006858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800685c:	462f      	mov	r7, r5
 800685e:	42bb      	cmp	r3, r7
 8006860:	460d      	mov	r5, r1
 8006862:	d9f4      	bls.n	800684e <_printf_i+0x112>
 8006864:	2b08      	cmp	r3, #8
 8006866:	d10b      	bne.n	8006880 <_printf_i+0x144>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	07df      	lsls	r7, r3, #31
 800686c:	d508      	bpl.n	8006880 <_printf_i+0x144>
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	6861      	ldr	r1, [r4, #4]
 8006872:	4299      	cmp	r1, r3
 8006874:	bfde      	ittt	le
 8006876:	2330      	movle	r3, #48	@ 0x30
 8006878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800687c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006880:	1b92      	subs	r2, r2, r6
 8006882:	6122      	str	r2, [r4, #16]
 8006884:	f8cd a000 	str.w	sl, [sp]
 8006888:	464b      	mov	r3, r9
 800688a:	aa03      	add	r2, sp, #12
 800688c:	4621      	mov	r1, r4
 800688e:	4640      	mov	r0, r8
 8006890:	f7ff fee6 	bl	8006660 <_printf_common>
 8006894:	3001      	adds	r0, #1
 8006896:	d14a      	bne.n	800692e <_printf_i+0x1f2>
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	b004      	add	sp, #16
 800689e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	f043 0320 	orr.w	r3, r3, #32
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	4833      	ldr	r0, [pc, #204]	@ (8006978 <_printf_i+0x23c>)
 80068ac:	2778      	movs	r7, #120	@ 0x78
 80068ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	6831      	ldr	r1, [r6, #0]
 80068b6:	061f      	lsls	r7, r3, #24
 80068b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80068bc:	d402      	bmi.n	80068c4 <_printf_i+0x188>
 80068be:	065f      	lsls	r7, r3, #25
 80068c0:	bf48      	it	mi
 80068c2:	b2ad      	uxthmi	r5, r5
 80068c4:	6031      	str	r1, [r6, #0]
 80068c6:	07d9      	lsls	r1, r3, #31
 80068c8:	bf44      	itt	mi
 80068ca:	f043 0320 	orrmi.w	r3, r3, #32
 80068ce:	6023      	strmi	r3, [r4, #0]
 80068d0:	b11d      	cbz	r5, 80068da <_printf_i+0x19e>
 80068d2:	2310      	movs	r3, #16
 80068d4:	e7ac      	b.n	8006830 <_printf_i+0xf4>
 80068d6:	4827      	ldr	r0, [pc, #156]	@ (8006974 <_printf_i+0x238>)
 80068d8:	e7e9      	b.n	80068ae <_printf_i+0x172>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	f023 0320 	bic.w	r3, r3, #32
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	e7f6      	b.n	80068d2 <_printf_i+0x196>
 80068e4:	4616      	mov	r6, r2
 80068e6:	e7bd      	b.n	8006864 <_printf_i+0x128>
 80068e8:	6833      	ldr	r3, [r6, #0]
 80068ea:	6825      	ldr	r5, [r4, #0]
 80068ec:	6961      	ldr	r1, [r4, #20]
 80068ee:	1d18      	adds	r0, r3, #4
 80068f0:	6030      	str	r0, [r6, #0]
 80068f2:	062e      	lsls	r6, r5, #24
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	d501      	bpl.n	80068fc <_printf_i+0x1c0>
 80068f8:	6019      	str	r1, [r3, #0]
 80068fa:	e002      	b.n	8006902 <_printf_i+0x1c6>
 80068fc:	0668      	lsls	r0, r5, #25
 80068fe:	d5fb      	bpl.n	80068f8 <_printf_i+0x1bc>
 8006900:	8019      	strh	r1, [r3, #0]
 8006902:	2300      	movs	r3, #0
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	4616      	mov	r6, r2
 8006908:	e7bc      	b.n	8006884 <_printf_i+0x148>
 800690a:	6833      	ldr	r3, [r6, #0]
 800690c:	1d1a      	adds	r2, r3, #4
 800690e:	6032      	str	r2, [r6, #0]
 8006910:	681e      	ldr	r6, [r3, #0]
 8006912:	6862      	ldr	r2, [r4, #4]
 8006914:	2100      	movs	r1, #0
 8006916:	4630      	mov	r0, r6
 8006918:	f7f9 fc82 	bl	8000220 <memchr>
 800691c:	b108      	cbz	r0, 8006922 <_printf_i+0x1e6>
 800691e:	1b80      	subs	r0, r0, r6
 8006920:	6060      	str	r0, [r4, #4]
 8006922:	6863      	ldr	r3, [r4, #4]
 8006924:	6123      	str	r3, [r4, #16]
 8006926:	2300      	movs	r3, #0
 8006928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800692c:	e7aa      	b.n	8006884 <_printf_i+0x148>
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	4632      	mov	r2, r6
 8006932:	4649      	mov	r1, r9
 8006934:	4640      	mov	r0, r8
 8006936:	47d0      	blx	sl
 8006938:	3001      	adds	r0, #1
 800693a:	d0ad      	beq.n	8006898 <_printf_i+0x15c>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	079b      	lsls	r3, r3, #30
 8006940:	d413      	bmi.n	800696a <_printf_i+0x22e>
 8006942:	68e0      	ldr	r0, [r4, #12]
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	4298      	cmp	r0, r3
 8006948:	bfb8      	it	lt
 800694a:	4618      	movlt	r0, r3
 800694c:	e7a6      	b.n	800689c <_printf_i+0x160>
 800694e:	2301      	movs	r3, #1
 8006950:	4632      	mov	r2, r6
 8006952:	4649      	mov	r1, r9
 8006954:	4640      	mov	r0, r8
 8006956:	47d0      	blx	sl
 8006958:	3001      	adds	r0, #1
 800695a:	d09d      	beq.n	8006898 <_printf_i+0x15c>
 800695c:	3501      	adds	r5, #1
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	9903      	ldr	r1, [sp, #12]
 8006962:	1a5b      	subs	r3, r3, r1
 8006964:	42ab      	cmp	r3, r5
 8006966:	dcf2      	bgt.n	800694e <_printf_i+0x212>
 8006968:	e7eb      	b.n	8006942 <_printf_i+0x206>
 800696a:	2500      	movs	r5, #0
 800696c:	f104 0619 	add.w	r6, r4, #25
 8006970:	e7f5      	b.n	800695e <_printf_i+0x222>
 8006972:	bf00      	nop
 8006974:	08006dc4 	.word	0x08006dc4
 8006978:	08006dd5 	.word	0x08006dd5

0800697c <__swbuf_r>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	460e      	mov	r6, r1
 8006980:	4614      	mov	r4, r2
 8006982:	4605      	mov	r5, r0
 8006984:	b118      	cbz	r0, 800698e <__swbuf_r+0x12>
 8006986:	6a03      	ldr	r3, [r0, #32]
 8006988:	b90b      	cbnz	r3, 800698e <__swbuf_r+0x12>
 800698a:	f7ff fa03 	bl	8005d94 <__sinit>
 800698e:	69a3      	ldr	r3, [r4, #24]
 8006990:	60a3      	str	r3, [r4, #8]
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	071a      	lsls	r2, r3, #28
 8006996:	d501      	bpl.n	800699c <__swbuf_r+0x20>
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	b943      	cbnz	r3, 80069ae <__swbuf_r+0x32>
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f82a 	bl	80069f8 <__swsetup_r>
 80069a4:	b118      	cbz	r0, 80069ae <__swbuf_r+0x32>
 80069a6:	f04f 37ff 	mov.w	r7, #4294967295
 80069aa:	4638      	mov	r0, r7
 80069ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	6922      	ldr	r2, [r4, #16]
 80069b2:	1a98      	subs	r0, r3, r2
 80069b4:	6963      	ldr	r3, [r4, #20]
 80069b6:	b2f6      	uxtb	r6, r6
 80069b8:	4283      	cmp	r3, r0
 80069ba:	4637      	mov	r7, r6
 80069bc:	dc05      	bgt.n	80069ca <__swbuf_r+0x4e>
 80069be:	4621      	mov	r1, r4
 80069c0:	4628      	mov	r0, r5
 80069c2:	f7ff fcbb 	bl	800633c <_fflush_r>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d1ed      	bne.n	80069a6 <__swbuf_r+0x2a>
 80069ca:	68a3      	ldr	r3, [r4, #8]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	60a3      	str	r3, [r4, #8]
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	6022      	str	r2, [r4, #0]
 80069d6:	701e      	strb	r6, [r3, #0]
 80069d8:	6962      	ldr	r2, [r4, #20]
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	429a      	cmp	r2, r3
 80069de:	d004      	beq.n	80069ea <__swbuf_r+0x6e>
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d5e1      	bpl.n	80069aa <__swbuf_r+0x2e>
 80069e6:	2e0a      	cmp	r6, #10
 80069e8:	d1df      	bne.n	80069aa <__swbuf_r+0x2e>
 80069ea:	4621      	mov	r1, r4
 80069ec:	4628      	mov	r0, r5
 80069ee:	f7ff fca5 	bl	800633c <_fflush_r>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d0d9      	beq.n	80069aa <__swbuf_r+0x2e>
 80069f6:	e7d6      	b.n	80069a6 <__swbuf_r+0x2a>

080069f8 <__swsetup_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4b29      	ldr	r3, [pc, #164]	@ (8006aa0 <__swsetup_r+0xa8>)
 80069fc:	4605      	mov	r5, r0
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	460c      	mov	r4, r1
 8006a02:	b118      	cbz	r0, 8006a0c <__swsetup_r+0x14>
 8006a04:	6a03      	ldr	r3, [r0, #32]
 8006a06:	b90b      	cbnz	r3, 8006a0c <__swsetup_r+0x14>
 8006a08:	f7ff f9c4 	bl	8005d94 <__sinit>
 8006a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a10:	0719      	lsls	r1, r3, #28
 8006a12:	d422      	bmi.n	8006a5a <__swsetup_r+0x62>
 8006a14:	06da      	lsls	r2, r3, #27
 8006a16:	d407      	bmi.n	8006a28 <__swsetup_r+0x30>
 8006a18:	2209      	movs	r2, #9
 8006a1a:	602a      	str	r2, [r5, #0]
 8006a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	f04f 30ff 	mov.w	r0, #4294967295
 8006a26:	e033      	b.n	8006a90 <__swsetup_r+0x98>
 8006a28:	0758      	lsls	r0, r3, #29
 8006a2a:	d512      	bpl.n	8006a52 <__swsetup_r+0x5a>
 8006a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a2e:	b141      	cbz	r1, 8006a42 <__swsetup_r+0x4a>
 8006a30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a34:	4299      	cmp	r1, r3
 8006a36:	d002      	beq.n	8006a3e <__swsetup_r+0x46>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f7ff fafb 	bl	8006034 <_free_r>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6063      	str	r3, [r4, #4]
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f043 0308 	orr.w	r3, r3, #8
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	b94b      	cbnz	r3, 8006a72 <__swsetup_r+0x7a>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a68:	d003      	beq.n	8006a72 <__swsetup_r+0x7a>
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f000 f883 	bl	8006b78 <__smakebuf_r>
 8006a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a76:	f013 0201 	ands.w	r2, r3, #1
 8006a7a:	d00a      	beq.n	8006a92 <__swsetup_r+0x9a>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	60a2      	str	r2, [r4, #8]
 8006a80:	6962      	ldr	r2, [r4, #20]
 8006a82:	4252      	negs	r2, r2
 8006a84:	61a2      	str	r2, [r4, #24]
 8006a86:	6922      	ldr	r2, [r4, #16]
 8006a88:	b942      	cbnz	r2, 8006a9c <__swsetup_r+0xa4>
 8006a8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a8e:	d1c5      	bne.n	8006a1c <__swsetup_r+0x24>
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	0799      	lsls	r1, r3, #30
 8006a94:	bf58      	it	pl
 8006a96:	6962      	ldrpl	r2, [r4, #20]
 8006a98:	60a2      	str	r2, [r4, #8]
 8006a9a:	e7f4      	b.n	8006a86 <__swsetup_r+0x8e>
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e7f7      	b.n	8006a90 <__swsetup_r+0x98>
 8006aa0:	20000018 	.word	0x20000018

08006aa4 <_raise_r>:
 8006aa4:	291f      	cmp	r1, #31
 8006aa6:	b538      	push	{r3, r4, r5, lr}
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	d904      	bls.n	8006ab8 <_raise_r+0x14>
 8006aae:	2316      	movs	r3, #22
 8006ab0:	6003      	str	r3, [r0, #0]
 8006ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006aba:	b112      	cbz	r2, 8006ac2 <_raise_r+0x1e>
 8006abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ac0:	b94b      	cbnz	r3, 8006ad6 <_raise_r+0x32>
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f000 f830 	bl	8006b28 <_getpid_r>
 8006ac8:	4622      	mov	r2, r4
 8006aca:	4601      	mov	r1, r0
 8006acc:	4628      	mov	r0, r5
 8006ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ad2:	f000 b817 	b.w	8006b04 <_kill_r>
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d00a      	beq.n	8006af0 <_raise_r+0x4c>
 8006ada:	1c59      	adds	r1, r3, #1
 8006adc:	d103      	bne.n	8006ae6 <_raise_r+0x42>
 8006ade:	2316      	movs	r3, #22
 8006ae0:	6003      	str	r3, [r0, #0]
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	e7e7      	b.n	8006ab6 <_raise_r+0x12>
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006aec:	4620      	mov	r0, r4
 8006aee:	4798      	blx	r3
 8006af0:	2000      	movs	r0, #0
 8006af2:	e7e0      	b.n	8006ab6 <_raise_r+0x12>

08006af4 <raise>:
 8006af4:	4b02      	ldr	r3, [pc, #8]	@ (8006b00 <raise+0xc>)
 8006af6:	4601      	mov	r1, r0
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	f7ff bfd3 	b.w	8006aa4 <_raise_r>
 8006afe:	bf00      	nop
 8006b00:	20000018 	.word	0x20000018

08006b04 <_kill_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4d07      	ldr	r5, [pc, #28]	@ (8006b24 <_kill_r+0x20>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	602b      	str	r3, [r5, #0]
 8006b12:	f7fb f8c2 	bl	8001c9a <_kill>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	d102      	bne.n	8006b20 <_kill_r+0x1c>
 8006b1a:	682b      	ldr	r3, [r5, #0]
 8006b1c:	b103      	cbz	r3, 8006b20 <_kill_r+0x1c>
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	bd38      	pop	{r3, r4, r5, pc}
 8006b22:	bf00      	nop
 8006b24:	20000714 	.word	0x20000714

08006b28 <_getpid_r>:
 8006b28:	f7fb b8af 	b.w	8001c8a <_getpid>

08006b2c <__swhatbuf_r>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	460c      	mov	r4, r1
 8006b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b34:	2900      	cmp	r1, #0
 8006b36:	b096      	sub	sp, #88	@ 0x58
 8006b38:	4615      	mov	r5, r2
 8006b3a:	461e      	mov	r6, r3
 8006b3c:	da0d      	bge.n	8006b5a <__swhatbuf_r+0x2e>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b44:	f04f 0100 	mov.w	r1, #0
 8006b48:	bf14      	ite	ne
 8006b4a:	2340      	movne	r3, #64	@ 0x40
 8006b4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b50:	2000      	movs	r0, #0
 8006b52:	6031      	str	r1, [r6, #0]
 8006b54:	602b      	str	r3, [r5, #0]
 8006b56:	b016      	add	sp, #88	@ 0x58
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
 8006b5a:	466a      	mov	r2, sp
 8006b5c:	f000 f848 	bl	8006bf0 <_fstat_r>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	dbec      	blt.n	8006b3e <__swhatbuf_r+0x12>
 8006b64:	9901      	ldr	r1, [sp, #4]
 8006b66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b6e:	4259      	negs	r1, r3
 8006b70:	4159      	adcs	r1, r3
 8006b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b76:	e7eb      	b.n	8006b50 <__swhatbuf_r+0x24>

08006b78 <__smakebuf_r>:
 8006b78:	898b      	ldrh	r3, [r1, #12]
 8006b7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b7c:	079d      	lsls	r5, r3, #30
 8006b7e:	4606      	mov	r6, r0
 8006b80:	460c      	mov	r4, r1
 8006b82:	d507      	bpl.n	8006b94 <__smakebuf_r+0x1c>
 8006b84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	6123      	str	r3, [r4, #16]
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	6163      	str	r3, [r4, #20]
 8006b90:	b003      	add	sp, #12
 8006b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b94:	ab01      	add	r3, sp, #4
 8006b96:	466a      	mov	r2, sp
 8006b98:	f7ff ffc8 	bl	8006b2c <__swhatbuf_r>
 8006b9c:	9f00      	ldr	r7, [sp, #0]
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	4639      	mov	r1, r7
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f7ff faba 	bl	800611c <_malloc_r>
 8006ba8:	b948      	cbnz	r0, 8006bbe <__smakebuf_r+0x46>
 8006baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bae:	059a      	lsls	r2, r3, #22
 8006bb0:	d4ee      	bmi.n	8006b90 <__smakebuf_r+0x18>
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	f043 0302 	orr.w	r3, r3, #2
 8006bba:	81a3      	strh	r3, [r4, #12]
 8006bbc:	e7e2      	b.n	8006b84 <__smakebuf_r+0xc>
 8006bbe:	89a3      	ldrh	r3, [r4, #12]
 8006bc0:	6020      	str	r0, [r4, #0]
 8006bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bce:	b15b      	cbz	r3, 8006be8 <__smakebuf_r+0x70>
 8006bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f000 f81d 	bl	8006c14 <_isatty_r>
 8006bda:	b128      	cbz	r0, 8006be8 <__smakebuf_r+0x70>
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	f023 0303 	bic.w	r3, r3, #3
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	431d      	orrs	r5, r3
 8006bec:	81a5      	strh	r5, [r4, #12]
 8006bee:	e7cf      	b.n	8006b90 <__smakebuf_r+0x18>

08006bf0 <_fstat_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4d07      	ldr	r5, [pc, #28]	@ (8006c10 <_fstat_r+0x20>)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	602b      	str	r3, [r5, #0]
 8006bfe:	f7fb f8ac 	bl	8001d5a <_fstat>
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	d102      	bne.n	8006c0c <_fstat_r+0x1c>
 8006c06:	682b      	ldr	r3, [r5, #0]
 8006c08:	b103      	cbz	r3, 8006c0c <_fstat_r+0x1c>
 8006c0a:	6023      	str	r3, [r4, #0]
 8006c0c:	bd38      	pop	{r3, r4, r5, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000714 	.word	0x20000714

08006c14 <_isatty_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4d06      	ldr	r5, [pc, #24]	@ (8006c30 <_isatty_r+0x1c>)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	602b      	str	r3, [r5, #0]
 8006c20:	f7fb f8ab 	bl	8001d7a <_isatty>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d102      	bne.n	8006c2e <_isatty_r+0x1a>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	b103      	cbz	r3, 8006c2e <_isatty_r+0x1a>
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	bd38      	pop	{r3, r4, r5, pc}
 8006c30:	20000714 	.word	0x20000714

08006c34 <_gettimeofday>:
 8006c34:	4b02      	ldr	r3, [pc, #8]	@ (8006c40 <_gettimeofday+0xc>)
 8006c36:	2258      	movs	r2, #88	@ 0x58
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3e:	4770      	bx	lr
 8006c40:	20000714 	.word	0x20000714

08006c44 <_init>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr

08006c50 <_fini>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr
