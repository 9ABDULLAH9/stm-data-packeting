#include "data_packet.h"
#include "main.h"
#include "crc.h"
#include "spi.h"
#include "usart.h"
#include "usb.h"
#include "gpio.h"


void floatToUint8(float value, uint8_t *buffer, uint8_t i,
						uint8_t ii, uint8_t iii, uint8_t iv)
{
    FloatUInt8Union unionVal;
    unionVal.f = value;
    
    buffer[i] = unionVal.u[0];
    buffer[ii] = unionVal.u[1];
	buffer[iii] = unionVal.u[2];
    buffer[iv] = unionVal.u[3];
}

uint8_t *transmit_data_packet(Data_packet* transmit_data, uint8_t *buffer)
{
    
	uint16_t altitude;
	uint8_t bat_level;

    buffer[0] = transmit_data->c_stat;

    altitude = (uint16_t)transmit_data->altitude;
    buffer[1] = (uint8_t)convert16bittoMSB(altitude); // Yüksek byte
    buffer[2] = (uint8_t)convert16bittoLSB(altitude);        // Düşük byte

	floatToUint8(transmit_data->pressure, buffer, 3, 4, 5, 6);

	bat_level = (uint8_t)transmit_data->bat_level;
    buffer[7] = bat_level;

	floatToUint8(transmit_data->latitude, buffer, 8, 9, 10, 11);

	floatToUint8(transmit_data->longtitude, buffer, 12, 13, 14, 15);

    
    uint16_t crc = HAL_CRC_Calculate(&hcrc, buffer, 16);

    buffer[16] = (uint8_t)convert16bittoMSB(crc); 
    buffer[17] = (uint8_t)convert16bittoLSB(crc);

    transmit_data->crc = crc; 

    return (buffer);
}



/*uint8_t *recive_data_packet(Data_packet* recieve_data, uint8_t buffer[18])
{
	uint16_t altitude;
	uint8_t bat_level;

    buffer[0] = recieve_data->c_stat;

    altitude = (uint16_t)recieve_data->altitude;
    buffer[1] = (uint8_t)convert16bittoMSB(altitude); // Yüksek byte
    buffer[2] = (uint8_t)convert16bittoLSB(altitude);        // Düşük byte

	floatToUint8(recieve_data->pressure, buffer, 3, 4, 5, 6);

	bat_level = (uint8_t)recieve_data->bat_level;
    buffer[7] = bat_level;

	floatToUint8(recieve_data->latitude, buffer, 8, 9, 10, 11);

	floatToUint8(recieve_data->longtitude, buffer, 12, 13, 14, 15);

    
    uint16_t crc = HAL_CRC_Calculate(&hcrc, buffer, 16);

    buffer[16] = (uint8_t)convert16bittoMSB(crc); 
    buffer[17] = (uint8_t)convert16bittoLSB(crc);

    recieve_data->crc = crc;

    return (buffer);
}*/

uint16_t ComputeCRC(uint16_t crc, uint8_t data, uint16_t polynomial)
{
	uint8_t i;
	for(i = 0; i < 8; i++)
	{
		if((((crc & 0x8000) >> 8) | (data & 0x80)) != 0)
		{
			crc <<= 1;
			crc |= polynomial;
		}
		else
		{
			crc <<= 1;
		}
		data <<= 1;
	}
	return crc;
}


uint16_t RF95_ComputeCRC(uint8_t *buffer, uint8_t bufferLength, uint8_t crcType)
{
	uint8_t i;
	uint16_t crc;
	uint16_t polynomial;

	polynomial = (crcType == CRC_TYPE_IBM) ? POLYNOMIAL_IBM : POLYNOMIAL_CCITT;
	crc = (crcType == CRC_TYPE_IBM) ? CRC_IBM_SEED : CRC_CCITT_SEED;

	for(i = 0; i < bufferLength; i++)
	{
		crc = ComputeCRC(crc, buffer[i], polynomial);
	}

	if(crcType == CRC_TYPE_IBM)
	{
		return crc;
	}
	else
	{
		return (uint16_t)(~crc);
	}
}
