
yer_istasyonu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000515c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005338  08005338  00006338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f0  080053f0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053f4  080053f4  000063f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080053f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  2000000c  08005404  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08005404  00007588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001360e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d23  00000000  00000000  0001a64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  0001d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b68  00000000  00000000  0001e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263a0  00000000  00000000  0001edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dc5  00000000  00000000  00045168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee63a  00000000  00000000  00058f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd4  00000000  00000000  001475ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0014b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800531c 	.word	0x0800531c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800531c 	.word	0x0800531c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000cf4:	b4b0      	push	{r4, r5, r7}
 8000cf6:	b08f      	sub	sp, #60	@ 0x3c
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000cfc:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000d02:	2307      	movs	r3, #7
 8000d04:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000d14:	23ff      	movs	r3, #255	@ 0xff
 8000d16:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000d1a:	2364      	movs	r3, #100	@ 0x64
 8000d1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000d20:	2308      	movs	r3, #8
 8000d22:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	461d      	mov	r5, r3
 8000d28:	f107 040c 	add.w	r4, r7, #12
 8000d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	373c      	adds	r7, #60	@ 0x3c
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bcb0      	pop	{r4, r5, r7}
 8000d44:	4770      	bx	lr

08000d46 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6898      	ldr	r0, [r3, #8]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	899b      	ldrh	r3, [r3, #12]
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f001 faeb 	bl	8002334 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f001 f860 	bl	8001e24 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6898      	ldr	r0, [r3, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	899b      	ldrh	r3, [r3, #12]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f001 fae0 	bl	8002334 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d74:	2064      	movs	r0, #100	@ 0x64
 8000d76:	f001 f855 	bl	8001e24 <HAL_Delay>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 f9ff 	bl	8001192 <LoRa_read>
 8000d94:	4603      	mov	r3, r0
 8000d96:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d107      	bne.n	8000db2 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	f023 0307 	bic.w	r3, r3, #7
 8000da8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
 8000db0:	e03e      	b.n	8000e30 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d10c      	bne.n	8000dd2 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dbc:	f023 0307 	bic.w	r3, r3, #7
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	61da      	str	r2, [r3, #28]
 8000dd0:	e02e      	b.n	8000e30 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d10c      	bne.n	8000df2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ddc:	f023 0307 	bic.w	r3, r3, #7
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	f043 0303 	orr.w	r3, r3, #3
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	61da      	str	r2, [r3, #28]
 8000df0:	e01e      	b.n	8000e30 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b05      	cmp	r3, #5
 8000df6:	d10c      	bne.n	8000e12 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dfc:	f023 0307 	bic.w	r3, r3, #7
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f043 0305 	orr.w	r3, r3, #5
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2205      	movs	r2, #5
 8000e0e:	61da      	str	r2, [r3, #28]
 8000e10:	e00e      	b.n	8000e30 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2b06      	cmp	r3, #6
 8000e16:	d10b      	bne.n	8000e30 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000e18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e1c:	f023 0307 	bic.w	r3, r3, #7
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	f043 0306 	orr.w	r3, r3, #6
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2206      	movs	r2, #6
 8000e2e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	461a      	mov	r2, r3
 8000e34:	2101      	movs	r1, #1
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f9c5 	bl	80011c6 <LoRa_write>
	//HAL_Delay(10);
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	4613      	mov	r3, r2
 8000e52:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	889b      	ldrh	r3, [r3, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f001 fa68 	bl	8002334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6998      	ldr	r0, [r3, #24]
 8000e68:	88fa      	ldrh	r2, [r7, #6]
 8000e6a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	f002 fc4b 	bl	800370a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e74:	bf00      	nop
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 f913 	bl	80040a6 <HAL_SPI_GetState>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d1f7      	bne.n	8000e76 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6998      	ldr	r0, [r3, #24]
 8000e8a:	8b3a      	ldrh	r2, [r7, #24]
 8000e8c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	f002 fdaf 	bl	80039f4 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e96:	bf00      	nop
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 f902 	bl	80040a6 <HAL_SPI_GetState>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d1f7      	bne.n	8000e98 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	889b      	ldrh	r3, [r3, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f001 fa3e 	bl	8002334 <HAL_GPIO_WritePin>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	889b      	ldrh	r3, [r3, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4619      	mov	r1, r3
 8000edc:	f001 fa2a 	bl	8002334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6998      	ldr	r0, [r3, #24]
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	f002 fc0d 	bl	800370a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ef0:	bf00      	nop
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 f8d5 	bl	80040a6 <HAL_SPI_GetState>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d1f7      	bne.n	8000ef2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6998      	ldr	r0, [r3, #24]
 8000f06:	8b3a      	ldrh	r2, [r7, #24]
 8000f08:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	f002 fbfc 	bl	800370a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f12:	bf00      	nop
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 f8c4 	bl	80040a6 <HAL_SPI_GetState>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d1f7      	bne.n	8000f14 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	889b      	ldrh	r3, [r3, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f001 fa00 	bl	8002334 <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000f48:	2126      	movs	r1, #38	@ 0x26
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f921 	bl	8001192 <LoRa_read>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d004      	beq.n	8000f64 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e003      	b.n	8000f6c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f023 0308 	bic.w	r3, r3, #8
 8000f6a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2126      	movs	r1, #38	@ 0x26
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f927 	bl	80011c6 <LoRa_write>
	HAL_Delay(10);
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f000 ff53 	bl	8001e24 <HAL_Delay>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b096      	sub	sp, #88	@ 0x58
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000f90:	4a17      	ldr	r2, [pc, #92]	@ (8000ff0 <LoRa_setAutoLDO+0x68>)
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4611      	mov	r1, r2
 8000f98:	2250      	movs	r2, #80	@ 0x50
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 f9b0 	bl	8005300 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4093      	lsls	r3, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fa85 	bl	80004bc <__aeabi_i2d>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	3358      	adds	r3, #88	@ 0x58
 8000fbc:	443b      	add	r3, r7
 8000fbe:	3b50      	subs	r3, #80	@ 0x50
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff fc0e 	bl	80007e4 <__aeabi_ddiv>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fcf0 	bl	80009b4 <__aeabi_d2iz>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	bfcc      	ite	gt
 8000fda:	2301      	movgt	r3, #1
 8000fdc:	2300      	movle	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffaa 	bl	8000f3c <LoRa_setLowDaraRateOptimization>
}
 8000fe8:	bf00      	nop
 8000fea:	3758      	adds	r7, #88	@ 0x58
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	08005338 	.word	0x08005338

08000ff4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	04db      	lsls	r3, r3, #19
 8001002:	115b      	asrs	r3, r3, #5
 8001004:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	0c1b      	lsrs	r3, r3, #16
 800100a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	461a      	mov	r2, r3
 8001010:	2106      	movs	r1, #6
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f8d7 	bl	80011c6 <LoRa_write>
	HAL_Delay(5);
 8001018:	2005      	movs	r0, #5
 800101a:	f000 ff03 	bl	8001e24 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001024:	7afb      	ldrb	r3, [r7, #11]
 8001026:	461a      	mov	r2, r3
 8001028:	2107      	movs	r1, #7
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f8cb 	bl	80011c6 <LoRa_write>
	HAL_Delay(5);
 8001030:	2005      	movs	r0, #5
 8001032:	f000 fef7 	bl	8001e24 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800103a:	7afb      	ldrb	r3, [r7, #11]
 800103c:	461a      	mov	r2, r3
 800103e:	2108      	movs	r1, #8
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f8c0 	bl	80011c6 <LoRa_write>
	HAL_Delay(5);
 8001046:	2005      	movs	r0, #5
 8001048:	f000 feec 	bl	8001e24 <HAL_Delay>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	dd01      	ble.n	8001068 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001064:	230c      	movs	r3, #12
 8001066:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2b06      	cmp	r3, #6
 800106c:	dc01      	bgt.n	8001072 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800106e:	2307      	movs	r3, #7
 8001070:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001072:	211e      	movs	r1, #30
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f88c 	bl	8001192 <LoRa_read>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f000 fed0 	bl	8001e24 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	b2da      	uxtb	r2, r3
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	461a      	mov	r2, r3
 800109c:	211e      	movs	r1, #30
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f891 	bl	80011c6 <LoRa_write>
	HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 febd 	bl	8001e24 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff6c 	bl	8000f88 <LoRa_setAutoLDO>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	461a      	mov	r2, r3
 80010c8:	2109      	movs	r1, #9
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f87b 	bl	80011c6 <LoRa_write>
	HAL_Delay(10);
 80010d0:	200a      	movs	r0, #10
 80010d2:	f000 fea7 	bl	8001e24 <HAL_Delay>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2b2c      	cmp	r3, #44	@ 0x2c
 80010f4:	d801      	bhi.n	80010fa <LoRa_setOCP+0x1a>
		current = 45;
 80010f6:	232d      	movs	r3, #45	@ 0x2d
 80010f8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	2bf0      	cmp	r3, #240	@ 0xf0
 80010fe:	d901      	bls.n	8001104 <LoRa_setOCP+0x24>
		current = 240;
 8001100:	23f0      	movs	r3, #240	@ 0xf0
 8001102:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	2b78      	cmp	r3, #120	@ 0x78
 8001108:	d809      	bhi.n	800111e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	3b2d      	subs	r3, #45	@ 0x2d
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <LoRa_setOCP+0x78>)
 8001110:	fb82 1203 	smull	r1, r2, r2, r3
 8001114:	1052      	asrs	r2, r2, #1
 8001116:	17db      	asrs	r3, r3, #31
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e00b      	b.n	8001136 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	2bf0      	cmp	r3, #240	@ 0xf0
 8001122:	d808      	bhi.n	8001136 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	331e      	adds	r3, #30
 8001128:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <LoRa_setOCP+0x78>)
 800112a:	fb82 1203 	smull	r1, r2, r2, r3
 800112e:	1092      	asrs	r2, r2, #2
 8001130:	17db      	asrs	r3, r3, #31
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3320      	adds	r3, #32
 800113a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	461a      	mov	r2, r3
 8001140:	210b      	movs	r1, #11
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f83f 	bl	80011c6 <LoRa_write>
	HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f000 fe6b 	bl	8001e24 <HAL_Delay>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	66666667 	.word	0x66666667

0800115c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001164:	211e      	movs	r1, #30
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f813 	bl	8001192 <LoRa_read>
 800116c:	4603      	mov	r3, r0
 800116e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f043 0307 	orr.w	r3, r3, #7
 8001176:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	461a      	mov	r2, r3
 800117c:	211e      	movs	r1, #30
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f821 	bl	80011c6 <LoRa_write>
	HAL_Delay(10);
 8001184:	200a      	movs	r0, #10
 8001186:	f000 fe4d 	bl	8001e24 <HAL_Delay>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af02      	add	r7, sp, #8
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80011a8:	f107 030f 	add.w	r3, r7, #15
 80011ac:	f107 010e 	add.w	r1, r7, #14
 80011b0:	2201      	movs	r2, #1
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fe44 	bl	8000e44 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af02      	add	r7, sp, #8
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	70fb      	strb	r3, [r7, #3]
 80011d2:	4613      	mov	r3, r2
 80011d4:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	73bb      	strb	r3, [r7, #14]
	data = value;
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80011e4:	f107 030f 	add.w	r3, r7, #15
 80011e8:	f107 010e 	add.w	r1, r7, #14
 80011ec:	2201      	movs	r2, #1
 80011ee:	9200      	str	r2, [sp, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fe64 	bl	8000ec0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	461a      	mov	r2, r3
 800120c:	460b      	mov	r3, r1
 800120e:	72fb      	strb	r3, [r7, #11]
 8001210:	4613      	mov	r3, r2
 8001212:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001214:	7afb      	ldrb	r3, [r7, #11]
 8001216:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800121a:	b2db      	uxtb	r3, r3
 800121c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	889b      	ldrh	r3, [r3, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	f001 f883 	bl	8002334 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6998      	ldr	r0, [r3, #24]
 8001232:	f107 0117 	add.w	r1, r7, #23
 8001236:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800123a:	2201      	movs	r2, #1
 800123c:	f002 fa65 	bl	800370a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001240:	bf00      	nop
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4618      	mov	r0, r3
 8001248:	f002 ff2d 	bl	80040a6 <HAL_SPI_GetState>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d1f7      	bne.n	8001242 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6998      	ldr	r0, [r3, #24]
 8001256:	7abb      	ldrb	r3, [r7, #10]
 8001258:	b29a      	uxth	r2, r3
 800125a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f002 fa53 	bl	800370a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001264:	bf00      	nop
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4618      	mov	r0, r3
 800126c:	f002 ff1b 	bl	80040a6 <HAL_SPI_GetState>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d1f7      	bne.n	8001266 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	889b      	ldrh	r3, [r3, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	4619      	mov	r1, r3
 8001282:	f001 f857 	bl	8002334 <HAL_GPIO_WritePin>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]

	return 1;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4611      	mov	r1, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	460b      	mov	r3, r1
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	4613      	mov	r3, r2
 80012b8:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80012c0:	2101      	movs	r1, #1
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff fd5d 	bl	8000d82 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80012c8:	210e      	movs	r1, #14
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f7ff ff61 	bl	8001192 <LoRa_read>
 80012d0:	4603      	mov	r3, r0
 80012d2:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80012d4:	7cfb      	ldrb	r3, [r7, #19]
 80012d6:	461a      	mov	r2, r3
 80012d8:	210d      	movs	r1, #13
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff ff73 	bl	80011c6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	461a      	mov	r2, r3
 80012e4:	2122      	movs	r1, #34	@ 0x22
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff ff6d 	bl	80011c6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	2100      	movs	r1, #0
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff ff84 	bl	8001200 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80012f8:	2103      	movs	r1, #3
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff fd41 	bl	8000d82 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001300:	2112      	movs	r1, #18
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff45 	bl	8001192 <LoRa_read>
 8001308:	4603      	mov	r3, r0
 800130a:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800130c:	7cfb      	ldrb	r3, [r7, #19]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00a      	beq.n	800132c <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001316:	22ff      	movs	r2, #255	@ 0xff
 8001318:	2112      	movs	r1, #18
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff ff53 	bl	80011c6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff fd2d 	bl	8000d82 <LoRa_gotoMode>
			return 1;
 8001328:	2301      	movs	r3, #1
 800132a:	e00f      	b.n	800134c <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	80bb      	strh	r3, [r7, #4]
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001338:	6979      	ldr	r1, [r7, #20]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f7ff fd21 	bl	8000d82 <LoRa_gotoMode>
				return 0;
 8001340:	2300      	movs	r3, #0
 8001342:	e003      	b.n	800134c <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f000 fd6d 	bl	8001e24 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800134a:	e7d9      	b.n	8001300 <LoRa_transmit+0x5c>
	}
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800135c:	2105      	movs	r1, #5
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fd0f 	bl	8000d82 <LoRa_gotoMode>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff8a 	bl	800128e <LoRa_isvalid>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8096 	beq.w	80014ae <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001382:	2100      	movs	r1, #0
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fcfc 	bl	8000d82 <LoRa_gotoMode>
			HAL_Delay(10);
 800138a:	200a      	movs	r0, #10
 800138c:	f000 fd4a 	bl	8001e24 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001390:	2101      	movs	r1, #1
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fefd 	bl	8001192 <LoRa_read>
 8001398:	4603      	mov	r3, r0
 800139a:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800139c:	200a      	movs	r0, #10
 800139e:	f000 fd41 	bl	8001e24 <HAL_Delay>
			data = read | 0x80;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013a8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2101      	movs	r1, #1
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff08 	bl	80011c6 <LoRa_write>
			HAL_Delay(100);
 80013b6:	2064      	movs	r0, #100	@ 0x64
 80013b8:	f000 fd34 	bl	8001e24 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fe16 	bl	8000ff4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80013ce:	4619      	mov	r1, r3
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fe71 	bl	80010b8 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80013dc:	4619      	mov	r1, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fe7e 	bl	80010e0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80013e4:	2223      	movs	r2, #35	@ 0x23
 80013e6:	210c      	movs	r1, #12
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff feec 	bl	80011c6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff feb4 	bl	800115c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fe29 	bl	8001054 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001402:	22ff      	movs	r2, #255	@ 0xff
 8001404:	211f      	movs	r1, #31
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fedd 	bl	80011c6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	461a      	mov	r2, r3
 800142c:	211d      	movs	r1, #29
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fec9 	bl	80011c6 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fda7 	bl	8000f88 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	2120      	movs	r1, #32
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff febc 	bl	80011c6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	2121      	movs	r1, #33	@ 0x21
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff feb4 	bl	80011c6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800145e:	2140      	movs	r1, #64	@ 0x40
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fe96 	bl	8001192 <LoRa_read>
 8001466:	4603      	mov	r3, r0
 8001468:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001470:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	461a      	mov	r2, r3
 8001476:	2140      	movs	r1, #64	@ 0x40
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fea4 	bl	80011c6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800147e:	2101      	movs	r1, #1
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fc7e 	bl	8000d82 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800148c:	200a      	movs	r0, #10
 800148e:	f000 fcc9 	bl	8001e24 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001492:	2142      	movs	r1, #66	@ 0x42
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fe7c 	bl	8001192 <LoRa_read>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2b12      	cmp	r3, #18
 80014a2:	d101      	bne.n	80014a8 <LoRa_init+0x13c>
				return LORA_OK;
 80014a4:	23c8      	movs	r3, #200	@ 0xc8
 80014a6:	e004      	b.n	80014b2 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80014a8:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80014ac:	e001      	b.n	80014b2 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80014ae:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <MX_GPIO_Init+0x9c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a20      	ldr	r2, [pc, #128]	@ (8001558 <MX_GPIO_Init+0x9c>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <MX_GPIO_Init+0x9c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <MX_GPIO_Init+0x9c>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <MX_GPIO_Init+0x9c>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <MX_GPIO_Init+0x9c>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFM98RESET_Pin|SPI1_NSS_Pin, GPIO_PIN_SET);
 8001502:	2201      	movs	r2, #1
 8001504:	f248 0140 	movw	r1, #32832	@ 0x8040
 8001508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150c:	f000 ff12 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RFM98RESET_Pin|SPI1_NSS_Pin;
 8001510:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152c:	f000 fd80 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8001530:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001536:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154a:	f000 fd71 	bl	8002030 <HAL_GPIO_Init>

}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001562:	f000 fbee 	bl	8001d42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001566:	f000 f88d 	bl	8001684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156a:	f7ff ffa7 	bl	80014bc <MX_GPIO_Init>
  MX_SPI1_Init();
 800156e:	f000 f8db 	bl	8001728 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001572:	f000 f917 	bl	80017a4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001576:	f000 fa2d 	bl	80019d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800157a:	f000 fa77 	bl	8001a6c <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 800157e:	f000 fb5b 	bl	8001c38 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

	// MODULE SETTINGS ----------------------------------------------
	myLoRa = newLoRa();
 8001582:	4c3b      	ldr	r4, [pc, #236]	@ (8001670 <main+0x114>)
 8001584:	463b      	mov	r3, r7
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fbb4 	bl	8000cf4 <newLoRa>
 800158c:	4625      	mov	r5, r4
 800158e:	463c      	mov	r4, r7
 8001590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001598:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800159c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	
	myLoRa.hSPIx                 = &hspi1;
 80015a0:	4b33      	ldr	r3, [pc, #204]	@ (8001670 <main+0x114>)
 80015a2:	4a34      	ldr	r2, [pc, #208]	@ (8001674 <main+0x118>)
 80015a4:	619a      	str	r2, [r3, #24]

	myLoRa.CS_port               = SPI1_NSS_GPIO_Port;
 80015a6:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <main+0x114>)
 80015a8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015ac:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin                = SPI1_NSS_Pin;
 80015ae:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <main+0x114>)
 80015b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015b4:	809a      	strh	r2, [r3, #4]

	myLoRa.reset_port            = RFM98RESET_GPIO_Port;
 80015b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <main+0x114>)
 80015b8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015bc:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin             = RFM98RESET_Pin;
 80015be:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <main+0x114>)
 80015c0:	2240      	movs	r2, #64	@ 0x40
 80015c2:	819a      	strh	r2, [r3, #12]

	myLoRa.DIO0_port						 = DIO0_GPIO_Port;
 80015c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <main+0x114>)
 80015c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80015ca:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin							 = DIO0_Pin;
 80015cc:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <main+0x114>)
 80015ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d2:	829a      	strh	r2, [r3, #20]
	
	myLoRa.frequency             = 433;							  // default = 433 MHz
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <main+0x114>)
 80015d6:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80015da:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <main+0x114>)
 80015de:	2207      	movs	r2, #7
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	myLoRa.bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 80015e4:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <main+0x114>)
 80015e6:	2207      	movs	r2, #7
 80015e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 80015ec:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <main+0x114>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	myLoRa.power					       = POWER_20db;				// default = 20db
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <main+0x114>)
 80015f6:	22ff      	movs	r2, #255	@ 0xff
 80015f8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <main+0x114>)
 80015fe:	2278      	movs	r2, #120	@ 0x78
 8001600:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	myLoRa.preamble				       = 8;		  					// default = 8;
 8001604:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <main+0x114>)
 8001606:	2208      	movs	r2, #8
 8001608:	851a      	strh	r2, [r3, #40]	@ 0x28
	
	LoRa_reset(&myLoRa);
 800160a:	4819      	ldr	r0, [pc, #100]	@ (8001670 <main+0x114>)
 800160c:	f7ff fb9b 	bl	8000d46 <LoRa_reset>
	if (200 == LoRa_init(&myLoRa))
 8001610:	4817      	ldr	r0, [pc, #92]	@ (8001670 <main+0x114>)
 8001612:	f7ff feab 	bl	800136c <LoRa_init>
 8001616:	4603      	mov	r3, r0
 8001618:	2bc8      	cmp	r3, #200	@ 0xc8
 800161a:	d106      	bne.n	800162a <main+0xce>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *) "LoRa_init _k", 128,500);
 800161c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001620:	2280      	movs	r2, #128	@ 0x80
 8001622:	4915      	ldr	r1, [pc, #84]	@ (8001678 <main+0x11c>)
 8001624:	4815      	ldr	r0, [pc, #84]	@ (800167c <main+0x120>)
 8001626:	f002 ff59 	bl	80044dc <HAL_UART_Transmit>
	}
	
	
	// START CONTINUOUS RECEIVING -----------------------------------
	LoRa_startReceiving(&myLoRa);
 800162a:	4811      	ldr	r0, [pc, #68]	@ (8001670 <main+0x114>)
 800162c:	f7ff fe92 	bl	8001354 <LoRa_startReceiving>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// SENDING DATA - - - - - - - - - - - - - - - - - - - - - - - - -
		send_data[0] = 0x3B; // MY ADDRESS
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <main+0x124>)
 8001632:	223b      	movs	r2, #59	@ 0x3b
 8001634:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<26; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	637b      	str	r3, [r7, #52]	@ 0x34
 800163a:	e00a      	b.n	8001652 <main+0xf6>
			send_data[i+1] = 48+i;
 800163c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800163e:	b2da      	uxtb	r2, r3
 8001640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001642:	3301      	adds	r3, #1
 8001644:	3230      	adds	r2, #48	@ 0x30
 8001646:	b2d1      	uxtb	r1, r2
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <main+0x124>)
 800164a:	54d1      	strb	r1, [r2, r3]
		for(int i=0; i<26; i++)
 800164c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164e:	3301      	adds	r3, #1
 8001650:	637b      	str	r3, [r7, #52]	@ 0x34
 8001652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001654:	2b19      	cmp	r3, #25
 8001656:	ddf1      	ble.n	800163c <main+0xe0>
		LoRa_transmit(&myLoRa, send_data, 128, 500);
 8001658:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	4908      	ldr	r1, [pc, #32]	@ (8001680 <main+0x124>)
 8001660:	4803      	ldr	r0, [pc, #12]	@ (8001670 <main+0x114>)
 8001662:	f7ff fe1f 	bl	80012a4 <LoRa_transmit>
		HAL_Delay(1500);
 8001666:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800166a:	f000 fbdb 	bl	8001e24 <HAL_Delay>
		send_data[0] = 0x3B; // MY ADDRESS
 800166e:	e7df      	b.n	8001630 <main+0xd4>
 8001670:	20000028 	.word	0x20000028
 8001674:	200000b8 	.word	0x200000b8
 8001678:	08005398 	.word	0x08005398
 800167c:	20000180 	.word	0x20000180
 8001680:	20000054 	.word	0x20000054

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	@ 0x50
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0318 	add.w	r3, r7, #24
 800168e:	2238      	movs	r2, #56	@ 0x38
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fe07 	bl	80052a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016aa:	f000 ff53 	bl	8002554 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b8:	2340      	movs	r3, #64	@ 0x40
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016bc:	2302      	movs	r3, #2
 80016be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c0:	2302      	movs	r3, #2
 80016c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80016c8:	230c      	movs	r3, #12
 80016ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80016d4:	2306      	movs	r3, #6
 80016d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 ffed 	bl	80026bc <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x68>
  {
    Error_Handler();
 80016e8:	f000 f818 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2303      	movs	r3, #3
 80016f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80016f4:	2380      	movs	r3, #128	@ 0x80
 80016f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f001 faeb 	bl	8002ce0 <HAL_RCC_ClockConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001710:	f000 f804 	bl	800171c <Error_Handler>
  }
}
 8001714:	bf00      	nop
 8001716:	3750      	adds	r7, #80	@ 0x50
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <Error_Handler+0x8>

08001728 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <MX_SPI1_Init+0x74>)
 800172e:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <MX_SPI1_Init+0x78>)
 8001730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_SPI1_Init+0x74>)
 8001734:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <MX_SPI1_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001740:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_SPI1_Init+0x74>)
 8001742:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001746:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_SPI1_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <MX_SPI1_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <MX_SPI1_Init+0x74>)
 8001756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800175a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800175c:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <MX_SPI1_Init+0x74>)
 800175e:	2210      	movs	r2, #16
 8001760:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <MX_SPI1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <MX_SPI1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <MX_SPI1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001774:	4b09      	ldr	r3, [pc, #36]	@ (800179c <MX_SPI1_Init+0x74>)
 8001776:	2207      	movs	r2, #7
 8001778:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <MX_SPI1_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <MX_SPI1_Init+0x74>)
 8001782:	2208      	movs	r2, #8
 8001784:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_SPI1_Init+0x74>)
 8001788:	f001 ff14 	bl	80035b4 <HAL_SPI_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001792:	f7ff ffc3 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000b8 	.word	0x200000b8
 80017a0:	40013000 	.word	0x40013000

080017a4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017aa:	4a1c      	ldr	r2, [pc, #112]	@ (800181c <MX_SPI2_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80017d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017da:	2210      	movs	r2, #16
 80017dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017f2:	2207      	movs	r2, #7
 80017f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_SPI2_Init+0x74>)
 80017fe:	2208      	movs	r2, #8
 8001800:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_SPI2_Init+0x74>)
 8001804:	f001 fed6 	bl	80035b4 <HAL_SPI_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800180e:	f7ff ff85 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000011c 	.word	0x2000011c
 800181c:	40003800 	.word	0x40003800

08001820 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	@ 0x30
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2e      	ldr	r2, [pc, #184]	@ (80018f8 <HAL_SPI_MspInit+0xd8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d128      	bne.n	8001894 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001842:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	4a2d      	ldr	r2, [pc, #180]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 8001848:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800184c:	6613      	str	r3, [r2, #96]	@ 0x60
 800184e:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	4a27      	ldr	r2, [pc, #156]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001866:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001872:	2338      	movs	r3, #56	@ 0x38
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001882:	2305      	movs	r3, #5
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	481c      	ldr	r0, [pc, #112]	@ (8001900 <HAL_SPI_MspInit+0xe0>)
 800188e:	f000 fbcf 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001892:	e02d      	b.n	80018f0 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <HAL_SPI_MspInit+0xe4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d128      	bne.n	80018f0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800189e:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a10      	ldr	r2, [pc, #64]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_SPI_MspInit+0xdc>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018ce:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e0:	2305      	movs	r3, #5
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	4805      	ldr	r0, [pc, #20]	@ (8001900 <HAL_SPI_MspInit+0xe0>)
 80018ec:	f000 fba0 	bl	8002030 <HAL_GPIO_Init>
}
 80018f0:	bf00      	nop
 80018f2:	3730      	adds	r7, #48	@ 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40013000 	.word	0x40013000
 80018fc:	40021000 	.word	0x40021000
 8001900:	48000400 	.word	0x48000400
 8001904:	40003800 	.word	0x40003800

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <HAL_MspInit+0x44>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001912:	4a0e      	ldr	r2, [pc, #56]	@ (800194c <HAL_MspInit+0x44>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6613      	str	r3, [r2, #96]	@ 0x60
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <HAL_MspInit+0x44>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_MspInit+0x44>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	4a08      	ldr	r2, [pc, #32]	@ (800194c <HAL_MspInit+0x44>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001930:	6593      	str	r3, [r2, #88]	@ 0x58
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_MspInit+0x44>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800193e:	f000 fead 	bl	800269c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <NMI_Handler+0x4>

08001958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <MemManage_Handler+0x4>

08001968 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <UsageFault_Handler+0x4>

08001978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a6:	f000 fa1f 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d8:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 80019da:	4a23      	ldr	r2, [pc, #140]	@ (8001a68 <MX_USART1_UART_Init+0x94>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019de:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a1c:	4811      	ldr	r0, [pc, #68]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 8001a1e:	f002 fd0d 	bl	800443c <HAL_UART_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a28:	f7ff fe78 	bl	800171c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 8001a30:	f003 fb36 	bl	80050a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a3a:	f7ff fe6f 	bl	800171c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4808      	ldr	r0, [pc, #32]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 8001a42:	f003 fb6b 	bl	800511c <HAL_UARTEx_SetRxFifoThreshold>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a4c:	f7ff fe66 	bl	800171c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <MX_USART1_UART_Init+0x90>)
 8001a52:	f003 faec 	bl	800502e <HAL_UARTEx_DisableFifoMode>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a5c:	f7ff fe5e 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000180 	.word	0x20000180
 8001a68:	40013800 	.word	0x40013800

08001a6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a70:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001a72:	4a24      	ldr	r2, [pc, #144]	@ (8001b04 <MX_USART2_UART_Init+0x98>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001a98:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001a9c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab0:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab6:	4812      	ldr	r0, [pc, #72]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001ab8:	f002 fcc0 	bl	800443c <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001ac2:	f7ff fe2b 	bl	800171c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001aca:	f003 fae9 	bl	80050a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001ad4:	f7ff fe22 	bl	800171c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001adc:	f003 fb1e 	bl	800511c <HAL_UARTEx_SetRxFifoThreshold>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001ae6:	f7ff fe19 	bl	800171c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <MX_USART2_UART_Init+0x94>)
 8001aec:	f003 fa9f 	bl	800502e <HAL_UARTEx_DisableFifoMode>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001af6:	f7ff fe11 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000214 	.word	0x20000214
 8001b04:	40004400 	.word	0x40004400

08001b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0a0      	sub	sp, #128	@ 0x80
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	2254      	movs	r2, #84	@ 0x54
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fbbc 	bl	80052a6 <memset>
  if(uartHandle->Instance==USART1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a3d      	ldr	r2, [pc, #244]	@ (8001c28 <HAL_UART_MspInit+0x120>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d136      	bne.n	8001ba6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 fae7 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b50:	f7ff fde4 	bl	800171c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b54:	4b35      	ldr	r3, [pc, #212]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b58:	4a34      	ldr	r2, [pc, #208]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b60:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b70:	4a2e      	ldr	r2, [pc, #184]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b78:	4b2c      	ldr	r3, [pc, #176]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b84:	23c0      	movs	r3, #192	@ 0xc0
 8001b86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b94:	2307      	movs	r3, #7
 8001b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4824      	ldr	r0, [pc, #144]	@ (8001c30 <HAL_UART_MspInit+0x128>)
 8001ba0:	f000 fa46 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ba4:	e03b      	b.n	8001c1e <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a22      	ldr	r2, [pc, #136]	@ (8001c34 <HAL_UART_MspInit+0x12c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d136      	bne.n	8001c1e <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 faab 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001bc8:	f7ff fda8 	bl	800171c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	4a16      	ldr	r2, [pc, #88]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be8:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_UART_MspInit+0x124>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1a:	f000 fa09 	bl	8002030 <HAL_GPIO_Init>
}
 8001c1e:	bf00      	nop
 8001c20:	3780      	adds	r7, #128	@ 0x80
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400
 8001c34:	40004400 	.word	0x40004400

08001c38 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <MX_USB_PCD_Init+0x48>)
 8001c3e:	4a11      	ldr	r2, [pc, #68]	@ (8001c84 <MX_USB_PCD_Init+0x4c>)
 8001c40:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_USB_PCD_Init+0x48>)
 8001c44:	2208      	movs	r2, #8
 8001c46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <MX_USB_PCD_Init+0x48>)
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_USB_PCD_Init+0x48>)
 8001c50:	2202      	movs	r2, #2
 8001c52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <MX_USB_PCD_Init+0x48>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_USB_PCD_Init+0x48>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <MX_USB_PCD_Init+0x48>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_USB_PCD_Init+0x48>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	@ (8001c80 <MX_USB_PCD_Init+0x48>)
 8001c6e:	f000 fb79 	bl	8002364 <HAL_PCD_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001c78:	f7ff fd50 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200002a8 	.word	0x200002a8
 8001c84:	40005c00 	.word	0x40005c00

08001c88 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b098      	sub	sp, #96	@ 0x60
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2254      	movs	r2, #84	@ 0x54
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 fb04 	bl	80052a6 <memset>
  if(pcdHandle->Instance==USB)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <HAL_PCD_MspInit+0x60>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_PCD_MspInit+0x58>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ca8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001cae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fa2d 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8001cc4:	f7ff fd2a 	bl	800171c <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <HAL_PCD_MspInit+0x64>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	4a07      	ldr	r2, [pc, #28]	@ (8001cec <HAL_PCD_MspInit+0x64>)
 8001cce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_PCD_MspInit+0x64>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3760      	adds	r7, #96	@ 0x60
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40005c00 	.word	0x40005c00
 8001cec:	40021000 	.word	0x40021000

08001cf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf0:	480d      	ldr	r0, [pc, #52]	@ (8001d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cf2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf4:	f7ff fe5c 	bl	80019b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf8:	480c      	ldr	r0, [pc, #48]	@ (8001d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfa:	490d      	ldr	r1, [pc, #52]	@ (8001d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d34 <LoopForever+0xe>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d10:	4c0a      	ldr	r4, [pc, #40]	@ (8001d3c <LoopForever+0x16>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1e:	f003 facb 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d22:	f7ff fc1b 	bl	800155c <main>

08001d26 <LoopForever>:

LoopForever:
    b LoopForever
 8001d26:	e7fe      	b.n	8001d26 <LoopForever>
  ldr   r0, =_estack
 8001d28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d34:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 8001d38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d3c:	20000588 	.word	0x20000588

08001d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC1_2_IRQHandler>

08001d42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 f93d 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d52:	200f      	movs	r0, #15
 8001d54:	f000 f80e 	bl	8001d74 <HAL_InitTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	e001      	b.n	8001d68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d64:	f7ff fdd0 	bl	8001908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d68:	79fb      	ldrb	r3, [r7, #7]

}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d80:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <HAL_InitTick+0x68>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d022      	beq.n	8001dce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d88:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_InitTick+0x6c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <HAL_InitTick+0x68>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f93a 	bl	8002016 <HAL_SYSTICK_Config>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10f      	bne.n	8001dc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	d809      	bhi.n	8001dc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dae:	2200      	movs	r2, #0
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	f04f 30ff 	mov.w	r0, #4294967295
 8001db6:	f000 f914 	bl	8001fe2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <HAL_InitTick+0x70>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e007      	b.n	8001dd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e004      	b.n	8001dd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e001      	b.n	8001dd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_IncTick+0x1c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_IncTick+0x20>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a03      	ldr	r2, [pc, #12]	@ (8001e04 <HAL_IncTick+0x1c>)
 8001df8:	6013      	str	r3, [r2, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	20000584 	.word	0x20000584
 8001e08:	20000008 	.word	0x20000008

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000584 	.word	0x20000584

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d004      	beq.n	8001e48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_Delay+0x40>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e48:	bf00      	nop
 8001e4a:	f7ff ffdf 	bl	8001e0c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d8f7      	bhi.n	8001e4a <HAL_Delay+0x26>
  {
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000008 	.word	0x20000008

08001e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9a:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	60d3      	str	r3, [r2, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 0307 	and.w	r3, r3, #7
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	@ (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	@ (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	@ 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f98:	d301      	bcc.n	8001f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00f      	b.n	8001fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <SysTick_Config+0x40>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f7ff ff8e 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <SysTick_Config+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb6:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <SysTick_Config+0x40>)
 8001fb8:	2207      	movs	r2, #7
 8001fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff47 	bl	8001e68 <__NVIC_SetPriorityGrouping>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff5e 	bl	8001eb0 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff90 	bl	8001f20 <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5f 	bl	8001ecc <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffb2 	bl	8001f88 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800203e:	e15a      	b.n	80022f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 814c 	beq.w	80022f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d005      	beq.n	8002070 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800206c:	2b02      	cmp	r3, #2
 800206e:	d130      	bne.n	80020d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a6:	2201      	movs	r2, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 0201 	and.w	r2, r3, #1
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d017      	beq.n	800210e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d123      	bne.n	8002162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	6939      	ldr	r1, [r7, #16]
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0203 	and.w	r2, r3, #3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80a6 	beq.w	80022f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a4:	4b5b      	ldr	r3, [pc, #364]	@ (8002314 <HAL_GPIO_Init+0x2e4>)
 80021a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002314 <HAL_GPIO_Init+0x2e4>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80021b0:	4b58      	ldr	r3, [pc, #352]	@ (8002314 <HAL_GPIO_Init+0x2e4>)
 80021b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021bc:	4a56      	ldr	r2, [pc, #344]	@ (8002318 <HAL_GPIO_Init+0x2e8>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021e6:	d01f      	beq.n	8002228 <HAL_GPIO_Init+0x1f8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a4c      	ldr	r2, [pc, #304]	@ (800231c <HAL_GPIO_Init+0x2ec>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d019      	beq.n	8002224 <HAL_GPIO_Init+0x1f4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a4b      	ldr	r2, [pc, #300]	@ (8002320 <HAL_GPIO_Init+0x2f0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <HAL_GPIO_Init+0x1f0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002324 <HAL_GPIO_Init+0x2f4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00d      	beq.n	800221c <HAL_GPIO_Init+0x1ec>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a49      	ldr	r2, [pc, #292]	@ (8002328 <HAL_GPIO_Init+0x2f8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0x1e8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a48      	ldr	r2, [pc, #288]	@ (800232c <HAL_GPIO_Init+0x2fc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_GPIO_Init+0x1e4>
 8002210:	2305      	movs	r3, #5
 8002212:	e00a      	b.n	800222a <HAL_GPIO_Init+0x1fa>
 8002214:	2306      	movs	r3, #6
 8002216:	e008      	b.n	800222a <HAL_GPIO_Init+0x1fa>
 8002218:	2304      	movs	r3, #4
 800221a:	e006      	b.n	800222a <HAL_GPIO_Init+0x1fa>
 800221c:	2303      	movs	r3, #3
 800221e:	e004      	b.n	800222a <HAL_GPIO_Init+0x1fa>
 8002220:	2302      	movs	r3, #2
 8002222:	e002      	b.n	800222a <HAL_GPIO_Init+0x1fa>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_GPIO_Init+0x1fa>
 8002228:	2300      	movs	r3, #0
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	f002 0203 	and.w	r2, r2, #3
 8002230:	0092      	lsls	r2, r2, #2
 8002232:	4093      	lsls	r3, r2
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223a:	4937      	ldr	r1, [pc, #220]	@ (8002318 <HAL_GPIO_Init+0x2e8>)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3302      	adds	r3, #2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002248:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <HAL_GPIO_Init+0x300>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800226c:	4a30      	ldr	r2, [pc, #192]	@ (8002330 <HAL_GPIO_Init+0x300>)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002272:	4b2f      	ldr	r3, [pc, #188]	@ (8002330 <HAL_GPIO_Init+0x300>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002296:	4a26      	ldr	r2, [pc, #152]	@ (8002330 <HAL_GPIO_Init+0x300>)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800229c:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <HAL_GPIO_Init+0x300>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002330 <HAL_GPIO_Init+0x300>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <HAL_GPIO_Init+0x300>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ea:	4a11      	ldr	r2, [pc, #68]	@ (8002330 <HAL_GPIO_Init+0x300>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f ae9d 	bne.w	8002040 <HAL_GPIO_Init+0x10>
  }
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40021000 	.word	0x40021000
 8002318:	40010000 	.word	0x40010000
 800231c:	48000400 	.word	0x48000400
 8002320:	48000800 	.word	0x48000800
 8002324:	48000c00 	.word	0x48000c00
 8002328:	48001000 	.word	0x48001000
 800232c:	48001400 	.word	0x48001400
 8002330:	40010400 	.word	0x40010400

08002334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
 8002340:	4613      	mov	r3, r2
 8002342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002344:	787b      	ldrb	r3, [r7, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002350:	e002      	b.n	8002358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0c0      	b.n	80024f8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fc7c 	bl	8001c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2203      	movs	r2, #3
 8002394:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f002 ff49 	bl	8005234 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e03e      	b.n	8002426 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	3311      	adds	r3, #17
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	3310      	adds	r3, #16
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	3313      	adds	r3, #19
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3320      	adds	r3, #32
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3324      	adds	r3, #36	@ 0x24
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	3301      	adds	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	429a      	cmp	r2, r3
 800242e:	d3bb      	bcc.n	80023a8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e044      	b.n	80024c0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	3301      	adds	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	791b      	ldrb	r3, [r3, #4]
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d3b5      	bcc.n	8002436 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3304      	adds	r3, #4
 80024d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80024d6:	f002 fec8 	bl	800526a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7a9b      	ldrb	r3, [r3, #10]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d102      	bne.n	80024f6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f805 	bl	8002500 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002524:	b29b      	uxth	r3, r3
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002538:	b29b      	uxth	r3, r3
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d141      	bne.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002562:	4b4b      	ldr	r3, [pc, #300]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800256a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800256e:	d131      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002570:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002576:	4a46      	ldr	r2, [pc, #280]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800257c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002580:	4b43      	ldr	r3, [pc, #268]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002588:	4a41      	ldr	r2, [pc, #260]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800258e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002590:	4b40      	ldr	r3, [pc, #256]	@ (8002694 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2232      	movs	r2, #50	@ 0x32
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	4a3f      	ldr	r2, [pc, #252]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a6:	e002      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ae:	4b38      	ldr	r3, [pc, #224]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ba:	d102      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f2      	bne.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c2:	4b33      	ldr	r3, [pc, #204]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ce:	d158      	bne.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e057      	b.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025da:	4a2d      	ldr	r2, [pc, #180]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025e4:	e04d      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025ec:	d141      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ee:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025fa:	d131      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002602:	4a23      	ldr	r2, [pc, #140]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002608:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002614:	4a1e      	ldr	r2, [pc, #120]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800261a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2232      	movs	r2, #50	@ 0x32
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	4a1c      	ldr	r2, [pc, #112]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	0c9b      	lsrs	r3, r3, #18
 800262e:	3301      	adds	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002632:	e002      	b.n	800263a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3b01      	subs	r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002646:	d102      	bne.n	800264e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f2      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800265a:	d112      	bne.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e011      	b.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002670:	e007      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002672:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800267a:	4a05      	ldr	r2, [pc, #20]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002680:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40007000 	.word	0x40007000
 8002694:	20000000 	.word	0x20000000
 8002698:	431bde83 	.word	0x431bde83

0800269c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026aa:	6093      	str	r3, [r2, #8]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40007000 	.word	0x40007000

080026bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e2fe      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d075      	beq.n	80027c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026da:	4b97      	ldr	r3, [pc, #604]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e4:	4b94      	ldr	r3, [pc, #592]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d102      	bne.n	80026fa <HAL_RCC_OscConfig+0x3e>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_OscConfig+0x44>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d10b      	bne.n	8002718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	4b8d      	ldr	r3, [pc, #564]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d05b      	beq.n	80027c4 <HAL_RCC_OscConfig+0x108>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d157      	bne.n	80027c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e2d9      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002720:	d106      	bne.n	8002730 <HAL_RCC_OscConfig+0x74>
 8002722:	4b85      	ldr	r3, [pc, #532]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a84      	ldr	r2, [pc, #528]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e01d      	b.n	800276c <HAL_RCC_OscConfig+0xb0>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x98>
 800273a:	4b7f      	ldr	r3, [pc, #508]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7e      	ldr	r2, [pc, #504]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b7c      	ldr	r3, [pc, #496]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7b      	ldr	r2, [pc, #492]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0xb0>
 8002754:	4b78      	ldr	r3, [pc, #480]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a77      	ldr	r2, [pc, #476]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b75      	ldr	r3, [pc, #468]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a74      	ldr	r2, [pc, #464]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800276a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7ff fb4a 	bl	8001e0c <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7ff fb46 	bl	8001e0c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	@ 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e29e      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	4b6a      	ldr	r3, [pc, #424]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0xc0>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7ff fb36 	bl	8001e0c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff fb32 	bl	8001e0c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	@ 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e28a      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b6:	4b60      	ldr	r3, [pc, #384]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0xe8>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d075      	beq.n	80028be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d2:	4b59      	ldr	r3, [pc, #356]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027dc:	4b56      	ldr	r3, [pc, #344]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_OscConfig+0x136>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_OscConfig+0x13c>
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d11f      	bne.n	8002838 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x154>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e25d      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b49      	ldr	r3, [pc, #292]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	4946      	ldr	r1, [pc, #280]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002824:	4b45      	ldr	r3, [pc, #276]	@ (800293c <HAL_RCC_OscConfig+0x280>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff faa3 	bl	8001d74 <HAL_InitTick>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d043      	beq.n	80028bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e249      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d023      	beq.n	8002888 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002840:	4b3d      	ldr	r3, [pc, #244]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a3c      	ldr	r2, [pc, #240]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800284a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7ff fade 	bl	8001e0c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002854:	f7ff fada 	bl	8001e0c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e232      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002866:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b31      	ldr	r3, [pc, #196]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	061b      	lsls	r3, r3, #24
 8002880:	492d      	ldr	r1, [pc, #180]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
 8002886:	e01a      	b.n	80028be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002888:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a2a      	ldr	r2, [pc, #168]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 800288e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7ff faba 	bl	8001e0c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289c:	f7ff fab6 	bl	8001e0c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e20e      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ae:	4b22      	ldr	r3, [pc, #136]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1e0>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d041      	beq.n	800294e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01c      	beq.n	800290c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d2:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80028d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d8:	4a17      	ldr	r2, [pc, #92]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7ff fa93 	bl	8001e0c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ea:	f7ff fa8f 	bl	8001e0c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1e7      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0ef      	beq.n	80028ea <HAL_RCC_OscConfig+0x22e>
 800290a:	e020      	b.n	800294e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290c:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002912:	4a09      	ldr	r2, [pc, #36]	@ (8002938 <HAL_RCC_OscConfig+0x27c>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff fa76 	bl	8001e0c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002922:	e00d      	b.n	8002940 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002924:	f7ff fa72 	bl	8001e0c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d906      	bls.n	8002940 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1ca      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002940:	4b8c      	ldr	r3, [pc, #560]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ea      	bne.n	8002924 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80a6 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002960:	4b84      	ldr	r3, [pc, #528]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x2b4>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x2b6>
 8002970:	2300      	movs	r3, #0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b7f      	ldr	r3, [pc, #508]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002980:	6593      	str	r3, [r2, #88]	@ 0x58
 8002982:	4b7c      	ldr	r3, [pc, #496]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800298e:	2301      	movs	r3, #1
 8002990:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002992:	4b79      	ldr	r3, [pc, #484]	@ (8002b78 <HAL_RCC_OscConfig+0x4bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d118      	bne.n	80029d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800299e:	4b76      	ldr	r3, [pc, #472]	@ (8002b78 <HAL_RCC_OscConfig+0x4bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a75      	ldr	r2, [pc, #468]	@ (8002b78 <HAL_RCC_OscConfig+0x4bc>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029aa:	f7ff fa2f 	bl	8001e0c <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b2:	f7ff fa2b 	bl	8001e0c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e183      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b78 <HAL_RCC_OscConfig+0x4bc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d108      	bne.n	80029ea <HAL_RCC_OscConfig+0x32e>
 80029d8:	4b66      	ldr	r3, [pc, #408]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029de:	4a65      	ldr	r2, [pc, #404]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029e8:	e024      	b.n	8002a34 <HAL_RCC_OscConfig+0x378>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d110      	bne.n	8002a14 <HAL_RCC_OscConfig+0x358>
 80029f2:	4b60      	ldr	r3, [pc, #384]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a02:	4b5c      	ldr	r3, [pc, #368]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	4a5a      	ldr	r2, [pc, #360]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a12:	e00f      	b.n	8002a34 <HAL_RCC_OscConfig+0x378>
 8002a14:	4b57      	ldr	r3, [pc, #348]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1a:	4a56      	ldr	r2, [pc, #344]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a24:	4b53      	ldr	r3, [pc, #332]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2a:	4a52      	ldr	r2, [pc, #328]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002a2c:	f023 0304 	bic.w	r3, r3, #4
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d016      	beq.n	8002a6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7ff f9e6 	bl	8001e0c <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7ff f9e2 	bl	8001e0c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e138      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5a:	4b46      	ldr	r3, [pc, #280]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ed      	beq.n	8002a44 <HAL_RCC_OscConfig+0x388>
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7ff f9cf 	bl	8001e0c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7ff f9cb 	bl	8001e0c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e121      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a88:	4b3a      	ldr	r3, [pc, #232]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ed      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a96:	7ffb      	ldrb	r3, [r7, #31]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa0:	4a34      	ldr	r2, [pc, #208]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d03c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01c      	beq.n	8002af6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002abc:	4b2d      	ldr	r3, [pc, #180]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7ff f99e 	bl	8001e0c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ad4:	f7ff f99a 	bl	8001e0c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0f2      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ae6:	4b23      	ldr	r3, [pc, #140]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ef      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x418>
 8002af4:	e01b      	b.n	8002b2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002af6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002afc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7ff f981 	bl	8001e0c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b0e:	f7ff f97d 	bl	8001e0c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0d5      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1ef      	bne.n	8002b0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80c9 	beq.w	8002cca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b0c      	cmp	r3, #12
 8002b42:	f000 8083 	beq.w	8002c4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d15e      	bne.n	8002c0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <HAL_RCC_OscConfig+0x4b8>)
 8002b54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7ff f957 	bl	8001e0c <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b60:	e00c      	b.n	8002b7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b62:	f7ff f953 	bl	8001e0c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d905      	bls.n	8002b7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0ab      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	4b55      	ldr	r3, [pc, #340]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ec      	bne.n	8002b62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b88:	4b52      	ldr	r3, [pc, #328]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	4b52      	ldr	r3, [pc, #328]	@ (8002cd8 <HAL_RCC_OscConfig+0x61c>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6a11      	ldr	r1, [r2, #32]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002ba2:	0212      	lsls	r2, r2, #8
 8002ba4:	4311      	orrs	r1, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002baa:	0852      	lsrs	r2, r2, #1
 8002bac:	3a01      	subs	r2, #1
 8002bae:	0552      	lsls	r2, r2, #21
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bb6:	0852      	lsrs	r2, r2, #1
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	0652      	lsls	r2, r2, #25
 8002bbc:	4311      	orrs	r1, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bc2:	06d2      	lsls	r2, r2, #27
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	4943      	ldr	r1, [pc, #268]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b41      	ldr	r3, [pc, #260]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a40      	ldr	r2, [pc, #256]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a3d      	ldr	r2, [pc, #244]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7ff f912 	bl	8001e0c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7ff f90e 	bl	8001e0c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e066      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfe:	4b35      	ldr	r3, [pc, #212]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x530>
 8002c0a:	e05e      	b.n	8002cca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0c:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a30      	ldr	r2, [pc, #192]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7ff f8f8 	bl	8001e0c <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7ff f8f4 	bl	8001e0c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e04c      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c32:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c3e:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4924      	ldr	r1, [pc, #144]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c44:	4b25      	ldr	r3, [pc, #148]	@ (8002cdc <HAL_RCC_OscConfig+0x620>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	60cb      	str	r3, [r1, #12]
 8002c4a:	e03e      	b.n	8002cca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e039      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c58:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd4 <HAL_RCC_OscConfig+0x618>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d12c      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	3b01      	subs	r3, #1
 8002c78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d123      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d11b      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d113      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	3b01      	subs	r3, #1
 8002cac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	019f800c 	.word	0x019f800c
 8002cdc:	feeefffc 	.word	0xfeeefffc

08002ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e11e      	b.n	8002f36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b91      	ldr	r3, [pc, #580]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d910      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b8e      	ldr	r3, [pc, #568]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 020f 	bic.w	r2, r3, #15
 8002d0e:	498c      	ldr	r1, [pc, #560]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b8a      	ldr	r3, [pc, #552]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e106      	b.n	8002f36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d073      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d129      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3c:	4b81      	ldr	r3, [pc, #516]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0f4      	b.n	8002f36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d4c:	f000 f99e 	bl	800308c <RCC_GetSysClockFreqFromPLLSource>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4a7c      	ldr	r2, [pc, #496]	@ (8002f48 <HAL_RCC_ClockConfig+0x268>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d93f      	bls.n	8002dda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d033      	beq.n	8002dda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d12f      	bne.n	8002dda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d7a:	4b72      	ldr	r3, [pc, #456]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d82:	4a70      	ldr	r2, [pc, #448]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d8a:	2380      	movs	r3, #128	@ 0x80
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e024      	b.n	8002dda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d98:	4b6a      	ldr	r3, [pc, #424]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0c6      	b.n	8002f36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da8:	4b66      	ldr	r3, [pc, #408]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0be      	b.n	8002f36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002db8:	f000 f8ce 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4a61      	ldr	r2, [pc, #388]	@ (8002f48 <HAL_RCC_ClockConfig+0x268>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d909      	bls.n	8002dda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dce:	4a5d      	ldr	r2, [pc, #372]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b5a      	ldr	r3, [pc, #360]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4957      	ldr	r1, [pc, #348]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dec:	f7ff f80e 	bl	8001e0c <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7ff f80a 	bl	8001e0c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e095      	b.n	8002f36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e34:	4b43      	ldr	r3, [pc, #268]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a42      	ldr	r2, [pc, #264]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002e3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e54:	4a3b      	ldr	r2, [pc, #236]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002e56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4936      	ldr	r1, [pc, #216]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b80      	cmp	r3, #128	@ 0x80
 8002e74:	d105      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e76:	4b33      	ldr	r3, [pc, #204]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4a32      	ldr	r2, [pc, #200]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002e7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e82:	4b2f      	ldr	r3, [pc, #188]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d21d      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e90:	4b2b      	ldr	r3, [pc, #172]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 020f 	bic.w	r2, r3, #15
 8002e98:	4929      	ldr	r1, [pc, #164]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ea0:	f7fe ffb4 	bl	8001e0c <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7fe ffb0 	bl	8001e0c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e03b      	b.n	8002f36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1ed      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4917      	ldr	r1, [pc, #92]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	490f      	ldr	r1, [pc, #60]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f0a:	f000 f825 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <HAL_RCC_ClockConfig+0x264>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490c      	ldr	r1, [pc, #48]	@ (8002f4c <HAL_RCC_ClockConfig+0x26c>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <HAL_RCC_ClockConfig+0x270>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_RCC_ClockConfig+0x274>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe ff20 	bl	8001d74 <HAL_InitTick>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40022000 	.word	0x40022000
 8002f44:	40021000 	.word	0x40021000
 8002f48:	04c4b400 	.word	0x04c4b400
 8002f4c:	080053a8 	.word	0x080053a8
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	e047      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f70:	4b27      	ldr	r3, [pc, #156]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f7c:	4b26      	ldr	r3, [pc, #152]	@ (8003018 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e03e      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f82:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d136      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f8e:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f98:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d10c      	bne.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fac:	4a1a      	ldr	r2, [pc, #104]	@ (8003018 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	4a16      	ldr	r2, [pc, #88]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fb6:	68d2      	ldr	r2, [r2, #12]
 8002fb8:	0a12      	lsrs	r2, r2, #8
 8002fba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	617b      	str	r3, [r7, #20]
      break;
 8002fc4:	e00c      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fc6:	4a13      	ldr	r2, [pc, #76]	@ (8003014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4a10      	ldr	r2, [pc, #64]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd0:	68d2      	ldr	r2, [r2, #12]
 8002fd2:	0a12      	lsrs	r2, r2, #8
 8002fd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
      break;
 8002fde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	0e5b      	lsrs	r3, r3, #25
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	3301      	adds	r3, #1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	e001      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003000:	693b      	ldr	r3, [r7, #16]
}
 8003002:	4618      	mov	r0, r3
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	00f42400 	.word	0x00f42400
 8003018:	007a1200 	.word	0x007a1200

0800301c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003020:	4b03      	ldr	r3, [pc, #12]	@ (8003030 <HAL_RCC_GetHCLKFreq+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000000 	.word	0x20000000

08003034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003038:	f7ff fff0 	bl	800301c <HAL_RCC_GetHCLKFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	4904      	ldr	r1, [pc, #16]	@ (800305c <HAL_RCC_GetPCLK1Freq+0x28>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	080053b8 	.word	0x080053b8

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003064:	f7ff ffda 	bl	800301c <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0adb      	lsrs	r3, r3, #11
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4904      	ldr	r1, [pc, #16]	@ (8003088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	080053b8 	.word	0x080053b8

0800308c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003092:	4b1e      	ldr	r3, [pc, #120]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800309c:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d10c      	bne.n	80030ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030b0:	4a17      	ldr	r2, [pc, #92]	@ (8003110 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	4a14      	ldr	r2, [pc, #80]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ba:	68d2      	ldr	r2, [r2, #12]
 80030bc:	0a12      	lsrs	r2, r2, #8
 80030be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	617b      	str	r3, [r7, #20]
    break;
 80030c8:	e00c      	b.n	80030e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ca:	4a12      	ldr	r2, [pc, #72]	@ (8003114 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	4a0e      	ldr	r2, [pc, #56]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030d4:	68d2      	ldr	r2, [r2, #12]
 80030d6:	0a12      	lsrs	r2, r2, #8
 80030d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]
    break;
 80030e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030e4:	4b09      	ldr	r3, [pc, #36]	@ (800310c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	0e5b      	lsrs	r3, r3, #25
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030fe:	687b      	ldr	r3, [r7, #4]
}
 8003100:	4618      	mov	r0, r3
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40021000 	.word	0x40021000
 8003110:	007a1200 	.word	0x007a1200
 8003114:	00f42400 	.word	0x00f42400

08003118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003120:	2300      	movs	r3, #0
 8003122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003124:	2300      	movs	r3, #0
 8003126:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8098 	beq.w	8003266 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b43      	ldr	r3, [pc, #268]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	4b40      	ldr	r3, [pc, #256]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	4a3f      	ldr	r2, [pc, #252]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003150:	6593      	str	r3, [r2, #88]	@ 0x58
 8003152:	4b3d      	ldr	r3, [pc, #244]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315e:	2301      	movs	r3, #1
 8003160:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003162:	4b3a      	ldr	r3, [pc, #232]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a39      	ldr	r2, [pc, #228]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800316c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800316e:	f7fe fe4d 	bl	8001e0c <HAL_GetTick>
 8003172:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003174:	e009      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003176:	f7fe fe49 	bl	8001e0c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d902      	bls.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	74fb      	strb	r3, [r7, #19]
        break;
 8003188:	e005      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800318a:	4b30      	ldr	r3, [pc, #192]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ef      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d159      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800319c:	4b2a      	ldr	r3, [pc, #168]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01e      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d019      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031b8:	4b23      	ldr	r3, [pc, #140]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031c4:	4b20      	ldr	r3, [pc, #128]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031da:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031e4:	4a18      	ldr	r2, [pc, #96]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d016      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fe fe09 	bl	8001e0c <HAL_GetTick>
 80031fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fc:	e00b      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fe fe05 	bl	8001e0c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d902      	bls.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	74fb      	strb	r3, [r7, #19]
            break;
 8003214:	e006      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ec      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800322a:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003238:	4903      	ldr	r1, [pc, #12]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003240:	e008      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	74bb      	strb	r3, [r7, #18]
 8003246:	e005      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003254:	7c7b      	ldrb	r3, [r7, #17]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4ba7      	ldr	r3, [pc, #668]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325e:	4aa6      	ldr	r2, [pc, #664]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003264:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003272:	4ba1      	ldr	r3, [pc, #644]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003278:	f023 0203 	bic.w	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	499d      	ldr	r1, [pc, #628]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003294:	4b98      	ldr	r3, [pc, #608]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329a:	f023 020c 	bic.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4995      	ldr	r1, [pc, #596]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032b6:	4b90      	ldr	r3, [pc, #576]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	498c      	ldr	r1, [pc, #560]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032d8:	4b87      	ldr	r3, [pc, #540]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	4984      	ldr	r1, [pc, #528]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032fa:	4b7f      	ldr	r3, [pc, #508]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003300:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	497b      	ldr	r1, [pc, #492]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800331c:	4b76      	ldr	r3, [pc, #472]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003322:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	4973      	ldr	r1, [pc, #460]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800333e:	4b6e      	ldr	r3, [pc, #440]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003344:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	496a      	ldr	r1, [pc, #424]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003360:	4b65      	ldr	r3, [pc, #404]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003366:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4962      	ldr	r1, [pc, #392]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003382:	4b5d      	ldr	r3, [pc, #372]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003388:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	4959      	ldr	r1, [pc, #356]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033a4:	4b54      	ldr	r3, [pc, #336]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	4951      	ldr	r1, [pc, #324]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033c6:	4b4c      	ldr	r3, [pc, #304]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	4948      	ldr	r1, [pc, #288]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e8:	4b43      	ldr	r3, [pc, #268]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	4940      	ldr	r1, [pc, #256]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003406:	d105      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003408:	4b3b      	ldr	r3, [pc, #236]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a3a      	ldr	r2, [pc, #232]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800340e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003412:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003420:	4b35      	ldr	r3, [pc, #212]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342e:	4932      	ldr	r1, [pc, #200]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343e:	d105      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003440:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a2c      	ldr	r2, [pc, #176]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800344a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003458:	4b27      	ldr	r3, [pc, #156]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	4924      	ldr	r1, [pc, #144]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003476:	d105      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003478:	4b1f      	ldr	r3, [pc, #124]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a1e      	ldr	r2, [pc, #120]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003482:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	4916      	ldr	r1, [pc, #88]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ae:	d105      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b0:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a10      	ldr	r2, [pc, #64]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d019      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	4908      	ldr	r1, [pc, #32]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034e6:	d109      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a02      	ldr	r2, [pc, #8]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
 80034f4:	e002      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d015      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003508:	4b29      	ldr	r3, [pc, #164]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	4926      	ldr	r1, [pc, #152]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003526:	d105      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003528:	4b21      	ldr	r3, [pc, #132]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a20      	ldr	r2, [pc, #128]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800352e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003532:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d015      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354e:	4918      	ldr	r1, [pc, #96]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355e:	d105      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003560:	4b13      	ldr	r3, [pc, #76]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4a12      	ldr	r2, [pc, #72]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d015      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003578:	4b0d      	ldr	r3, [pc, #52]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800357a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800357e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003586:	490a      	ldr	r1, [pc, #40]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003596:	d105      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4a04      	ldr	r2, [pc, #16]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800359e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80035a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000

080035b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e09d      	b.n	8003702 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035d6:	d009      	beq.n	80035ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	61da      	str	r2, [r3, #28]
 80035de:	e005      	b.n	80035ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe f90a 	bl	8001820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003622:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800362c:	d902      	bls.n	8003634 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e002      	b.n	800363a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003638:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003642:	d007      	beq.n	8003654 <HAL_SPI_Init+0xa0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	ea42 0103 	orr.w	r1, r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	f003 0204 	and.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036d0:	ea42 0103 	orr.w	r1, r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b088      	sub	sp, #32
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_SPI_Transmit+0x22>
 8003728:	2302      	movs	r3, #2
 800372a:	e15f      	b.n	80039ec <HAL_SPI_Transmit+0x2e2>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003734:	f7fe fb6a 	bl	8001e0c <HAL_GetTick>
 8003738:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d002      	beq.n	8003750 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800374a:	2302      	movs	r3, #2
 800374c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800374e:	e148      	b.n	80039e2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_SPI_Transmit+0x52>
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d102      	bne.n	8003762 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003760:	e13f      	b.n	80039e2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2203      	movs	r2, #3
 8003766:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ac:	d10f      	bne.n	80037ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d8:	2b40      	cmp	r3, #64	@ 0x40
 80037da:	d007      	beq.n	80037ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037f4:	d94f      	bls.n	8003896 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_SPI_Transmit+0xfa>
 80037fe:	8afb      	ldrh	r3, [r7, #22]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d142      	bne.n	800388a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003828:	e02f      	b.n	800388a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b02      	cmp	r3, #2
 8003836:	d112      	bne.n	800385e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	881a      	ldrh	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800385c:	e015      	b.n	800388a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800385e:	f7fe fad5 	bl	8001e0c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d803      	bhi.n	8003876 <HAL_SPI_Transmit+0x16c>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d102      	bne.n	800387c <HAL_SPI_Transmit+0x172>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003888:	e0ab      	b.n	80039e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ca      	bne.n	800382a <HAL_SPI_Transmit+0x120>
 8003894:	e080      	b.n	8003998 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_Transmit+0x19a>
 800389e:	8afb      	ldrh	r3, [r7, #22]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d174      	bne.n	800398e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d912      	bls.n	80038d4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038be:	1c9a      	adds	r2, r3, #2
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b02      	subs	r3, #2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038d2:	e05c      	b.n	800398e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038fa:	e048      	b.n	800398e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d12b      	bne.n	8003962 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d912      	bls.n	800393a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003918:	881a      	ldrh	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	1c9a      	adds	r2, r3, #2
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b02      	subs	r3, #2
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003938:	e029      	b.n	800398e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003960:	e015      	b.n	800398e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003962:	f7fe fa53 	bl	8001e0c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d803      	bhi.n	800397a <HAL_SPI_Transmit+0x270>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d102      	bne.n	8003980 <HAL_SPI_Transmit+0x276>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800398c:	e029      	b.n	80039e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1b1      	bne.n	80038fc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	6839      	ldr	r1, [r7, #0]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fd07 	bl	80043b0 <SPI_EndRxTxTransaction>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e003      	b.n	80039e2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80039ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d002      	beq.n	8003a1a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
 8003a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a18:	e11a      	b.n	8003c50 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a22:	d112      	bne.n	8003a4a <HAL_SPI_Receive+0x56>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10e      	bne.n	8003a4a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f90e 	bl	8003c62 <HAL_SPI_TransmitReceive>
 8003a46:	4603      	mov	r3, r0
 8003a48:	e107      	b.n	8003c5a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_SPI_Receive+0x64>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e100      	b.n	8003c5a <HAL_SPI_Receive+0x266>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a60:	f7fe f9d4 	bl	8001e0c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Receive+0x7e>
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a76:	e0eb      	b.n	8003c50 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ac2:	d908      	bls.n	8003ad6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	e007      	b.n	8003ae6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ae4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aee:	d10f      	bne.n	8003b10 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003afe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1a:	2b40      	cmp	r3, #64	@ 0x40
 8003b1c:	d007      	beq.n	8003b2e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b36:	d86f      	bhi.n	8003c18 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b38:	e034      	b.n	8003ba4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d117      	bne.n	8003b78 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f103 020c 	add.w	r2, r3, #12
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003b76:	e015      	b.n	8003ba4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b78:	f7fe f948 	bl	8001e0c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d803      	bhi.n	8003b90 <HAL_SPI_Receive+0x19c>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d102      	bne.n	8003b96 <HAL_SPI_Receive+0x1a2>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003ba2:	e055      	b.n	8003c50 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1c4      	bne.n	8003b3a <HAL_SPI_Receive+0x146>
 8003bb0:	e038      	b.n	8003c24 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d115      	bne.n	8003bec <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003bea:	e015      	b.n	8003c18 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bec:	f7fe f90e 	bl	8001e0c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d803      	bhi.n	8003c04 <HAL_SPI_Receive+0x210>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d102      	bne.n	8003c0a <HAL_SPI_Receive+0x216>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003c16:	e01b      	b.n	8003c50 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1c6      	bne.n	8003bb2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fb69 	bl	8004300 <SPI_EndRxTransaction>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
 8003c46:	e003      	b.n	8003c50 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b08a      	sub	sp, #40	@ 0x28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c70:	2301      	movs	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x26>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e20a      	b.n	800409e <HAL_SPI_TransmitReceive+0x43c>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c90:	f7fe f8bc 	bl	8001e0c <HAL_GetTick>
 8003c94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ca4:	887b      	ldrh	r3, [r7, #2]
 8003ca6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cac:	7efb      	ldrb	r3, [r7, #27]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x6e>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cb8:	d106      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x66>
 8003cc2:	7efb      	ldrb	r3, [r7, #27]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d003      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003cce:	e1e0      	b.n	8004092 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_SPI_TransmitReceive+0x80>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_SPI_TransmitReceive+0x80>
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003ce8:	e1d3      	b.n	8004092 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d003      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2205      	movs	r2, #5
 8003cfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	887a      	ldrh	r2, [r7, #2]
 8003d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	887a      	ldrh	r2, [r7, #2]
 8003d16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	887a      	ldrh	r2, [r7, #2]
 8003d2a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d40:	d802      	bhi.n	8003d48 <HAL_SPI_TransmitReceive+0xe6>
 8003d42:	8a3b      	ldrh	r3, [r7, #16]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d908      	bls.n	8003d5a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	e007      	b.n	8003d6a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d74:	2b40      	cmp	r3, #64	@ 0x40
 8003d76:	d007      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d90:	f240 8081 	bls.w	8003e96 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_SPI_TransmitReceive+0x140>
 8003d9c:	8a7b      	ldrh	r3, [r7, #18]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d16d      	bne.n	8003e7e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da6:	881a      	ldrh	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db2:	1c9a      	adds	r2, r3, #2
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc6:	e05a      	b.n	8003e7e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d11b      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x1ac>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d016      	beq.n	8003e0e <HAL_SPI_TransmitReceive+0x1ac>
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d113      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dea:	881a      	ldrh	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df6:	1c9a      	adds	r2, r3, #2
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d11c      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x1f4>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	b292      	uxth	r2, r2
 8003e34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	1c9a      	adds	r2, r3, #2
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e52:	2301      	movs	r3, #1
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e56:	f7fd ffd9 	bl	8001e0c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d80b      	bhi.n	8003e7e <HAL_SPI_TransmitReceive+0x21c>
 8003e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d007      	beq.n	8003e7e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003e7c:	e109      	b.n	8004092 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d19f      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x166>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d199      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x166>
 8003e94:	e0e3      	b.n	800405e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_SPI_TransmitReceive+0x244>
 8003e9e:	8a7b      	ldrh	r3, [r7, #18]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f040 80cf 	bne.w	8004044 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d912      	bls.n	8003ed6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb4:	881a      	ldrh	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	1c9a      	adds	r2, r3, #2
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b02      	subs	r3, #2
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ed4:	e0b6      	b.n	8004044 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	7812      	ldrb	r2, [r2, #0]
 8003ee2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efc:	e0a2      	b.n	8004044 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d134      	bne.n	8003f76 <HAL_SPI_TransmitReceive+0x314>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d02f      	beq.n	8003f76 <HAL_SPI_TransmitReceive+0x314>
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d12c      	bne.n	8003f76 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d912      	bls.n	8003f4c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	881a      	ldrh	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f36:	1c9a      	adds	r2, r3, #2
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b02      	subs	r3, #2
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f4a:	e012      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	7812      	ldrb	r2, [r2, #0]
 8003f58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d148      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x3b4>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d042      	beq.n	8004016 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d923      	bls.n	8003fe4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	1c9a      	adds	r2, r3, #2
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b02      	subs	r3, #2
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d81f      	bhi.n	8004012 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	e016      	b.n	8004012 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f103 020c 	add.w	r2, r3, #12
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	7812      	ldrb	r2, [r2, #0]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004012:	2301      	movs	r3, #1
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004016:	f7fd fef9 	bl	8001e0c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004022:	429a      	cmp	r2, r3
 8004024:	d803      	bhi.n	800402e <HAL_SPI_TransmitReceive+0x3cc>
 8004026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d102      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x3d2>
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	2b00      	cmp	r3, #0
 8004032:	d107      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004042:	e026      	b.n	8004092 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	f47f af57 	bne.w	8003efe <HAL_SPI_TransmitReceive+0x29c>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f af50 	bne.w	8003efe <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f9a4 	bl	80043b0 <SPI_EndRxTxTransaction>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004088:	e003      	b.n	8004092 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800409a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3728      	adds	r7, #40	@ 0x28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040b4:	b2db      	uxtb	r3, r3
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040d4:	f7fd fe9a 	bl	8001e0c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	4413      	add	r3, r2
 80040e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040e4:	f7fd fe92 	bl	8001e0c <HAL_GetTick>
 80040e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	015b      	lsls	r3, r3, #5
 80040f0:	0d1b      	lsrs	r3, r3, #20
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	fb02 f303 	mul.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040fa:	e054      	b.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d050      	beq.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004104:	f7fd fe82 	bl	8001e0c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	429a      	cmp	r2, r3
 8004112:	d902      	bls.n	800411a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d13d      	bne.n	8004196 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004128:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004132:	d111      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800413c:	d004      	beq.n	8004148 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004146:	d107      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004156:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004160:	d10f      	bne.n	8004182 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004180:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e017      	b.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	bf0c      	ite	eq
 80041b6:	2301      	moveq	r3, #1
 80041b8:	2300      	movne	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d19b      	bne.n	80040fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000000 	.word	0x20000000

080041d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	@ 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041e6:	f7fd fe11 	bl	8001e0c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	4413      	add	r3, r2
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80041f6:	f7fd fe09 	bl	8001e0c <HAL_GetTick>
 80041fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004204:	4b3d      	ldr	r3, [pc, #244]	@ (80042fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00da      	lsls	r2, r3, #3
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	0d1b      	lsrs	r3, r3, #20
 8004214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800421c:	e060      	b.n	80042e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004224:	d107      	bne.n	8004236 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004234:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d050      	beq.n	80042e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800423e:	f7fd fde5 	bl	8001e0c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424a:	429a      	cmp	r2, r3
 800424c:	d902      	bls.n	8004254 <SPI_WaitFifoStateUntilTimeout+0x80>
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d13d      	bne.n	80042d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004262:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800426c:	d111      	bne.n	8004292 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004276:	d004      	beq.n	8004282 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004280:	d107      	bne.n	8004292 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004290:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800429a:	d10f      	bne.n	80042bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e010      	b.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	3b01      	subs	r3, #1
 80042de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d196      	bne.n	800421e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3728      	adds	r7, #40	@ 0x28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000000 	.word	0x20000000

08004300 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004314:	d111      	bne.n	800433a <SPI_EndRxTransaction+0x3a>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800431e:	d004      	beq.n	800432a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004328:	d107      	bne.n	800433a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004338:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2200      	movs	r2, #0
 8004342:	2180      	movs	r1, #128	@ 0x80
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff febd 	bl	80040c4 <SPI_WaitFlagStateUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e023      	b.n	80043a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004368:	d11d      	bne.n	80043a6 <SPI_EndRxTransaction+0xa6>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004372:	d004      	beq.n	800437e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800437c:	d113      	bne.n	80043a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2200      	movs	r2, #0
 8004386:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff ff22 	bl	80041d4 <SPI_WaitFifoStateUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439a:	f043 0220 	orr.w	r2, r3, #32
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e000      	b.n	80043a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f7ff ff03 	bl	80041d4 <SPI_WaitFifoStateUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e027      	b.n	8004434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	2180      	movs	r1, #128	@ 0x80
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff fe68 	bl	80040c4 <SPI_WaitFlagStateUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e014      	b.n	8004434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2200      	movs	r2, #0
 8004412:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff fedc 	bl	80041d4 <SPI_WaitFifoStateUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004426:	f043 0220 	orr.w	r2, r3, #32
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e000      	b.n	8004434 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e042      	b.n	80044d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7fd fb51 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2224      	movs	r2, #36	@ 0x24
 800446a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fbb2 	bl	8004bf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8b3 	bl	80045f8 <UART_SetConfig>
 8004492:	4603      	mov	r3, r0
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e01b      	b.n	80044d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fc31 	bl	8004d34 <UART_CheckIdleState>
 80044d2:	4603      	mov	r3, r0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	@ 0x28
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d17b      	bne.n	80045ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_UART_Transmit+0x26>
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e074      	b.n	80045f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2221      	movs	r2, #33	@ 0x21
 8004512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004516:	f7fd fc79 	bl	8001e0c <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004534:	d108      	bne.n	8004548 <HAL_UART_Transmit+0x6c>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e003      	b.n	8004550 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004550:	e030      	b.n	80045b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2200      	movs	r2, #0
 800455a:	2180      	movs	r1, #128	@ 0x80
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fc93 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e03d      	b.n	80045f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004588:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	3302      	adds	r3, #2
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	e007      	b.n	80045a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3301      	adds	r3, #1
 80045a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1c8      	bne.n	8004552 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2140      	movs	r1, #64	@ 0x40
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fc5c 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e006      	b.n	80045f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e000      	b.n	80045f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
  }
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045fc:	b08c      	sub	sp, #48	@ 0x30
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	431a      	orrs	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	431a      	orrs	r2, r3
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4baa      	ldr	r3, [pc, #680]	@ (80048d0 <UART_SetConfig+0x2d8>)
 8004628:	4013      	ands	r3, r2
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004630:	430b      	orrs	r3, r1
 8004632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a9f      	ldr	r2, [pc, #636]	@ (80048d4 <UART_SetConfig+0x2dc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004660:	4313      	orrs	r3, r2
 8004662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800466e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004678:	430b      	orrs	r3, r1
 800467a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	f023 010f 	bic.w	r1, r3, #15
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a90      	ldr	r2, [pc, #576]	@ (80048d8 <UART_SetConfig+0x2e0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d125      	bne.n	80046e8 <UART_SetConfig+0xf0>
 800469c:	4b8f      	ldr	r3, [pc, #572]	@ (80048dc <UART_SetConfig+0x2e4>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d81a      	bhi.n	80046e0 <UART_SetConfig+0xe8>
 80046aa:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <UART_SetConfig+0xb8>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046d1 	.word	0x080046d1
 80046b8:	080046c9 	.word	0x080046c9
 80046bc:	080046d9 	.word	0x080046d9
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046c6:	e116      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80046c8:	2302      	movs	r3, #2
 80046ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ce:	e112      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80046d0:	2304      	movs	r3, #4
 80046d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046d6:	e10e      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80046d8:	2308      	movs	r3, #8
 80046da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046de:	e10a      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046e6:	e106      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a7c      	ldr	r2, [pc, #496]	@ (80048e0 <UART_SetConfig+0x2e8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d138      	bne.n	8004764 <UART_SetConfig+0x16c>
 80046f2:	4b7a      	ldr	r3, [pc, #488]	@ (80048dc <UART_SetConfig+0x2e4>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b0c      	cmp	r3, #12
 80046fe:	d82d      	bhi.n	800475c <UART_SetConfig+0x164>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <UART_SetConfig+0x110>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800473d 	.word	0x0800473d
 800470c:	0800475d 	.word	0x0800475d
 8004710:	0800475d 	.word	0x0800475d
 8004714:	0800475d 	.word	0x0800475d
 8004718:	0800474d 	.word	0x0800474d
 800471c:	0800475d 	.word	0x0800475d
 8004720:	0800475d 	.word	0x0800475d
 8004724:	0800475d 	.word	0x0800475d
 8004728:	08004745 	.word	0x08004745
 800472c:	0800475d 	.word	0x0800475d
 8004730:	0800475d 	.word	0x0800475d
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004755 	.word	0x08004755
 800473c:	2300      	movs	r3, #0
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004742:	e0d8      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004744:	2302      	movs	r3, #2
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800474a:	e0d4      	b.n	80048f6 <UART_SetConfig+0x2fe>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004752:	e0d0      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800475a:	e0cc      	b.n	80048f6 <UART_SetConfig+0x2fe>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004762:	e0c8      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a5e      	ldr	r2, [pc, #376]	@ (80048e4 <UART_SetConfig+0x2ec>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d125      	bne.n	80047ba <UART_SetConfig+0x1c2>
 800476e:	4b5b      	ldr	r3, [pc, #364]	@ (80048dc <UART_SetConfig+0x2e4>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004774:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004778:	2b30      	cmp	r3, #48	@ 0x30
 800477a:	d016      	beq.n	80047aa <UART_SetConfig+0x1b2>
 800477c:	2b30      	cmp	r3, #48	@ 0x30
 800477e:	d818      	bhi.n	80047b2 <UART_SetConfig+0x1ba>
 8004780:	2b20      	cmp	r3, #32
 8004782:	d00a      	beq.n	800479a <UART_SetConfig+0x1a2>
 8004784:	2b20      	cmp	r3, #32
 8004786:	d814      	bhi.n	80047b2 <UART_SetConfig+0x1ba>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <UART_SetConfig+0x19a>
 800478c:	2b10      	cmp	r3, #16
 800478e:	d008      	beq.n	80047a2 <UART_SetConfig+0x1aa>
 8004790:	e00f      	b.n	80047b2 <UART_SetConfig+0x1ba>
 8004792:	2300      	movs	r3, #0
 8004794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004798:	e0ad      	b.n	80048f6 <UART_SetConfig+0x2fe>
 800479a:	2302      	movs	r3, #2
 800479c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047a0:	e0a9      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80047a2:	2304      	movs	r3, #4
 80047a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047a8:	e0a5      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80047aa:	2308      	movs	r3, #8
 80047ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b0:	e0a1      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80047b2:	2310      	movs	r3, #16
 80047b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b8:	e09d      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a4a      	ldr	r2, [pc, #296]	@ (80048e8 <UART_SetConfig+0x2f0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d125      	bne.n	8004810 <UART_SetConfig+0x218>
 80047c4:	4b45      	ldr	r3, [pc, #276]	@ (80048dc <UART_SetConfig+0x2e4>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80047d0:	d016      	beq.n	8004800 <UART_SetConfig+0x208>
 80047d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80047d4:	d818      	bhi.n	8004808 <UART_SetConfig+0x210>
 80047d6:	2b80      	cmp	r3, #128	@ 0x80
 80047d8:	d00a      	beq.n	80047f0 <UART_SetConfig+0x1f8>
 80047da:	2b80      	cmp	r3, #128	@ 0x80
 80047dc:	d814      	bhi.n	8004808 <UART_SetConfig+0x210>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <UART_SetConfig+0x1f0>
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d008      	beq.n	80047f8 <UART_SetConfig+0x200>
 80047e6:	e00f      	b.n	8004808 <UART_SetConfig+0x210>
 80047e8:	2300      	movs	r3, #0
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ee:	e082      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80047f0:	2302      	movs	r3, #2
 80047f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f6:	e07e      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047fe:	e07a      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004800:	2308      	movs	r3, #8
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004806:	e076      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004808:	2310      	movs	r3, #16
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480e:	e072      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a35      	ldr	r2, [pc, #212]	@ (80048ec <UART_SetConfig+0x2f4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d12a      	bne.n	8004870 <UART_SetConfig+0x278>
 800481a:	4b30      	ldr	r3, [pc, #192]	@ (80048dc <UART_SetConfig+0x2e4>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004820:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004828:	d01a      	beq.n	8004860 <UART_SetConfig+0x268>
 800482a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800482e:	d81b      	bhi.n	8004868 <UART_SetConfig+0x270>
 8004830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004834:	d00c      	beq.n	8004850 <UART_SetConfig+0x258>
 8004836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800483a:	d815      	bhi.n	8004868 <UART_SetConfig+0x270>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <UART_SetConfig+0x250>
 8004840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004844:	d008      	beq.n	8004858 <UART_SetConfig+0x260>
 8004846:	e00f      	b.n	8004868 <UART_SetConfig+0x270>
 8004848:	2300      	movs	r3, #0
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484e:	e052      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004850:	2302      	movs	r3, #2
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004856:	e04e      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004858:	2304      	movs	r3, #4
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485e:	e04a      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004866:	e046      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486e:	e042      	b.n	80048f6 <UART_SetConfig+0x2fe>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a17      	ldr	r2, [pc, #92]	@ (80048d4 <UART_SetConfig+0x2dc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d13a      	bne.n	80048f0 <UART_SetConfig+0x2f8>
 800487a:	4b18      	ldr	r3, [pc, #96]	@ (80048dc <UART_SetConfig+0x2e4>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004884:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004888:	d01a      	beq.n	80048c0 <UART_SetConfig+0x2c8>
 800488a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800488e:	d81b      	bhi.n	80048c8 <UART_SetConfig+0x2d0>
 8004890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004894:	d00c      	beq.n	80048b0 <UART_SetConfig+0x2b8>
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800489a:	d815      	bhi.n	80048c8 <UART_SetConfig+0x2d0>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <UART_SetConfig+0x2b0>
 80048a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a4:	d008      	beq.n	80048b8 <UART_SetConfig+0x2c0>
 80048a6:	e00f      	b.n	80048c8 <UART_SetConfig+0x2d0>
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ae:	e022      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80048b0:	2302      	movs	r3, #2
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b6:	e01e      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80048b8:	2304      	movs	r3, #4
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048be:	e01a      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80048c0:	2308      	movs	r3, #8
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c6:	e016      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80048c8:	2310      	movs	r3, #16
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ce:	e012      	b.n	80048f6 <UART_SetConfig+0x2fe>
 80048d0:	cfff69f3 	.word	0xcfff69f3
 80048d4:	40008000 	.word	0x40008000
 80048d8:	40013800 	.word	0x40013800
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40004400 	.word	0x40004400
 80048e4:	40004800 	.word	0x40004800
 80048e8:	40004c00 	.word	0x40004c00
 80048ec:	40005000 	.word	0x40005000
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4aae      	ldr	r2, [pc, #696]	@ (8004bb4 <UART_SetConfig+0x5bc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	f040 8097 	bne.w	8004a30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004906:	2b08      	cmp	r3, #8
 8004908:	d823      	bhi.n	8004952 <UART_SetConfig+0x35a>
 800490a:	a201      	add	r2, pc, #4	@ (adr r2, 8004910 <UART_SetConfig+0x318>)
 800490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004910:	08004935 	.word	0x08004935
 8004914:	08004953 	.word	0x08004953
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004953 	.word	0x08004953
 8004920:	08004943 	.word	0x08004943
 8004924:	08004953 	.word	0x08004953
 8004928:	08004953 	.word	0x08004953
 800492c:	08004953 	.word	0x08004953
 8004930:	0800494b 	.word	0x0800494b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004934:	f7fe fb7e 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8004938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800493a:	e010      	b.n	800495e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800493c:	4b9e      	ldr	r3, [pc, #632]	@ (8004bb8 <UART_SetConfig+0x5c0>)
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004940:	e00d      	b.n	800495e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004942:	f7fe fb09 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8004946:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004948:	e009      	b.n	800495e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004950:	e005      	b.n	800495e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800495c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8130 	beq.w	8004bc6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	4a94      	ldr	r2, [pc, #592]	@ (8004bbc <UART_SetConfig+0x5c4>)
 800496c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004970:	461a      	mov	r2, r3
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	fbb3 f3f2 	udiv	r3, r3, r2
 8004978:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	4413      	add	r3, r2
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	429a      	cmp	r2, r3
 8004988:	d305      	bcc.n	8004996 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	429a      	cmp	r2, r3
 8004994:	d903      	bls.n	800499e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800499c:	e113      	b.n	8004bc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	2200      	movs	r2, #0
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	60fa      	str	r2, [r7, #12]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	4a84      	ldr	r2, [pc, #528]	@ (8004bbc <UART_SetConfig+0x5c4>)
 80049ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2200      	movs	r2, #0
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049c0:	f7fc f820 	bl	8000a04 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	020b      	lsls	r3, r1, #8
 80049d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049da:	0202      	lsls	r2, r0, #8
 80049dc:	6979      	ldr	r1, [r7, #20]
 80049de:	6849      	ldr	r1, [r1, #4]
 80049e0:	0849      	lsrs	r1, r1, #1
 80049e2:	2000      	movs	r0, #0
 80049e4:	460c      	mov	r4, r1
 80049e6:	4605      	mov	r5, r0
 80049e8:	eb12 0804 	adds.w	r8, r2, r4
 80049ec:	eb43 0905 	adc.w	r9, r3, r5
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	469a      	mov	sl, r3
 80049f8:	4693      	mov	fp, r2
 80049fa:	4652      	mov	r2, sl
 80049fc:	465b      	mov	r3, fp
 80049fe:	4640      	mov	r0, r8
 8004a00:	4649      	mov	r1, r9
 8004a02:	f7fb ffff 	bl	8000a04 <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a14:	d308      	bcc.n	8004a28 <UART_SetConfig+0x430>
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1c:	d204      	bcs.n	8004a28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a3a      	ldr	r2, [r7, #32]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	e0ce      	b.n	8004bc6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a2e:	e0ca      	b.n	8004bc6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a38:	d166      	bne.n	8004b08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d827      	bhi.n	8004a92 <UART_SetConfig+0x49a>
 8004a42:	a201      	add	r2, pc, #4	@ (adr r2, 8004a48 <UART_SetConfig+0x450>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a7d 	.word	0x08004a7d
 8004a54:	08004a93 	.word	0x08004a93
 8004a58:	08004a83 	.word	0x08004a83
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004a93 	.word	0x08004a93
 8004a64:	08004a93 	.word	0x08004a93
 8004a68:	08004a8b 	.word	0x08004a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a6c:	f7fe fae2 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8004a70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a72:	e014      	b.n	8004a9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a74:	f7fe faf4 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a7a:	e010      	b.n	8004a9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a7c:	4b4e      	ldr	r3, [pc, #312]	@ (8004bb8 <UART_SetConfig+0x5c0>)
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a80:	e00d      	b.n	8004a9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a82:	f7fe fa69 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8004a86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a88:	e009      	b.n	8004a9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a90:	e005      	b.n	8004a9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8090 	beq.w	8004bc6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	4a44      	ldr	r2, [pc, #272]	@ (8004bbc <UART_SetConfig+0x5c4>)
 8004aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ab8:	005a      	lsls	r2, r3, #1
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	441a      	add	r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	d916      	bls.n	8004b00 <UART_SetConfig+0x508>
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad8:	d212      	bcs.n	8004b00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f023 030f 	bic.w	r3, r3, #15
 8004ae2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	8bfb      	ldrh	r3, [r7, #30]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	8bfa      	ldrh	r2, [r7, #30]
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	e062      	b.n	8004bc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b06:	e05e      	b.n	8004bc6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d828      	bhi.n	8004b62 <UART_SetConfig+0x56a>
 8004b10:	a201      	add	r2, pc, #4	@ (adr r2, 8004b18 <UART_SetConfig+0x520>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b3d 	.word	0x08004b3d
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b4d 	.word	0x08004b4d
 8004b24:	08004b63 	.word	0x08004b63
 8004b28:	08004b53 	.word	0x08004b53
 8004b2c:	08004b63 	.word	0x08004b63
 8004b30:	08004b63 	.word	0x08004b63
 8004b34:	08004b63 	.word	0x08004b63
 8004b38:	08004b5b 	.word	0x08004b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f7fe fa7a 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8004b40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b42:	e014      	b.n	8004b6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b44:	f7fe fa8c 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8004b48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b4a:	e010      	b.n	8004b6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb8 <UART_SetConfig+0x5c0>)
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b50:	e00d      	b.n	8004b6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b52:	f7fe fa01 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8004b56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b58:	e009      	b.n	8004b6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b60:	e005      	b.n	8004b6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d028      	beq.n	8004bc6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	4a10      	ldr	r2, [pc, #64]	@ (8004bbc <UART_SetConfig+0x5c4>)
 8004b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	441a      	add	r2, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	2b0f      	cmp	r3, #15
 8004b9c:	d910      	bls.n	8004bc0 <UART_SetConfig+0x5c8>
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba4:	d20c      	bcs.n	8004bc0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60da      	str	r2, [r3, #12]
 8004bb0:	e009      	b.n	8004bc6 <UART_SetConfig+0x5ce>
 8004bb2:	bf00      	nop
 8004bb4:	40008000 	.word	0x40008000
 8004bb8:	00f42400 	.word	0x00f42400
 8004bbc:	080053c0 	.word	0x080053c0
      }
      else
      {
        ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2200      	movs	r2, #0
 8004be0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004be2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3730      	adds	r7, #48	@ 0x30
 8004bea:	46bd      	mov	sp, r7
 8004bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01a      	beq.n	8004d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cee:	d10a      	bne.n	8004d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b098      	sub	sp, #96	@ 0x60
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d44:	f7fd f862 	bl	8001e0c <HAL_GetTick>
 8004d48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d12f      	bne.n	8004db8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d60:	2200      	movs	r2, #0
 8004d62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f88e 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d022      	beq.n	8004db8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e063      	b.n	8004e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d149      	bne.n	8004e5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f857 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03c      	beq.n	8004e5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	623b      	str	r3, [r7, #32]
   return(result);
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e6      	bne.n	8004de0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3308      	adds	r3, #8
 8004e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e32:	61fa      	str	r2, [r7, #28]
 8004e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	69b9      	ldr	r1, [r7, #24]
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e5      	bne.n	8004e12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e012      	b.n	8004e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3758      	adds	r7, #88	@ 0x58
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e98:	e04f      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d04b      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fc ffb3 	bl	8001e0c <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e04e      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d037      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b80      	cmp	r3, #128	@ 0x80
 8004ece:	d034      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b40      	cmp	r3, #64	@ 0x40
 8004ed4:	d031      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d110      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f838 	bl	8004f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e029      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f14:	d111      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f81e 	bl	8004f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e00f      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4013      	ands	r3, r2
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	bf0c      	ite	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	2300      	movne	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d0a0      	beq.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b095      	sub	sp, #84	@ 0x54
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e3      	bne.n	8004f9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d118      	bne.n	800500e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f023 0310 	bic.w	r3, r3, #16
 8004ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	613b      	str	r3, [r7, #16]
   return(result);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e6      	bne.n	8004fdc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005022:	bf00      	nop
 8005024:	3754      	adds	r7, #84	@ 0x54
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800502e:	b480      	push	{r7}
 8005030:	b085      	sub	sp, #20
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_UARTEx_DisableFifoMode+0x16>
 8005040:	2302      	movs	r3, #2
 8005042:	e027      	b.n	8005094 <HAL_UARTEx_DisableFifoMode+0x66>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2224      	movs	r2, #36	@ 0x24
 8005050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005072:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e02d      	b.n	8005114 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2224      	movs	r2, #36	@ 0x24
 80050c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f84f 	bl	8005198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005130:	2302      	movs	r3, #2
 8005132:	e02d      	b.n	8005190 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	@ 0x24
 8005140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0201 	bic.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f811 	bl	8005198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d108      	bne.n	80051ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051b8:	e031      	b.n	800521e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051ba:	2308      	movs	r3, #8
 80051bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051be:	2308      	movs	r3, #8
 80051c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	0e5b      	lsrs	r3, r3, #25
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	0f5b      	lsrs	r3, r3, #29
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051e2:	7bbb      	ldrb	r3, [r7, #14]
 80051e4:	7b3a      	ldrb	r2, [r7, #12]
 80051e6:	4911      	ldr	r1, [pc, #68]	@ (800522c <UARTEx_SetNbDataToProcess+0x94>)
 80051e8:	5c8a      	ldrb	r2, [r1, r2]
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051ee:	7b3a      	ldrb	r2, [r7, #12]
 80051f0:	490f      	ldr	r1, [pc, #60]	@ (8005230 <UARTEx_SetNbDataToProcess+0x98>)
 80051f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	7b7a      	ldrb	r2, [r7, #13]
 8005204:	4909      	ldr	r1, [pc, #36]	@ (800522c <UARTEx_SetNbDataToProcess+0x94>)
 8005206:	5c8a      	ldrb	r2, [r1, r2]
 8005208:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800520c:	7b7a      	ldrb	r2, [r7, #13]
 800520e:	4908      	ldr	r1, [pc, #32]	@ (8005230 <UARTEx_SetNbDataToProcess+0x98>)
 8005210:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005212:	fb93 f3f2 	sdiv	r3, r3, r2
 8005216:	b29a      	uxth	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	080053d8 	.word	0x080053d8
 8005230:	080053e0 	.word	0x080053e0

08005234 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800523c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005240:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	b29b      	uxth	r3, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	b29b      	uxth	r3, r3
 8005252:	4013      	ands	r3, r2
 8005254:	b29a      	uxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <memset>:
 80052a6:	4402      	add	r2, r0
 80052a8:	4603      	mov	r3, r0
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d100      	bne.n	80052b0 <memset+0xa>
 80052ae:	4770      	bx	lr
 80052b0:	f803 1b01 	strb.w	r1, [r3], #1
 80052b4:	e7f9      	b.n	80052aa <memset+0x4>
	...

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4d0d      	ldr	r5, [pc, #52]	@ (80052f0 <__libc_init_array+0x38>)
 80052bc:	4c0d      	ldr	r4, [pc, #52]	@ (80052f4 <__libc_init_array+0x3c>)
 80052be:	1b64      	subs	r4, r4, r5
 80052c0:	10a4      	asrs	r4, r4, #2
 80052c2:	2600      	movs	r6, #0
 80052c4:	42a6      	cmp	r6, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	4d0b      	ldr	r5, [pc, #44]	@ (80052f8 <__libc_init_array+0x40>)
 80052ca:	4c0c      	ldr	r4, [pc, #48]	@ (80052fc <__libc_init_array+0x44>)
 80052cc:	f000 f826 	bl	800531c <_init>
 80052d0:	1b64      	subs	r4, r4, r5
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	2600      	movs	r6, #0
 80052d6:	42a6      	cmp	r6, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e0:	4798      	blx	r3
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ea:	4798      	blx	r3
 80052ec:	3601      	adds	r6, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	080053f0 	.word	0x080053f0
 80052f4:	080053f0 	.word	0x080053f0
 80052f8:	080053f0 	.word	0x080053f0
 80052fc:	080053f4 	.word	0x080053f4

08005300 <memcpy>:
 8005300:	440a      	add	r2, r1
 8005302:	4291      	cmp	r1, r2
 8005304:	f100 33ff 	add.w	r3, r0, #4294967295
 8005308:	d100      	bne.n	800530c <memcpy+0xc>
 800530a:	4770      	bx	lr
 800530c:	b510      	push	{r4, lr}
 800530e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005316:	4291      	cmp	r1, r2
 8005318:	d1f9      	bne.n	800530e <memcpy+0xe>
 800531a:	bd10      	pop	{r4, pc}

0800531c <_init>:
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	bf00      	nop
 8005320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005322:	bc08      	pop	{r3}
 8005324:	469e      	mov	lr, r3
 8005326:	4770      	bx	lr

08005328 <_fini>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr
